
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20220210

module MenhirBasics = struct
  
  exception Error
  
  let _eRR =
    fun _s ->
      raise Error
  
  type token = 
    | WITH
    | WHILE_LWT
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNDERSCORE
    | UIDENT of (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27 "src/ocaml/preprocess/parser_raw.ml"
  )
    | TYPE
    | TRY_LWT
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (
# 848 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 40 "src/ocaml/preprocess/parser_raw.ml"
  )
    | STAR
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTED_STRING_ITEM of (
# 853 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 53 "src/ocaml/preprocess/parser_raw.ml"
  )
    | QUOTED_STRING_EXPR of (
# 850 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 58 "src/ocaml/preprocess/parser_raw.ml"
  )
    | QUOTE
    | QUESTIONQUESTION
    | QUESTION
    | PRIVATE
    | PREFIXOP of (
# 834 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 67 "src/ocaml/preprocess/parser_raw.ml"
  )
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of (
# 827 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 77 "src/ocaml/preprocess/parser_raw.ml"
  )
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NONLOCAL
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH_LWT
    | MATCH
    | LPAREN
    | LOCAL
    | LIDENT of (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 98 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET_LWT
    | LETOP of (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 104 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of (
# 795 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 124 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INT of (
# 794 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 129 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of (
# 788 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 136 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP3 of (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 141 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP2 of (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 146 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP1 of (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 151 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP0 of (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 156 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INCLUDE
    | IN
    | IF
    | HASHOP of (
# 845 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 164 "src/ocaml/preprocess/parser_raw.ml"
  )
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATERDOT
    | GREATER
    | GLOBAL
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR_LWT
    | FOR
    | FLOAT of (
# 772 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 180 "src/ocaml/preprocess/parser_raw.ml"
  )
    | FINALLY_LWT
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTTILDE
    | DOTOP of (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 196 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DOTLESS
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of (
# 870 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 205 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DO
    | CONSTRAINT
    | COMMENT of (
# 869 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 212 "src/ocaml/preprocess/parser_raw.ml"
  )
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of (
# 752 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 223 "src/ocaml/preprocess/parser_raw.ml"
  )
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | ANDOP of (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 236 "src/ocaml/preprocess/parser_raw.ml"
  )
    | AND
    | AMPERSAND
    | AMPERAMPER
  
end

include MenhirBasics

# 18 "src/ocaml/preprocess/parser_raw.mly"
  

[@@@ocaml.warning "-9"]

open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir
open Msupport_parsing

let mkloc = Location.mkloc
let mknoloc = Location.mknoloc

let make_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}

let ghost_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = true;
}

let mktyp ~loc ?attrs d = Typ.mk ~loc:(make_loc loc) ?attrs d
let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d

let pstr_typext (te, ext) =
  (Pstr_typext te, ext)
let pstr_primitive (vd, ext) =
  (Pstr_primitive vd, ext)
let pstr_type ((nr, ext), tys) =
  (Pstr_type (nr, tys), ext)
let pstr_exception (te, ext) =
  (Pstr_exception te, ext)
let pstr_include (body, ext) =
  (Pstr_include body, ext)
let pstr_recmodule (ext, bindings) =
  (Pstr_recmodule bindings, ext)

let psig_typext (te, ext) =
  (Psig_typext te, ext)
let psig_value (vd, ext) =
  (Psig_value vd, ext)
let psig_type ((nr, ext), tys) =
  (Psig_type (nr, tys), ext)
let psig_typesubst ((nr, ext), tys) =
  assert (nr = Recursive); (* see [no_nonrec_flag] *)
  (Psig_typesubst tys, ext)
let psig_exception (te, ext) =
  (Psig_exception te, ext)
let psig_include (body, ext) =
  (Psig_include body, ext)

let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkrhs rhs loc = mkloc rhs (make_loc loc)
let ghrhs rhs loc = mkloc rhs (ghost_loc loc)

let push_loc x acc =
  if x.Location.loc_ghost
  then acc
  else x :: acc

let reloc_pat ~loc x =
  { x with ppat_loc = make_loc loc;
           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
let reloc_exp ~loc x =
  { x with pexp_loc = make_loc loc;
           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
let reloc_typ ~loc x =
  { x with ptyp_loc = make_loc loc;
           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;

let mkexpvar ~loc (name : string) =
  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))

let mkoperator =
  mkexpvar

let mkpatvar ~loc name =
  mkpat ~loc (Ppat_var (mkrhs name loc))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d

let mkinfix arg1 op arg2 =
  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~oploc name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      Pexp_constant(Pconst_integer(neg_string n,m))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      Pexp_constant(Pconst_float(neg_string f, m))
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])


let local_ext_loc = mknoloc "extension.local"

let local_attr =
  Attr.mk ~loc:Location.none local_ext_loc (PStr [])

let local_extension =
  Exp.mk ~loc:Location.none (Pexp_extension(local_ext_loc, PStr []))

let include_functor_ext_loc = mknoloc "extension.include_functor"

let include_functor_attr =
  Attr.mk ~loc:Location.none include_functor_ext_loc (PStr [])

let mkexp_stack ~loc exp =
  ghexp ~loc (Pexp_apply(local_extension, [Nolabel, exp]))

let mkpat_stack pat =
  {pat with ppat_attributes = local_attr :: pat.ppat_attributes}

let mktyp_stack typ =
  {typ with ptyp_attributes = local_attr :: typ.ptyp_attributes}

let wrap_exp_stack exp =
  {exp with pexp_attributes = local_attr :: exp.pexp_attributes}

let mkexp_local_if p ~loc exp =
  if p then mkexp_stack ~loc exp else exp

let mkpat_local_if p pat =
  if p then mkpat_stack pat else pat

let mktyp_local_if p typ =
  if p then mktyp_stack typ else typ

let wrap_exp_local_if p exp =
  if p then wrap_exp_stack exp else exp

let curry_attr =
  Attr.mk ~loc:Location.none (mknoloc "extension.curry") (PStr [])

let is_curry_attr attr =
  attr.attr_name.txt = "extension.curry"

let mktyp_curry typ =
  {typ with ptyp_attributes = curry_attr :: typ.ptyp_attributes}

let maybe_curry_typ typ =
  match typ.ptyp_desc with
  | Ptyp_arrow _ ->
      if List.exists is_curry_attr typ.ptyp_attributes then typ
      else mktyp_curry typ
  | _ -> typ

let global_loc = mknoloc "extension.global"

let global_attr =
  Attr.mk ~loc:Location.none global_loc (PStr [])

let nonlocal_loc = mknoloc "extension.nonlocal"

let nonlocal_attr =
  Attr.mk ~loc:Location.none nonlocal_loc (PStr [])

let mkld_global ld =
  { ld with pld_attributes = global_attr :: ld.pld_attributes }

let mkld_nonlocal ld =
  { ld with pld_attributes = nonlocal_attr :: ld.pld_attributes }

let mkld_global_maybe gbl ld =
  match gbl with
  | Global -> mkld_global ld
  | Nonlocal -> mkld_nonlocal ld
  | Nothing -> ld

(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)

let mkexp_cons_desc consloc args =
  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
let mkexp_cons ~loc consloc args =
  mkexp ~loc (mkexp_cons_desc consloc args)

let mkpat_cons_desc consloc args =
  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
let mkpat_cons ~loc consloc args =
  mkpat ~loc (mkpat_cons_desc consloc args)

let ghexp_cons_desc consloc args =
  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
let ghpat_cons_desc consloc args =
  Ppat_construct(ghrhs (Lident "::") consloc, Some args)

let rec mktailexp nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Pexp_construct (nil, None), nilloc
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
      ghexp_cons_desc loc arg, loc

let rec mktailpat nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Ppat_construct (nil, None), nilloc
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
      ghpat_cons_desc loc arg, loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint ~loc e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> ghpat ~loc (Ppat_constraint(p, typ))

(*
let syntax_error () =
  raise Syntaxerr.Escape_error
*)

let not_expecting loc nonterm =
  raise_error Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))

(*
let unclosed opening_name opening_loc closing_name closing_loc =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
                                           make_loc closing_loc, closing_name)))
*)

let expecting loc nonterm =
    raise_error Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))

let dotop ~left ~right ~assign ~ext ~multi =
  let assign = if assign then "<-" else "" in
  let mid = if multi then ";.." else "" in
  String.concat "" ["."; ext; left; mid; right; assign]
let paren = "(",")"
let brace = "{", "}"
let bracket = "[", "]"
let lident x =  Lident x
let ldot x y = Ldot(x,y)
let dotop_fun ~loc dotop =
  ghexp ~loc (Pexp_ident (ghloc ~loc dotop))

let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str,
                   (if !Clflags.fast then "unsafe_" ^ name else name)))

let array_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
let string_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))

let array_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
let string_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))

let multi_indices ~loc = function
  | [a] -> false, a
  | l -> true, mkexp ~loc (Pexp_array l)

let index_get ~loc get_fun array index =
  let args = [Nolabel, array; Nolabel, index] in
   mkexp ~loc (Pexp_apply(get_fun, args))

let index_set ~loc set_fun array index value =
  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
   mkexp ~loc (Pexp_apply(set_fun, args))

let array_get ~loc = index_get ~loc (array_get_fun ~loc)
let string_get ~loc = index_get ~loc (string_get_fun ~loc)
let dotop_get ~loc path (left,right) ext array index =
  let multi, index = multi_indices ~loc index in
  index_get ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:false))
    array index

let array_set ~loc = index_set ~loc (array_set_fun ~loc)
let string_set ~loc = index_set ~loc (string_set_fun ~loc)
let dotop_set ~loc path (left,right) ext array index value=
  let multi, index = multi_indices ~loc index in
  index_set ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:true))
    array index value


let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]

let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.fast then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))

let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.fast then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))

let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(
                  Syntaxerr.Applicative_path (make_loc loc)))

(* [loc_map] could be [Location.map]. *)
let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
  { x with txt = f x.txt }

let make_ghost x = { x with loc = { x.loc with loc_ghost = true }}

let loc_last (id : Longident.t Location.loc) : string Location.loc =
  loc_map Longident.last id

let loc_lident (id : string Location.loc) : Longident.t Location.loc =
  loc_map (fun x -> Lident x) id

let exp_of_longident ~loc lid =
  let lid = make_ghost (loc_map (fun id -> Lident (Longident.last id)) lid) in
  ghexp ~loc (Pexp_ident lid)

let exp_of_label ~loc lbl =
  mkexp ~loc (Pexp_ident (loc_lident lbl))

let pat_of_label lbl =
  Pat.mk ~loc:lbl.loc  (Ppat_var (loc_last lbl))

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))

let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs ~loc:_ body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs ~loc:_ attrs body =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs ~loc:_ attrs body =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))

let wrap_mkstr_ext ~loc (item, ext) =
  wrap_str_ext ~loc (mkstr ~loc item) ext

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))

let wrap_mksig_ext ~loc (item, ext) =
  wrap_sig_ext ~loc (mksig ~loc item) ext

let mk_quotedext ~loc (id, idloc, str, strloc, delim) =
  let exp_id = mkloc id idloc in
  let e = ghexp ~loc (Pexp_constant (Pconst_string (str, strloc, delim))) in
  (exp_id, PStr [mkstrexp e []])

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos =
  List.map (fun def -> Ptop_def [def]) (Str.text (rhs_text pos))

let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
        text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
let extra_def p1 p2 items =
  extra_text p1 p2
    (fun txt -> List.map (fun def -> Ptop_def [def]) (Str.text txt))
    items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

(*
type let_binding =
  { lb_pattern: pattern;
    lb_expression: expression;
    lb_attributes: attributes;
    lb_docs: docs Lazy.t;
    lb_text: text Lazy.t;
    lb_loc: Location.t; }

type let_bindings =
  { lbs_bindings: let_binding list;
    lbs_rec: rec_flag;
    lbs_extension: string Asttypes.loc option;
    lbs_loc: Location.t }
*)

let mklb first ~loc (p, e) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy
               else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }

let mklbs ~loc ext rf lb =
  {
    lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = make_loc loc;
  }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    (* Our use of let_bindings(no_ext) guarantees the following: *)
    assert (lbs.lbs_extension = None);
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))

(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise_error (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        (* assert (ptyp.ptype_kind = Ptype_abstract); *)
        (* assert (ptyp.ptype_attributes = []); *)
        begin match ptyp.ptype_manifest with
        | Some ty -> Some (lid, ty)
        | None -> None
        end
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported";
        None
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [], pmty.pmty_attributes)
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.filter_map map_cstr cstrs, pmty.pmty_attributes)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"
      ; (Location.mkloc (Lident "_") pmty.pmty_loc, [], [])

let mk_directive_arg ~loc k =
  { pdira_desc = k;
    pdira_loc = make_loc loc;
  }

let mk_directive ~loc name arg =
  Ptop_dir {
      pdir_name = name;
      pdir_arg = arg;
      pdir_loc = make_loc loc;
    }

let merloc startpos ?endpos x =
  let endpos = match endpos with
    | None -> x.pexp_loc.Location.loc_end
    | Some endpos -> endpos
  in
  let loc = make_loc (startpos, endpos) in
  let str = mkloc "merlin.loc" loc in
  let attr = { attr_name = str; attr_loc = loc; attr_payload = PStr [] } in
  { x with pexp_attributes = attr :: x.pexp_attributes }

let val_of_lwt_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_lwt_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  Fake.app Fake.Lwt.in_lwt
    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
       (lbs.lbs_extension, []))


# 933 "src/ocaml/preprocess/parser_raw.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          136
      | AMPERSAND ->
          135
      | AND ->
          134
      | ANDOP _ ->
          133
      | AS ->
          132
      | ASSERT ->
          131
      | BACKQUOTE ->
          130
      | BANG ->
          129
      | BAR ->
          128
      | BARBAR ->
          127
      | BARRBRACKET ->
          126
      | BEGIN ->
          125
      | CHAR _ ->
          124
      | CLASS ->
          123
      | COLON ->
          122
      | COLONCOLON ->
          121
      | COLONEQUAL ->
          120
      | COLONGREATER ->
          119
      | COMMA ->
          118
      | COMMENT _ ->
          117
      | CONSTRAINT ->
          116
      | DO ->
          115
      | DOCSTRING _ ->
          114
      | DONE ->
          113
      | DOT ->
          112
      | DOTDOT ->
          111
      | DOTLESS ->
          110
      | DOTOP _ ->
          109
      | DOTTILDE ->
          108
      | DOWNTO ->
          107
      | ELSE ->
          106
      | END ->
          105
      | EOF ->
          104
      | EOL ->
          103
      | EQUAL ->
          102
      | EXCEPTION ->
          101
      | EXTERNAL ->
          100
      | FALSE ->
          99
      | FINALLY_LWT ->
          98
      | FLOAT _ ->
          97
      | FOR ->
          96
      | FOR_LWT ->
          95
      | FUN ->
          94
      | FUNCTION ->
          93
      | FUNCTOR ->
          92
      | GLOBAL ->
          91
      | GREATER ->
          90
      | GREATERDOT ->
          89
      | GREATERRBRACE ->
          88
      | GREATERRBRACKET ->
          87
      | HASH ->
          86
      | HASHOP _ ->
          85
      | IF ->
          84
      | IN ->
          83
      | INCLUDE ->
          82
      | INFIXOP0 _ ->
          81
      | INFIXOP1 _ ->
          80
      | INFIXOP2 _ ->
          79
      | INFIXOP3 _ ->
          78
      | INFIXOP4 _ ->
          77
      | INHERIT ->
          76
      | INITIALIZER ->
          75
      | INT _ ->
          74
      | LABEL _ ->
          73
      | LAZY ->
          72
      | LBRACE ->
          71
      | LBRACELESS ->
          70
      | LBRACKET ->
          69
      | LBRACKETAT ->
          68
      | LBRACKETATAT ->
          67
      | LBRACKETATATAT ->
          66
      | LBRACKETBAR ->
          65
      | LBRACKETGREATER ->
          64
      | LBRACKETLESS ->
          63
      | LBRACKETPERCENT ->
          62
      | LBRACKETPERCENTPERCENT ->
          61
      | LESS ->
          60
      | LESSMINUS ->
          59
      | LET ->
          58
      | LETOP _ ->
          57
      | LET_LWT ->
          56
      | LIDENT _ ->
          55
      | LOCAL ->
          54
      | LPAREN ->
          53
      | MATCH ->
          52
      | MATCH_LWT ->
          51
      | METHOD ->
          50
      | MINUS ->
          49
      | MINUSDOT ->
          48
      | MINUSGREATER ->
          47
      | MODULE ->
          46
      | MUTABLE ->
          45
      | NEW ->
          44
      | NONLOCAL ->
          43
      | NONREC ->
          42
      | OBJECT ->
          41
      | OF ->
          40
      | OPEN ->
          39
      | OPTLABEL _ ->
          38
      | OR ->
          37
      | PERCENT ->
          36
      | PLUS ->
          35
      | PLUSDOT ->
          34
      | PLUSEQ ->
          33
      | PREFIXOP _ ->
          32
      | PRIVATE ->
          31
      | QUESTION ->
          30
      | QUESTIONQUESTION ->
          29
      | QUOTE ->
          28
      | QUOTED_STRING_EXPR _ ->
          27
      | QUOTED_STRING_ITEM _ ->
          26
      | RBRACE ->
          25
      | RBRACKET ->
          24
      | REC ->
          23
      | RPAREN ->
          22
      | SEMI ->
          21
      | SEMISEMI ->
          20
      | SIG ->
          19
      | STAR ->
          18
      | STRING _ ->
          17
      | STRUCT ->
          16
      | THEN ->
          15
      | TILDE ->
          14
      | TO ->
          13
      | TRUE ->
          12
      | TRY ->
          11
      | TRY_LWT ->
          10
      | TYPE ->
          9
      | UIDENT _ ->
          8
      | UNDERSCORE ->
          7
      | VAL ->
          6
      | VIRTUAL ->
          5
      | WHEN ->
          4
      | WHILE ->
          3
      | WHILE_LWT ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | ANDOP _v ->
          Obj.repr _v
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | BACKQUOTE ->
          Obj.repr ()
      | BANG ->
          Obj.repr ()
      | BAR ->
          Obj.repr ()
      | BARBAR ->
          Obj.repr ()
      | BARRBRACKET ->
          Obj.repr ()
      | BEGIN ->
          Obj.repr ()
      | CHAR _v ->
          Obj.repr _v
      | CLASS ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONCOLON ->
          Obj.repr ()
      | COLONEQUAL ->
          Obj.repr ()
      | COLONGREATER ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | COMMENT _v ->
          Obj.repr _v
      | CONSTRAINT ->
          Obj.repr ()
      | DO ->
          Obj.repr ()
      | DOCSTRING _v ->
          Obj.repr _v
      | DONE ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | DOTDOT ->
          Obj.repr ()
      | DOTLESS ->
          Obj.repr ()
      | DOTOP _v ->
          Obj.repr _v
      | DOTTILDE ->
          Obj.repr ()
      | DOWNTO ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | END ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EOL ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXCEPTION ->
          Obj.repr ()
      | EXTERNAL ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FINALLY_LWT ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FOR ->
          Obj.repr ()
      | FOR_LWT ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | FUNCTOR ->
          Obj.repr ()
      | GLOBAL ->
          Obj.repr ()
      | GREATER ->
          Obj.repr ()
      | GREATERDOT ->
          Obj.repr ()
      | GREATERRBRACE ->
          Obj.repr ()
      | GREATERRBRACKET ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HASHOP _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INFIXOP0 _v ->
          Obj.repr _v
      | INFIXOP1 _v ->
          Obj.repr _v
      | INFIXOP2 _v ->
          Obj.repr _v
      | INFIXOP3 _v ->
          Obj.repr _v
      | INFIXOP4 _v ->
          Obj.repr _v
      | INHERIT ->
          Obj.repr ()
      | INITIALIZER ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | LABEL _v ->
          Obj.repr _v
      | LAZY ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACELESS ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LBRACKETAT ->
          Obj.repr ()
      | LBRACKETATAT ->
          Obj.repr ()
      | LBRACKETATATAT ->
          Obj.repr ()
      | LBRACKETBAR ->
          Obj.repr ()
      | LBRACKETGREATER ->
          Obj.repr ()
      | LBRACKETLESS ->
          Obj.repr ()
      | LBRACKETPERCENT ->
          Obj.repr ()
      | LBRACKETPERCENTPERCENT ->
          Obj.repr ()
      | LESS ->
          Obj.repr ()
      | LESSMINUS ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LETOP _v ->
          Obj.repr _v
      | LET_LWT ->
          Obj.repr ()
      | LIDENT _v ->
          Obj.repr _v
      | LOCAL ->
          Obj.repr ()
      | LPAREN ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | MATCH_LWT ->
          Obj.repr ()
      | METHOD ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MINUSDOT ->
          Obj.repr ()
      | MINUSGREATER ->
          Obj.repr ()
      | MODULE ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NONLOCAL ->
          Obj.repr ()
      | NONREC ->
          Obj.repr ()
      | OBJECT ->
          Obj.repr ()
      | OF ->
          Obj.repr ()
      | OPEN ->
          Obj.repr ()
      | OPTLABEL _v ->
          Obj.repr _v
      | OR ->
          Obj.repr ()
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PLUSDOT ->
          Obj.repr ()
      | PLUSEQ ->
          Obj.repr ()
      | PREFIXOP _v ->
          Obj.repr _v
      | PRIVATE ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | QUESTIONQUESTION ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | QUOTED_STRING_EXPR _v ->
          Obj.repr _v
      | QUOTED_STRING_ITEM _v ->
          Obj.repr _v
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REC ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMI ->
          Obj.repr ()
      | SEMISEMI ->
          Obj.repr ()
      | SIG ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRUCT ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TO ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TRY_LWT ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UIDENT _v ->
          Obj.repr _v
      | UNDERSCORE ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | VIRTUAL ->
          Obj.repr ()
      | WHEN ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WHILE_LWT ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
m\000\000\000\000\000\000\000\000\000\000\000\000\000p\000k\000\201\000\000\000\000\000\000\000\000\001k\000\000\000\000\001n\001l\001s\000A\002\142\000\000\001)\000\000\001\199\000n\000\000\003J\000\000\000\000\000\000\000\000\000\000\000\000\001\178\001\196\001\195\001\194\001\200\001\204\001\198\001\197\001\179\001\202\001\193\001\192\001\191\001\190\001\189\001\187\001\203\001\201\000\000\000\000\000\000\000\234\000\000\000\000\001\182\000\000\000\000\000\000\001\184\000\000\000\000\000\000\001\186\001\208\001\205\001\188\001\180\001\206\001\207\000\000\003I\000\000\000\000\000\024\001a\000\000\000\228\000\229\000\023\000\000\000\000\001\230\001\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\003A\000\000\000\000\003C\000\000\003E\000\000\003B\003D\000\000\003<\000\000\003;\0037\002F\000\000\003:\000\000\002G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001_\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\212\000\000\000\000\000%\000\000\000\000\000\000\000\000\000\000\000\000\001r\000\000\001b\001q\000\000\001`\000^\000\030\000\000\000\000\001\155\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0036\000(\000\000\000\000\000\031\000\026\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\252\000\000\000\000\000\000\000\000\000\000\002\251\000\000\002\255\002P\000\214\002B\000\000\000\"\000\000\002C\000\000\000\000\001\209\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\003\"\000\000\003#\000\000\000\127\000\000\000\000\000!\000\000\000\000\000\000\000#\000\000\000$\000\000\000&\000\000\000\000\000'\0026\0025\000\000\000\000\000\000\000\000\000\000\002\254\000\000\000\000\000\000\000\000\000\000\002\253\000\000\000\000\0028\000\000\000\000\000\000\000\000\000\000\000\000\001W\001Q\000\000\000\000\001R\000\000\000\029\000\000\000\028\000\000\000\000\000r\000\000\000\000\000\000\000 \000\027\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000m\000\000\001\149\001\147\001\148\000\000\000\000\000\000\000\000\000\000\000\000\000\239\000\000\001\171\000\000\000\242\000\240\000o\001\167\000\000\000q\000\000\000\000\000\000\000\000\000\000\000\000\000{\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\222\000s\000\000\000\000\002%\002#\002$\000\000\001\163\000\000\000\000\000\223\000\000\000\000\001\170\001\166\0035\000\000\000\000\000\000\000\000\000\000\001\173\001\169\001\165\000\000\000\000\001\172\001\168\001\164\001\162\000\000\002/\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002/\000\000\000\000\000\000\000\000\000\000\000\000\001/\000\227\000\000\000\000\002\025\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\000\000u\000\000\000\202\000w\000\000\003\023\002*\002+\002&\002(\002'\002)\000\000\000\000\000\000\000\203\0039\000\000\000\000\002/\000\000\000\226\000\000\000\000\000\000\000\000\003\022\000\000\000\237\000\015\000\014\000\000\000\000\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\000\000\002\181\000\000\002y\002z\000\000\002w\002x\000\000\000\000\000\000\000\000\000\000\001\131\001\130\000\000\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\003 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\003\000\000\001\002\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\000\000\002{\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\002\186\000l\000j\002\175\003K\002\176\002\004\002\178\000\000\000\000\002\183\002v\002\185\000\000\000\000\000\000\002\189\000\000\000\000\000\000\002\001\001\248\000\000\000\000\000\000\000\000\000\000\001\247\000\000\002\003\002\192\000\000\002\002\001\252\000\000\002\190\000\000\000\000\000\000\000\000\000\000\001\249\000\000\002\188\000\000\002|\000\000\000\000\002Z\002\187\002\184\000\000\000\000\000\000\000\000\001\214\001D\001E\002~\000\000\002}\000\000\000\000\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\255\002\011\001\001\000\000\000\000\000\000\001\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\006\000\000\002\177\000\000\000\000\002\191\001\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\215\000\000\000\000\000\000\000\000\000\000\000\000\0022\000\000\000\000\001\138\000\000\000\000\000\000\000\000\000\000\000\000\003`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\000\000\000\002A\000\000\000\000\001\137\000\000\000\000\000\000\001j\001\143\001i\001\141\0021\000\000\001\136\000\000\000\216\000\000\000\000\001{\000\000\000\000\001\127\000\000\001\232\000\000\000\000\001\231\001~\001|\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\001oa\002`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\014\000\000\000\000\000\000\000\000\001\012\000\000\000\000\001\n\001\t\001\007\000\000\000\000\000\000\000\208\000\207\002\249\000\000\000\000\000\000\000\000\001\016\000\000\000\000\001\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\b\002\006\002\007\000\000\000\000\000\000\000\000\000\018\001\019\001M\000\000\000\000\000\000\002\132\000\000\000\000\002\139\000\000\000\000\000\000\000\000\002\137\000\000\000\000\002T\000\000\000\000\002\136\000\000\000\000\002\138\002\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0024\0023\000\180\000\000\002\134\000\000\000\000\002\133\000\000\000\000\002\135\001\026\000\000\000\000\001\027\000\000\000\000\000\183\000\000\001\029\001\028\000\000\000\000\002\154\000\000\002\166\000\000\002\165\000\000\000\000\000\000\000\000\000\000\000b\000d\000a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\129\000\000\000\000\002?\000c\002>\002\171\000\000\002\173\000\000\002\172\000\000\000\000\000\000\000\000\000\000\000f\000h\000e\000g\002\170\000\000\000\000\002\155\000\000\000\000\000\000\002\"\000\000\001\228\000\000\000\000\000\000\002]\002!\000\000\002\162\000\000\000\000\000\000\001p\000\000\000\000\000\000\000\000\000\000\000\152\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\137\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\211\000\212\000\000\000\000\001\b\000\146\000\000\000\145\000\000\000\000\001O\000\000\001P\001N\002:\000\000\000\000\002;\0029\000\000\000\000\000\000\000\000\000\000\002\141\000\000\002\140\000\000\000\000\002\127\000\000\000\000\002\161\000\000\000\000\000\000\002W\002\152\000\000\002\151\000\000\002\167\000\000\002\168\002\164\000\000\002\163\000\000\002\169\000\143\000\000\000\000\000\000\000\000\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\000\001v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\000\000\000\001\018\002\248\002\250\001\025\001\226\000\000\000\253\000\000\000\000\000\252\000\254\000\000\000\000\000\000\000\000\000\000\001H\000\000\000\000\001G\001F\001J\000\000\001I\000\000\000\000\000\000\000\000\000\000\001\rb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\177\000\000\000\000\000\000\001\176\000\000\000\000\000\000\000\000\000\000\000\000\001\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001'\002p\000\000\000\000\000\000\002n\000\000\000\000\000\000\002m\000\000\001xt\002f\000\000\002l\002g\002r\002q\002o\0012\000\000\002d\000\000\000\000\000\000\000\000\002s\000\000\000\000\000\000\000\000\000\000\002/\000\000\000\000\001+\002h\000\000\000\000\000\000\000\000\000\000\000\000\002/\000\000\000\000\001-\002i\002e\002u\0011\002\014\002cr\000\000\000\000\003\014\000\000\000\204\000\000\003\r\000\000\000\000\000\236\000\000\000\155\000\000\001y\000\000\001\175\000\000\000\000\000\000\001\174\000\000\000\000\0015\0014\000\000\002\022\000\225\000\000\000\000\000\000\000\000\002k\002.\002,\002-\000\000\000\000\000\000\002/\000\000\000\224\000\000\000\000\000\000\000\000\002j\000\000\001\133\000\000\000\022\000\000\003R\000\000\000\200\002\149\000\000\000\000\000\000\000\000\002\143\000\000\000\000\002\144\000\000\002\129\000\000\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\135\000\000\000\134\000\000\000\000\000\000\000\151\000\000\000+\000\000\000\000\000\000\000\000\000\136\000\000\000\230\000\001\000\000\000\000\000\235\000\002\000\000\000\000\000\000\001d\001e\000\003\000\000\000\000\000\000\000\000\001g\001h\001f\000\019\001c\000\020\000\000\001\237\000\000\000\004\000\000\001\238\000\000\000\005\000\000\001\239\000\000\000\000\001\240\000\006\000\000\000\007\000\000\001\241\000\000\000\b\000\000\001\242\000\000\000\t\000\000\001\243\000\000\000\000\001\244\000\n\000\000\000\000\001\245\000\011\000\000\000\000\000\000\000\000\000\000\003*\003%\003&\003)\003'\000\000\003.\000\012\000\000\003-\000\000\001<\000\000\000\000\003+\000\000\003,\000\000\000\000\000\000\000\000\001@\001A\000\000\000\000\001?\001>\000\r\000\000\000\000\000\000\003H\000\000\003G")
  
  and error =
    (137, "3\248H0\177J\223\230g\160(\007\220\138\000\028p\024\220 \b\\$o\241'\208\004\003\232\005\000\0068\023\183dj\255\230o\249*\015\220J\136<\240/n\200\128\130\255\021\144\000L\028\007N8,\n\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\004\141\254$\250\000\128}\000\160\000\199\002\246\236\136\b/\241Y\000\004\193\192t\227\130\192\160\208\207\225\"\202\197+\127\153\158\128\160\031p(\000\241\192cp\128!p\145\191\196\159@\016\015\160\020\000\024\2241\184@\016\176H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\132\141\254$\250\000\128}\000\160\000\199\001\141\194\000\133\130F\255\018}\000@>\128P\000c\128\198\225\000B\193#\127\137\030\128 \031@(\0001\192cp\128!p\145\191\196\159@\016\015\160\020\000\024\2241\184@\016\176H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012B\000\132\000@(\0189\000\000\002\128P\000cn\253\217\191\127\247\255\252\157\031\238e\132\014y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0067\012B\031\137[\253H\244\249\132\250A\192\025\174\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\bB\000 \020\t\028\128\000\001@(\0001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\221\145\001\005\254+ \000\1528\014\156pX\020\026\025\252$YX\165o\2433\208\020\003\238\005\000\0308\000\000\000\000\002\000\001@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\000\000\000\000\000\000\000\000\000\000\000\001\000\007\224\006\002@\000>!\000\016 \004\nt\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\bp\128\000@\000\000\000\000\000\000\b\001\001\000\128 P \128\000\000\128\000\000\000\000\000\004\000\128\128\000\016(\016@\000\000@\000\000\000\000\000\002\000@@\000\b\020\b\000\000\000 \000\000\000\000\000\132\128\021@\002\006\tHp\000D\000\029\129\002 \004\002@\b \001\002\000\004(\000 \000\012@\000\016\000\001 \004\016\000\129\000\002\016\000\016\000\006 \000\b\000\000`\000\002&\b\017@\002\000@\000\000\000\000\000\016\0000\000\001\018\004\b\160\001\000 \000\000\000\000\000\b\000\024\000\000\137\002\004P\000\000\016\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\b\144\000E\000\000\001\000\000\000\000\000\000@\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\018\000\b\000\000\000 \000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\b\144\000@\000\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000H\001\020\b @\000\134\000\004\000\001\216\001\018\000@\024\128\001\176 \000p\184P\000 \001\000\016\000\b\000\018\000E\000\012\016%!\192\001\016\000f\004A\132\016\006 \000h\b\000\028.\020\000\b\000@\004\000\002\000\003\000\0044\004\004\014\023\b\000\004\000\000\000\000\128\000\001\128\000\024\000\000\005\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\006\000\000\001B\225\000\000\136\000\000@\000\000\000\016\000\128\000\000\000 \000\000\000D\000\000\000\004\000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\n\000\145\160\000\004\132\016\224`\b\128\t\002$\000 \133\128]\192\002\006CHp0D@\029\128\022a\022\001\128\000\024\000\000\007\011\132\000\002\000\000\000\000\000\000\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\002\000\012\000\004\208\016\0008\\ \000\016\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000@\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\160\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000 \000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\000\000\000\000\000\000\bp\000\129\144R\028\012\017\016\007`\005\136E\128`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\0000\000\003\000\000\000\161p\128\000@\000\000\000\000\000\004$\000\238\000\0162\nC\129\130\"\000\236\000\177\b\176\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\132\128\029\192\002\006AHp0D@\029\128\022!\022B@.\224\001\003 \1648\024\" \014\192\011\016\139\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\002\238\000\0162\026C\129\130\"\000\236\000\177\b\176\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\192.\224\001\003!\1648\024\" \014\192\011\016\139\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\016\176\011\184\000@\200i\014\006\b\136\003\176\002\196\"\200H\001\220\000 d\020\135\003\004D\001\216\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\192\000\0008\\ \000\016\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\016\144\003\184\000@\200)\014\006\b\136\003\176\002\196\"\200H\001\220\000 d\020\135\003\004D\001\216\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\003\000\0000\000\000\n\023\b\000\004\000\000\000\000\000\000B@\014\224\001\003 \1648\024\" \014\192\011\016\139! \007p\000\129\144R\028\012\017\016\007`\005\136E\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\001\220\000 d\020\135\003\004D\001\216\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\b\000\000\000\128\000\002\000\000\000\000\b\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000 \000\000\000\000\129\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\001\000\000\004\000\000\000\000\017 \000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000 \000\000\000\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\002\000\000\b\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\238\000\0162\nC\129\130\"\000\236\000\177\b`\000\000\020.\016\000\b\000\000\000\000\000\000\132\128\029\192\002\006AHp0D@\029\128\022!\022B@\014\224\001\003 \1648\024\" \014\192\011\016\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\0000\000\003@@\000\225p\128\000@\000\000\000\000\000\000\024\000\001\128\000\000P\184@\000 \000\000\000\000\000\002\018\000w\000\b\025\005!\192\193\017\000v\000X\132Y\t\000;\128\004\012\130\144\224`\136\128;\000,B,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\003@@\000\225p\128\000@\000\000\000\000\000\000\000\000D\000\000\000\000\000\128\000\002\000\000\000\000\000\128\000\000 \000\000\000\000\000@\000\001\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\128\000\000\000\000\000\003\000\0000\000\000\nb\000\000\000\000\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\000\000\000\000\000@\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\b\000\028.\016\000\bbb\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\130\000\1648\000\"\000\012\192\b0\130\000\192\000\012\000\000\002\133\194\128\001\000\000\000\000\000\000\000\000\000\000\000\005\000@\000\000\000\004\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\005\128Q@\002\006\003Hp\000d\000\025\128\016!\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001`\020P\000\129\000\210\028\000\025\000\006`\004\bA\000`\000\006\000\000\001B\225@\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\024\000\001\128\000\000P\184@\000 \000\000\000\000\000\000\022\000E\000\b\016\r!\192\001\144\000f\000@\132\016\011\000\162\128\004\012\006\144\224\000\200\0003\000 B\b\004\128\017@\002\004\001Hp\000D\000\025\128\016!\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128)\012\000\b\128\0030\002\004 \128\017\000\000\000\000\000\128\000\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\001Hp\000D\000\025\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\193\000R\028\000\017\000\006`\004\024A\000\144\002(\000@\128)\014\000\b\128\0030\002\004 \128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001@\016\000\000\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000R\028\000\017\000\007`\004\b\001\000\"\000\000@\000\001\000\001@\000\000\004\000@\000 \000\017\000\000\000\000\000\128\000\160\000\000\002\000 \000\016\000\000\000\000\000\001@\016\000\000\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\128\000\000\000\b\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\0006\004\000\014\023\n\000\004\000 \002\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000\002\024\000\016\000\006`\004\b\001\023\183d@A\127\138\200\000&\014\003\167\028\022\005\006\134\127\t\022V)[\252\204\244\005\000\251\129@\007\142\000\024\000\000\137\130\004P\000\128\016\000\000\000\000\000\004\000\012\000\000D\129\002(\000@\b\000\000\000\000\000\002\000\006\000\000\"@\129\020\000\000\004\000\000\000\000\000\001\000\003\000\000\017 \000\138\000\000\002\000\000\000\000\000\000\128\000\128\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001 \004P \129\000R\024\000\017\000\007`\004\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\001\020\000 @\020\134\000\004@\001\152\001\002\000@\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\132\128\021@\002\006\001Hp\000D\000\029\128\018 \004\002@\b\160\001\002 \1640\0242\000\012\192\b\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\016\000\000@\000@\000\000\001\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\002\000\001\016\000\000\000\000\b\000\b\000\000\000 \000\000\000\000\002@\b\160\001\130\000\1648\000\"\000\014\192\0000\128\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\192\001\016\000f\004\000\132\000\002\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128)\014\000\b\128\0030\000\004 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\128\001\016\000fv\000\001\132\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\000\000\004\128\017@\002\004\001Hp\000D\000\025\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000H\001\020\b @\020\134\000\004@\001\216\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\128\001\016\000f\000@\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\001\000\000\004\000\004\000\000\000\016\000\000\000\128\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000@\000\144\002(\000@\128)\012\000\b\128\0030\000\004 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003?\132\139\011\020\173\254fz\002\128}\204\160\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\128\016\b\000\004\002\b\000\000\b\000\000\000\000@\000\192@\b\004\000\002\001\004\000\000\004\000\000\000\000\000\000` \004\000\000\001\000\130\000\000\002\000\000\000\000\000\0000\016\002\000\000\000\128@\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\159\194A\133\138V\2553}\001@>\226P\000\227\128\207\225 \194\197+\127\153\158\128\160\031q(\000q\192\004\000\000@\016\000H\bP0\000\000\000\128\016\000\000\002\000\000 \000\000$\004(\024\000\000\000@\b\000\000\001\000\000\016\000\000\018\002\016\012\000\000\000 \004\000\000\000b\016\004\004\000\017@\145h\000\128\021\000\000\002\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\024\132?\000\177R\145i\241\136\021\129\0002Y`\000\000@\000\000\000\000\000\004\000\000\bb \000\000 \000\000\000\000\000\003\001\000 \000\000\b\004\000\000\000\016\000\000\000\000\000\003\128\128\016\000\000\004\002\000\000\000\b\000\000\000\000\000\024\220 \bX$o\241'\208\004\003\232\005\000\0068\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\141\194\000\133\194F\255\018}\000@>\128P\000c\128\198\225\000B\193#\127\137>\128 \031@(\0001\192cp\128!`\145\191\196\143@\016\015\160\020\000\024\2241\184@\016\184H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241'\208\004\003\232\005\000\0068\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\188\246\239/\240\190[\231\247\255n\015\239\237\191\254y\141\194\000\133\130F\255\018=\000@>\128P\000c\128\006!\004@`\001\028\t6\128\b\001@\000\000 \128\003\016\130  \000\142\004\155@\004\000\160\000\000\016@\001\136A\016\016\000G\002E\160\002\000P\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\004\004\000\017\192\145h\000\128\020\000\000\002\b\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\024\164\001! \004P$V\000 \005 \000\018\130\000\000\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\000 \000\000\192\000\rz\000\128}\000\160\000\199\000\012B\000\128\128\002(\018-\000\016\002\128\000\000A\000\006!\000@@\001\020\t\022\128\b\001P\000\000(\128\003\016\129  \000\138\004\139@\004\000\168\000\000\016@\000\128\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\000 \000\002\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\000\000\017\000\000\000\000\000 \000\000\000\b\000\000\000\000\000\000\b\128\000\000\000\000\000\000\000\000\004\000\000\000\000\001\136@\016\016\000E\002E\160\002\000T\000\000\b \000\196 \b\012\000\"\129&\144\001\000(\000\000\004\016\000b\016\004\004\000\017@\147H\000\128\020\000\000\002\b\0001\b\002\002\000\b\160H\164\000@\n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\bt5\128H\001J\004\r\170\160\000\000\128\000 \000\128\000\000@\000\000\128\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0011H\218B@(\160I\188\002@\n\208\016mU\000\b\000\000\000\000\000@\004P\000\000\000\000\000\000\000\000\012B\016\128\128\002(\018-\000\016\002\160\000\002A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\128 0\000\138\004\155@\004\000\168\000\000\016@\001\136@\016\016\000E\002M\160\002\000T\000\000\b \000\196 \b\b\000\"\129\"\208\001\000*\000\000\004\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000l\000\000\016\000\000\128\001\000\000(\000&(\128\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000 \000\027\000\000\004\000\000 \000@\000\n\000\t\138 \003\016\128  \000\138\004\139@\004\000\168\000\000\016@\b\000\006\192\000\001\000\000\b\000\016\000\002\128\002b\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002b\017\180\004\000Q@\147h\004\128\021\160\000\154\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000LB6\128\128\n(\018m\000\144\002\180\000\019U@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\b\000\000\000\000\000\002@\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\004\004\000\017@\145h\000\128\021\000\000\002\b\001\000\000\216\000\000 \000\001\000\002\000\000P\000LQ\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000@\0006\000\000\b\000\000@\000\128\000\020\000\019\020@\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\144\016\000E\002E\160\002\000T\000\000\bbb\160I\172\000@\n@\000M\021\000\016\000\000\000\000\000P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\000@@\001\028\t\022\128\b\001P\000\000 \128\003\016\128  \000\138\004\139@\004\000\168\000\000\016@\000\000\002\000\000\000\000\000\b\000\000\000\002\000\002`\136\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\128\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\012B\031\128X\233H\180\248\196\n\192\128\025,\176\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\018\018\000E\002E`\002\000R\000\001( \000\196 \b\b\000\"\129\"\144\001\000(\000\000\004\016\000b\024\132?\000\177\210\145i\241\136\021\129\0002Y`\000\000@\000\000\000\000\000\004\000\000\b\000\000\000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000\000\000\016\000\000\000\000\000@\000\000\000\000\000\018\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\006!\004@d\t\028\t6\128\b\001P\000\000 \128\003\001\000 \016\000\b\004\016\000\000\016\000\000\000\000\128\001\128\128\016\b\000\004\002\b\000\000\b\000\000\000\000\000\000\192@\b\000\000\002\001\004\000\000\004\000\000\000\000\000\000` \004\000\000\001\000\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\012\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\016\000\002\005\002\000\000\000\b\000\000\000\000\000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000  \000\004\n\004\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000! \005P\000\129\128R\028\000\017\000\007`\000\136\001\000\016\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\0000\000\001\018\000\b\160\000\000 \000\000\000\000\000\b\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\000\000\006\000\000l\b\000\028.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000! \005P\000\129\128R\028\000\017\000\007`\000\136\005\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\bH\001T\000 `\020\135\000\004@\001\216\001\"\001D$\000\170\000\0160\nC\128\002 \000\236\000\145\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\160\001\003\004\1648\000\"\000\014\192\129\016\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\001T\000 `\148\135\000\004@\001\216\016\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\018\000U\000\b\024\005!\192\001\016\000v\000\b\128\016\001\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\016\000\002\005\002\000\000\000\b\000\000\000\000\000! \005P\000\129\128R\028\000\017\000\007`\000\136\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\002\018\000U\000\b\024%!\192\001\016\000v\004\b\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\016\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\001\128\128\016\000\000\004\002\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\144\002\168\000@\193)\014\000\012\128\003\176\000L\000\128p\016B\000\000\000\128@\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000 \000@\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000  \000\004\n\004\000\000\000\016\000\000\000\000\000@\000\002\000\000\001\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\170\000\0160JC\128\003 \000\236\b\019\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000 \000@\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\2241\184@\016\176H\223\226G\160\b\007\208\n\000\014p\024\220 HX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000@\000\000\000 \000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\016\000@\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\012B\000\132\000@(\0189\000\000\002\128P\000c\001\000\000\017\000\000\000\000\000\000\000\024\000\b\018\004\128\000\003\016\128!\000\016\n\004\142@\000\000\160\020\000\024\1921\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\196 \bD\004\002\129'\144\000\000(\005\000\0060\000b\016\004 \002\001@\147\200\000\000\020\002\128\003\024\0001\b\002\016\001\000\160H\228\000\000\n\001@\001\140\003\027\132\001\011\132\141\254$\250\000\128}\004\160\000\199\001\141\194\000\133\130F\255\018}\000@>\130P\000c\128\198\225\000B\193#\127\137\030\128 \031A(\0001\192cp\128!p\145\191\196\159@\016\015\160\020\000\024\2241\184@\016\176H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000b\016\004\006\000\017@\147h\000\128\021\000\000\002(\0001\b\002\002\000\b\160I\180\000@\n\128\000\001\020\000\024\132\001\001\000\004P$Z\000 \005@\000\000\138\000\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000 \000\000\000\000\004\000\000 \000\000\000\000\000\t\002 cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\138@\018\026\000E\002M`\002\000P\000\000\b \000\197 \t\t\000\"\129&\176\001\000(\000\000\004\016\000b\144\004\132\128\017@\145X\000\128\020\000\000\002\b\0009\012B\031\128X\233H\180\248\196\n\192\128\025,\176\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006)\000HH\005\020\t\021\128\b\001@\000\000\160\128cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\136@\016\024\000E\002M\160\002\000T\000\000\b \000\196 \b\b\000\"\129&\208\001\000*\000\000\004\016\000b\016\004\004\000\017@\145h\000\128\021\000\000\002\b\000\000\000\000\000\000\000\000\001\000\002\000\000@\000H\017\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\012B\000\128\192\002(\018m\000\016\002\160\000\000A\000\006!\000@@\001\020\t6\128\b\001P\000\000 \128\003\016\128  \000\138\004\139@\004\000\168\000\000\016@\000\000\000\000\000\000\000\000\b\000\000\000\002\000\002@\136\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000b\016\004 \002\001@\145\200\000\000\020\002\128\003\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\158\221\229\254\023\203\\\254\255\237\193\253\253\183\255\223\000\128\000\000\000\000\005\000G\000\000\000\000\000\000\000\000\024\2201\b~%o\245#\211\230\019\233\007\000f\186\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0067\bB\022\t\027\252H\244\001\000\250\001@\001\142\003\027\132!\011\004\141\254$z\000\128}\000\160\000\199\000\012\004\000\128@\000 \016@\000\000@\000\000\000\000\000\006\002\000@\000\000\016\b \000\000 \000\000\000\000\000\003\001\000 \000\000\b\004\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\004\000\b\000\000\000\000\000\000 \000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\016\000\000\128\000\000@\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132!\011\004\141\254$z\000\128}\000\160\000\199\001\141\194\016\133\130F\255\018=\000@>\128P\000c\128\006!\b@@\001\020\t\022\128\b\001@\000\000 \128\000\000\000\000\000\000\000\000\016\000\000\000\004\000\004\193\016\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\0001\b\002\017\001\000\160I\228\000\000\n\001@\001\140\000\024\132\001\b\000\128P$\242\000\000\005\000\160\000\198\000\012B\000\132\000@(\0189\000\000\002\128P\000c\001)\020\187\129\244\015\130\176\224\127\219\130\187\211o\206\030\003\016\128!\000\016\n\004\142@\000\000\160\020\000\024\192K\207n\242\255\011\229\174\127\127\246\224\254\254\219\255\239\128\000\000\000\000\000\002\000\002\128\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\188\246\239/\240\190Z\231\247\255n\015\239\237\191\254x\000\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000\000\003 \000\000\000\000\004\000\000\000\001\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000\000\000\200\000\000\000\000\001\000\000\000\000@\000 \000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\0002\000\000\000\000\000@\000\000\000\016\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\b\002\016\001\000\160H\228\000\000\n\001@\001\140\004\188\246\239/\240\190Z\231\247\255n\015\239\237\191\254\248\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\n\000\n\000\000\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tH\165\220\015\160|\021\135\003\254\\\021\222\011~p\243\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\002^{w\151\248_-s\251\255\183\007\247\246\223\255=)\020\187\129\244\015\130\176\224\127\219\130\187\211o\206\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000C\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\0041\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000K\207n\242\255\011\229\174\127\127\246\224\254\254\219\255\231\165\"\151p>\129\240V\028\015\251pWzm\249\195\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\191\214\239\015\212\191\254\231\251\255\174\127\239\165\191\255z\246\236\136\b/\241Y\000\004\193\192t\227\130\192\160\208\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\128\196 \b\b\000#\129&\208\001\000(\000\000\004\016\000b\016\004\004\000\017\192\145h\000\128\020\000\000\002\b\0001H\002B@\b\160I\172\000@\n@\000m\021\000\028\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012R\000\144\144\002(\018+\000\016\002\144\000\tA\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000@\000L\017\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\002@\136\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\000\000\000\000\000\000\000\000\128\000\000\000 \000$\b\128\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000\000\000\000\000\000\000\000\000 \000\000\000\b\000\t\002 \003\016\128  \000\138\004\139@\004\000\168\000\000\016@\000\000\000\000\000\000\000\000\b\000\000\000\002\000\002@\136\000\000\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\018\004@\006!\000@@\001\020\t\022\128\b\001P\000\000 \128\000\000\000\000\000\000\000\000\016\000\000\000\004\000\004\129\016\002@\b\160\001\002\000\1640\0002\000\012\192\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\016 >\000`\004\004\003\224\016\001\000\001`\128\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\000\000\000\000@\000P\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&\192|\000\192\b\b\007\192 \002\000\002\195\001\152\220!hX$o\241#\208\004\003\232\005\000\0078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\004 \002\001@\145\200\000\000\020\002\128\003\024\ty\237\222_\225|\181\207\239\254\220\031\223\219\127\253\240\000\000\000\000\000\000@\000P\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\158\221\229\254\023\203|\254\255\237\193\253\253\183\255\2071\184@\016\176H\223\226G\160\b\007\208\n\000\012p%\"\151p>\129\240V\028\015\249pWx-\249\195\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\004\188\246\239/\240\190[\231\247\255n\015\239\237\191\254y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000%\231\183y\127\133\242\223?\191\251p\127\127m\255\243\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\tH\165\220\015\160|\021\135\003\254\\\021\222\011~p\240\b\000\000\000\000\000P\000P\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\158\221\229\254\023\203|\254\255\237\193\253\253\183\255\2071\184@\016\176H\223\226G\160\b\007\208\n\000\012p%\"\151p>\129\240V\028\015\249pWx-\249\195\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\004\188\246\239/\240\190[\231\247\255n\015\239\237\191\254y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000 @|\000\192\b\b\007\192 \002\000\002\193\001\165\231\183y\127\133\242\223?\191\251p\127\127m\255\243\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\tH\165\220\015\160|\021\135\003\254\\\021\222\011~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\000\000\000\000\000\000\000 \000(\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000K\207n\242\255\011\229\190\127\127\246\224\254\254\219\255\231\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\002^{w\151\248_-\243\251\255\183\007\247\246\223\255<\198\225\000B\193#\127\137\030\128 \031@(\0001\192\148\138]\192\250\007\193Xp?\229\193]\224\183\231\0151\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\018\243\219\188\191\194\249o\159\223\253\184?\191\182\255\249\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918z^{w\151\248_-\243\251\255\183\007\247\246\223\255<\198\225\000B\193#\127\137\030\128 \031@(\0001\192\148\138]\192\250\007\193Xp?\229\193]\224\183\231\015K\207n\242\255\011\229\174\127\127\246\224\254\254\219\255\239\165\231\183y\127\133\242\215?\191\249p\127}-\255\243\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\b\000\t\002 cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\001\001\000\004p$Z\000 \005\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\132!\000\016\n\004\142@\000\000\160\020\000\024\192\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\240\003\000  \031\000\130\b\000\011\012\006\003\016\128 0\000\138\004\155@\004\000\168\000\000\016@\b\000\000\000\000\000\000\000\000\000\000\000\128\000\000\002\002\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\b\000\031\0000\002\002\001\240\b \128\000\176\192`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\000@`\001\020\t6\128\b\001P\000\000 \128\003\016\128  \000\138\004\155@\004\000\168\000\000\016@\001\136@\016\016\000E\002E\160\002\000T\000\000\b \000\000\000\000\000\000\000\000\004\000\b\000\001\000\001 D\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\001\000\004\016\015\128\024\001\001\000\248\004\016@\000X`s\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000!\000\003\224\006\000@@>\001\000\016\128\022\b\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\004\000\016@>\000`\004\004\003\224\016A\000\001a\129\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\225\002B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t \031\0000\002\002\001\240\b \128\000\176@`1\b\002\003\000\b\160I\180\000@\n\128\000\001\004\000\128\000\b\000\000\000\000\000\000\000\000\b\000\000\000\000!\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\130\001\240\003\000  \031\000\130\bn`\000\000H\000\000\000\004\000\000\000\000\000(\0028\000\000\000\000\000\000\000\001\000\000\017\000\000\000\000\000\000\000\024\000\b\018\004\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\024\132?\000\177\210\145i\241\136\021\129\0002Y`\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012R\000\144\144\n(\018+\000\016\002\128\000\001A\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\001\000\000\000\000\002\002\000\000\000\004\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\144\004\132\128Q@\145X\000\128\020\000\000\n\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197 \t\t\000\162\129\"\176\001\000(\000\000\020\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@*\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2241\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001)\020\187\129\244\015\130\176\224\127\219\130\187\211o\206\030\000\000@\000\248\001\128\016\016\015\128\192\004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000%\231\183y\127\133\242\215?\191\251p\127\127m\255\247\192\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002D\007\192\012\000\128\128|\nb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\031\0000\002\002\001\240\b \128\000\176\192`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\004\000\128\000\000 \016@\000\000@\000\000\000\000\000\006\002\000@\000\000\016\b\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\b\000\016\000 \000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\002\000\000\000\002\000\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\016\000\001\000\000\006\002\000@\000\000\016\b\000\000\000 \000\000\000\000\000\004\128\017@\002\004\tHp\000d\000\025\128\000 \004\000\128\016\016\000\002\005\002\000\000\000\b\000\000\000\000\000 \000\000\000\000\000\128\000\004\000\000\000\001\000\000\000\000\000` \004\000\000\001\000\128\000\000\002\000\000\000\000\000\000H\001\020\000 @\148\135\000\006@\001\152\000\002\000@\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\004\000\002\000\006\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001\000\003\000\000\000\004\000\000\000\000\000\017\000\000\000\000\000\128\000\128\000\000\002\000\000\000\000\000\000\000\000\000\b\000\000\000\128\001\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000@\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196 \136\b\000#\129&\208\001\000(\000\000\004\016\000b\016D\004\000\017\192\145h\000\128\020\000\000\002\b\0001\b\002\002\000\b\224H\180\000@\n\000\000\001\004\000$\000\138\000\016 \nb\016\252\002\199JE\167\198 V\004\000\201e\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\0001H\002B@\b\160H\172\000@\n@\000%\004\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001H\002B@\b\160H\172\000@\n@\000%\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\002\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\001H`\000d\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000%\"\151p>\129\240V\028\015\249pWx-\249\195\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\138\002R)w\003\232\031\005a\192\255\151\005w\130\223\156=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\128  \000\138\004\139@\004\000\168\000\000\017@JE.\224}\003\224\1728\031\242\224\174\240[\243\135\128\000\017\000>\000`\004\004\003\224\016\001\000\001\240\128\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\002\002\000\000@\160@\000\000\001\000\000\000\000\000\004\000\000 \000\000\016\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000@@\000\b\020\b\000\000\000 \000\000\000\000\000\128\000\004\000\000\002\000\000\016\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\016\000\000\128\000\000@\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\170\000\0160JC\128\002 \000\236\000\017\000\"\000\000\016\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\002\000\000\002\000B\001\128\000\000\004\000\128\000\000 \000\000\000\000 \b\000@\000\000\000\000\000\000\002\000\000\000\000\000\000\016\004\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000H\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \000\000 \0040\024\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\128\000\b\000\000\b\001\014\006\000\000\000\016\002\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\018\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000@\002\000\000\000\000\000\000\000\016\000\000\000\000 \000\000 \001\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\006)\000HH\001\020\t\021\128\b\001H\000\000\160\128\003\128\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000@\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\002\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\002\000\000 \000\000 \0048\024\000\000\002@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\002\000\000\002\000C\129\128\000\000$\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\128\016\192`\000\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000b\144\004\132\128\017@\145X\000\128\020\128\000\n\b\0008\000\003@@\000\225p\128\000@\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\004\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001{vD\004\023\248\172\128\002`\224:q\193`Phg\240\145eb\149\191\204\207@P\015\184\020\000x\224\001\136@\016\016\000E\002E\160\002\000T\000\000\b \004\000\000@\000\000\000\000\004\000\000\000\000\000\001 D\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\016\000\128\000\000\000\128\000\000\000\000\000\000\000\000\004\000\000\000@\000\b\000@\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000 \000\000\000\000\000\000\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\000\1640\000\"\000\014\192\000\016\000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\016\144\002(\000@\192)\014\000\b\128\0030\000\004\000\000H\001\020\000 @\020\134\000\004@\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\006\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\002\000\000 \000\001 \004P\000\129\000R\024\000\017\000\006`\000\b\001\000\144\002(\000@\128)\b\000\b\128\0030\000\004\000\1280\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\016\000\001\000\000\t\000\"\128\004\b\002\144\192\000\136\0003\000\000@\b\004\128\017@\002\004\001H@\000D\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\128\000\b\000\000H\001\020\000 @\020\134\000\004@\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\246\236\136\b/\241Y\000\004\193\192t\227\130\192\160\208\207\225\"\202\197+\127\153\158\128\160\031p(\000\241\192\003\001  \016\004\n\004\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\002\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\b\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@H\160\001\002\000\1640\000\"\000\012\192\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128)\012\000\b\128\0030\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\128\000@\000\192\000\000\001\000\000\000\000\000\004@\000\000\000\000 \000`\000\000\000\128\000\000\000\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\000\000\004\128\017@\003\004\001Hp\000D\000\029\128\000`\000\000\136\000\000\000\000\004\000\004\000\000\000\016\000\000\000\000\001 \004P\000\129\000R\028\000\017\000\006`\000\b\000\000\144\002(\000@\128)\012\000\b\128\0030\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \nC\128\002 \000\204\000\001\000\000\018\000E\000\b\016\005!\128\001\016\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\128\017t\006\004\014\031H\000D\000\024\000\000 \000\002@\b\160\001\002\000\004 \000 \000\012\192\000\016\000\000@\000\000\004\000\000\000\004\000\000\000\000\000\000\000 \000 \000\000\002\000\000\000\002\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016 !\128\001\000\000f\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\002\002\024\000\016\000\006`@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000 \001\000\000\000\001\000\000\000\000\000\000\000\000\000\024\000\016\000\000\000\000\000\128\000\000\000\000\000\000\000\000\012\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\b\000\002\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\004\0040\000 \000\012\192\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\b\001\001\000\000 P \000\000\000\128\000\000\000\000\002\018\000E\000\b\024\000!\192\001\000\000f\000\000\128\016\t\000\"\128\004\b\000\016\128\000\128\0003\000\000@\b\003\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000 \004\004\000\000\129@\128\000\000\002\000\000\000\000\000\bH\001\020\000 `\000\135\000\004\000\001\152\000\002\000@$\000\138\000\016 \000B\000\002\000\000\204\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\004\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000\002\024\000\016\000\006`@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\002\002\000\000@\160@\000\000\001\000\000\000\000\000\004$\000\138\000\0160\000C\128\002\000\000\204\000\001\000\000\018\000E\000\b\016\000!\128\001\000\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\004\000\002\000\006\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001\000\003\000\000\000\004\000\000\000\000\000\017\000\000\000\000\000\128\000\128\000\000\002\000\000\000\000\000$\000\138\000\024 \000C\128\002\000\000\204\000\003\000\000\"\000\000\000@\000\b\000`\000\000\000\000\000\000\000\000\016\000\000\000 \000\004\0000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\000\024\000\000\000\000\000\000\000\000\004\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\001\000\000\000\000\000\000\000\000\000 \000\001\018\000\b\000\000\000 \000\000\000\000\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\016\000@\001\"\004\000\000\000\000\000\000\000\000\001\000\000\016\000\000\018\002\020\004\000\000\000 \004\000\000\000\128\000\b\000\000\t\001\b\002\000\000\000\016\002\000\000\0000\000\003@@\000\225p\128\000@\000\000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\128\016\128 \000\000\001\000 \000\000\b\000\000\000\000\b\002\000\016\000\000\000\000\000\000\000\000\004\000\000\000\000\004\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\002\000\000 \000\000 \0048\b\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000@\002\000\000\000\000\000\000\000\000\000\128\000\000 \000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000@\000\004\000\000\004\000\134\001\000\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\128\002\000\t\016`\000\000\000\000\000\000\000\000\002\000\000@\001\000\004\136\016\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\b\000\000\000\000\000\000\000@\000@\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\016\000\000\000\b\000\001\000\004\000\018 @\000\000\000\000\000\000\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000 \000\000\000\000\002\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000*\128\004\b\130\144\224 \136\000;\000 @\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000@\000\000\000 \000\004\000\016\000H\129\000\000\000\000\000\000\000\000\000H\001T\000 D\020\135\001\004@\001\216\001\002\000@ \000\002\000\000\002\000C\128\128\000\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\b\000\028.0\000\b\000\000\000\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\128\000\b\000\000\b\001\014\006\000\000\000\016\002\000\000\000@\000\004\000\000\004\000\134\001\000\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000@\000\000@\b`\016\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\b\001\b\002\000\000\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \nC\128\002 \000\204\000\001\000 \018\000E\000\b\016\005!\000\001\016\000f\000\000\128\016\016\000\000\000\000\000\004\0000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\002\000\b\000$@\128\000\000\000\000\000\000\000\000$\000\138\000\016 \nC\128\002 \000\204\000\001\000 \018\000E\000\b\016\005!\000\001\016\000fb\003\000\0000\000\000\n\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001 \002\149\194\000\001\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000(\000\000\000\016\000\000\000\000\001\000\000\000\000\000\000@\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\012\000\000\208\018\000)\\ \000\016\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\001\128\000\026\002@\005+\132\000\002\000\000\000\000\000\000\001`\021P\000\129\128\130\028\000\017\000\007`\000\b\001\000\176\n\168\000@\192A\014\000\b\128\003\176\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\170\000\016 \000C\128\002\000\000\236\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\000\b`\000@\000\025\128\000 \004\002@\b\160\001\002\000\004 \000 \000\012\192\000\016\002\002\000\000\000\000\000\000\128\006\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000@\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\006\000\000h\t\000\020\174\016\000\b\000\000\000\000\000\000\004\128\017@\002\004\000\b`\000@\000\025\128\000 \004\002@\bb\020\b \000\000 \000\000\000\000\000\001\000  \000\004\n\004\000\000\000\016\000\000\000\000\000B@\b\160\001\003\000\0048\000 \000\012\192\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128\001\b\000\b\000\0030\000\004\000\128 \000\001\018\000\b\160\001\000 \000\000\000\000\000\b\000\016\000\000\137\000\004P\000\000\016\000\000\000\000\000\004\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\t\000\"\128\004\b\002\144\192\000\136\000;\000 @\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\000\1640\000\"\000\012\192\b\016\002\001 \004P\000\129\000R\016\000\017\000\006`\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \000B\000\002\000\000\204\000\001\000 \b\000\000D\128\002(\000@\b\000\000\000\000\000\002\000\004\000\000\"@\001\020\000\000\004\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\196\000\r\129\000\003\133\194\128\001\000\bb\000\000\000\000\000\128\000\000\000\000\000\000\000\000\"\000\000\000@\000\b\000`\000\000\000\000\000\000\000\000\016\000\000\000\000\000\004\0000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000b\144\004\132\128\017@\145X\000\128\020\128\000\n\b\0001\012B\031\128X\233H\180\248\196\n\192\128\025,\176\b\000\001\000\004\000R @\000\000 \000\000\000\000\000\016\000\001\000\000\001 !@\192\000\000\002\000@\000\000\b\000\000\128\000\000\144\016\128`\000\000\001\000 \000\000\004\000\000@\000\000@\b@0\000\000\000\128\016\000\0001\184@\016\176H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\128\000\b\000\000\b\001\012\006\000\000\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001\000\004\000R \192\000\000 \000\000\000\004\000\004\000\000\128\002\000)\016`\000\000\016\000\000\000\000\000\002\000\000@\001\000\020\136\016\000\000\b\000\000\000\000\000\001\000\000 \000\128\nD\b\000\000\004\000\000\000\000\000\001\136A\016\025\000G\002M\160\002\000P\000\000\b /n\200\128\130\255\021\144\000L\028\007N8,\n\r\000b\016D\004\000\017\192\147h\000\128\020\000\000\002\b\0001\b\"\002\000\b\224H\180\000@\n\000\000\001\004\000\024\132\001\001\000\004p$Z\000 \005\000\000\000\130\000\000\000\000\000\000\000\000\000\128\000\128\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000 \000\000\000\016\000\002\000\b\000\164@\128\000\000@\000\000\000\000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\016\000\000\002\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\018\018\000E\002M`\002\000P\000\000\b \000\197 \t\t\000\"\129\"\176\001\000(\000\000\004\016\000b\144\004\132\128Q@\145X\000\128\020\000\000\002\b\000\016\000\002\000\b\000\164@\128\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000 \004\000\000\128\002\000)\016 \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\148\149e\006\020KL\254\240D\000\185\148\016x\212\003\202J\178\131\n%\166\127x\"\000\\\202\b<j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002\168\000@\136)\014\006\b\128\0030\002\012\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000U\000\b\017\005!\192\193\016\000f\000A\128P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\n\160\001\002 \1648\024\"\000\012\192\b0\n\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000 \000\000\000\016\000\002\000\b\000\164@\128\000\000@\000\000\000\000\000$\000\170\000\016\"\nC\129\130 \000\204\000\131\000\160\012B\b\128\128\0028\018-\000\016\002\128\000\000A\000\006!\000@@\001\028\t\022\128\b\001@\000\000 \128\000\000\000\000\000\000\000\000 \000 \000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\004\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\003@H\000\165p\128\000@\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\128\016\224`\000\000\001\000 \000 \000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\016\000\000\016\002\024\012\000\000\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\002\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\001\000\000\001\000!\128\192\000\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \000\000 \004 \024\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128)\014\000\b\128\0030\000\004\000\1280\000\003@H\000\165p\128\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\004\000\000\128\002\000)\016 \000\000\016\000\000\000\000\000\t\000\"\128\004\b\002\144\224\000\136\0003\000\000@\b\003\020\128$$\000\138\004\138\192\004\000\164\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000R\024\000\017\000\006`\000\b\001\000\144\002(\000@\128)\b\000\b\128\0030\000\004\000\128\128\000\000\000\000\000 \001\128\000\000\000\000\000\000\000\000@\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\003\020\128$$\000\138\004\138\192\004\000\164\000\000P@\002@\b\160\001\002\000\1640\000\"\000\012\192\000\016\002\001 \004P\000\129\000R\016\000\017\000\006`\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\000\001\000\000f\000\000\128\000\006!\004@`\001\028\t6\128\b\001@\000\000 \128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \nB\000\002 \000\204\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\"\128\004\b\002\144\128\000\136\0003\000\000@\b\004\128\017@\002\004\001H`\000D\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192@\b\004\000\002\001\004\000\000\004\000\000\000\000\000\000` \004\000\000\001\000\130\000\000\002\000\000\000\000\000\0000\016\002\000\000\000\128@\000\000\001\000\000\000\000\000\000$\000\138\000\016 JC\128\002 \000\204\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\"\128\004\b\002\144\128\000\136\0003\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\001\020\000 @\020\134\000\004\000\001\152\000\002\000\000$\000\138\000\016 \nB\000\002\000\000\204\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\000\164 \0002\000\012\192\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128)\b\000\012\128\0030\000\004\000\128\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\002R\028\000\017\000\006`\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\016\002\000\000\000\128A\000\000\001\000\000\000\000\000\000\024\b\001\000\000\000@ \000\000\000\128\000\000\000\000\000\018\000E\000\b\016%!\192\001\016\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\001H`\000@\000\025\128\000 \000\002@\b\160\001\002\000\164 \000 \000\012\192\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016\000\002\000\000\b\000\b\000\000\000 \000\000\001\000\000\136\000\000\000\000\004\000\004\000\000\000\016\000\000\000\128\001 \004P\000\129\000\002\024\000\016\000\006`\000\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\004\128\017@\130\004\000\b`\000@\000\029\128\017 \004\001\136\000\027\002\000\007\011\133\000\002\000\016\001\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128\001\012\000\b\000\0030\002\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\b\000\000 \000 \000\000\000\128\000\000\004\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\002\000\004\128\017@\002\004\000\b`\000@\000\025\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\192\001\016\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000` \004\002\000\001\000\130\000\000\002\000\000\000\000\000\0000\016\002\000\000\000\128A\000\000\001\000\000\000\000\000\000\024\b\001\000\000\000@ \000\000\000\128\000\000\000\000\000\000\000\016\000\000\000 \000@\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000  \000\004\n\004\000\000\000\016\000\000\000\000\000@\000\002\000\000\001\000\000\b}\003\224\1728\031\242\224\174\240[\243\135\165\"\151p>\129\240V\028\015\249pWx-\249\195\192b\016\004\004\000\017@\145h\000\128\021\000\000\002(\tH\165\220\015\160|\021\135\003\254\\\021\222\011~p\243\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000 \128\004\b\000\016\128\000\128\0002\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\000\000\001@\001\000\000\000\004\000\000\000\000\000\000\004@\031\128\024\t\000\000\248\132\000@\128\024(\176\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\b\000?\0000\018\000\001\241\b\000\129\0000Q`bz\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\004\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\207\225 \194\197+\127\153\158\128\168\031r(\000q\192\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\002\200H \001\002\005\164  \"\000\028\128\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000 \128\004\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\254\018\012,R\183\249\153\232\n\129\247\"\128\007\028\006\127\t\006\022)[\252\204\244\005@\251\145@\003\142\000$\000\130\000\016 \nB\000\002 \000\200\000\001\000\000\018\000A\000\b\016\005!\000\001\016\000d\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b \001\002\000\1640\000\"\000\012\128\000\016\000\001 \004\016\000\129\000R\016\000\017\000\006@\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000A\000\b\016\005!\128\001\016\000d\000\000\128\000\t\000 \128\004\b\002\144\128\000\136\0002\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    13
  
  and action =
    ((16, "N\128YbS\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024`S\142\000\000\000\000\023\\S\142N\128Yb\023\\\000\003\000\000\000\000Yb\023\\\000\003Yb\023\\\000\003\000\000\000\000\000\000\019\030\024\198\005\024\000:\000\000\000B\000n\000\000\000\000\000\000\000\000\000\000\023\\\000\000Ld\000\000\000\000\140\130\000\000S\142N\128\0036\000Q\000\222{\250\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\246\002\174\000\174\000\000\002\006\0068\000\000\0014\003\030\bX\000\000\003*\003\186\b\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004~\000\000\004`n \000\000\000\000\003\158\000\000\000\000\000\000\006\030\005\188\000\000\000\000n W\180\023\\U\172s\174\023\\V\236Yn\023\\n\216\000\000\000\022\000\000N\016\000D\000\000\026l\000\000\026|\000\000\000\000\005\190\000\000\003\158\000\000\000\000\000\000\004\202\000\000\026l\000\000\006n\148~\149$|\166\151,\156\002k\138\000\000`\130\027P\157l\003\158\141\b^nk\138k\138T2\000\000n ~\244\000\000n y,\004N\005\146\004N\007\148\000\000\006\206\000\000\000\000\006\206\000\000\000\000\000\000n \003\158\000\000\000\000d\022\159\172k\138d\232\159\208k\138e\186cDk\138\000\000\000\000`p\004N\000\000\000\000abk\138bTf\140\000\000l\\k\138\0070\1602k\138g^h0\000\000\0076\160Vk\138i\002i\212\000\000j\166\000\000\000\000\000\000\000\000\000\006\000\000n \000\000\000$p\182\000\000n \006fn \000\000\028\024\007\162\003\158\000\000\000\000\0314\000\000\000`\000\000p\132\002D\000\000\007Ln \003\018\000\000\004t\000\000\001D\000\000\000\003\004\182\000\000\000\000\000\000\b4\160\184k\138kxlJ\000\000\b\200\160\220k\138m\028m\238\000\000\004,\003\158\000\000n \025\026\001>\000.\023\030at\000\000\000\000\028`bf\000\000\027\018\000\000\b\130\000\000\tP\t\242\000\000\007\192\004N\004N\000\000\000\000n \001\234\002L\000\000n \003\186\156\002\000\000\003\142\000\000\000\000\000\000\t\200\tx\157l\001\154\003V\023$\000\000\n\140\000\000\023\220\000\000\000\000\000\000\000\000\128x\000\000\n\024\n\212\133\228k\138\003\142\011\020\000\000\011\158k\138t8\000\000}$k\138\011fk\138\128\248t\198\023\\\000\000\000\000\146\186\024\242\000\000\000\000\000\000\146\248\000\000\133\228\023\\\000\000\003\142\011\186\000\000\000\000\000\000\1430\027\020\026\004\003\142\011\250\000\000\000\000\000\000\003\142\012\012\000\000\000\000\000\000\000\000\149$\000\000qLS\142N\128Yn\023\\r\186N\016\006\246\143n\000\000\149Xn \b0n }\178\134b\000\000\000\000\012\"\028$\000\000!t\024\242\141\"-$\011(\012@\000\000\002\"\004\232\011\160\012\138\000\000\023\\\000\000\000\000\134b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\174-$\023\\\000\000\000\000\007\174\143n\000\000\149X\000\000\012\130\028$!t\134b\000\000N\128\000\000\000\000\000\000R\188Q\186\023\\\027\134\000\000\023\\N\128YB\023\\Q\002n\240\000\000\000\160\000\000\000\000\003V\000\000\000\000T\128\000\160\003$\000,\003X\000\000\000\000\001\232\000\000U\172\012\210\012\166\023\\\027\134\028\242\023\\\000\003\000\000\000\000Yb\023\\\000\003Yb\023\\\000\003\000\003\001\014\000\003Yb\023\\\147x\000\000o\160\000\222\129x\003,\004\n\004\n\001\144n \006H\012\226\000\000\012\228\000\000\000\000\007>\007\186\004\n\007p\000\003n\240\147\218\138\152\000:\000\000\012\224\000\000\028\"n \025\012\027\006n\240Yb\023\\n\240\000\000\004N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000_p \012\000\000\000\000\000\000\002\028\031\198\138\152\000\000Yn\023\\n\240\000\000\000\000c\180n\240eXn\240f\252\000\000n\240\000\000\000\000o\160\000\000\000\000O4\000\000n\240h\160n\240jD\000\222\000\000\147\218\000\000\012\244\000\000S0\143\252\000\000\000\000\000\000O4\t\138\001\186\t\182\000\000\000\000\000\000\000\000\012.\000\000q\228\005\154\000\000n\240n\240P2n \007X\007p\r\018\000\000\007p\r:\000\000\000\000\000\000T\128\003h\003h\000\000\r@\130\016\153\160X\144\003Vn\240R6\000\000PL\000\000n \005\218\000\000\000\000\000\003YbY\152Q\186\023\\\027\134\000Q\006\174\003X\000\000\012\128U\172U\172\000Q\006\174\006\174\000\000\r\024U\172\000\000\130\178\t\130N\016\000:\000\197\157\022\000\000n ~@n uT~\202\000\003\000\174\004Nv\006\000n\004Nv\144\000\000\130\240\t\130\000\000U\172\131~\000\000\007\014\b\238w\026\000\000\000\000\000\000\000\000\000\000\026j\000\000\029\154\000\000\r\026\027\134\000\000s U0\000\000\004(\000\000U\172\030\"\000\000\000\000\000\000r\146\000\000\007\238\000\003N\128P\136\007\020\018\200\000\003\025fN\244\019\030\000\003Yb\023\\\019\030Yb\023\\O\132Yb\023\\\000\003Yn\023\\\138\152n\240\024\178\000\003\135\006\023\\\144\148U\132\003h\rN\135h\000\003Yn\023\\n\240\028\242\000\003Yn\023\\n\240\"B\000\003\019\030\000\000\000\000\000\000\000\000\002\030\029\166Mr\000\000Z>[\026Q\186\023\\\027\134\003\202U\172\030$\000\000[\246\\\210\143\252\030\002n \nD\000\003Yb\023\\\019\030\025f\019\030\003.\021&\000\003\000\003\019\030\bf\r\014\003\160n \028\128n \024~n \029\144\r`\000\000\000\000\r.\000\000\019\030\004>\r4\000\000\016\230\000\003\r|\000\000\029\166\000\003\020.\026v\000\000\000\000\000\000\000\000\000\208\000\003\000\000\000\000\004V\000\003\000\000\030\182\000\003\031\198\000\003 \214\000\000\021>\027\134\000\003\000\000\000\003S\142\000\003\000\000\000\000\000\003!\230\000\003\"\246\000\003$\006\000\003%\022\000\003&&\000\003'6\000\003(F\000\003)V\000\003*f\000\003+v\000\003,\134\000\003-\150\000\003.\166\000\003/\182\000\0030\198\000\0031\214\000\0032\230\000\0033\246\000\0035\006\000\0036\022\023\\o\160qL\157l\003h\012\230n \nP\000\003\000\000\bln \011\028\000\003\000\000\r\006\000\003\000\000\000\000\000\000\130\016\r\b\000\003\000\000\000\000\000\000\031\018n \011T\000\003\000\000#R\000\003\000\000n\240$bn\240%rn\240&\130\000\222\000\000\000\000\000\000'\146n\240(\162\134b\000\000\000\000\000\0007&\000\003\r\168\000\000\000\003\131\246\000\000\005\234\0226\000\003\r\182\000\000w\172O\132\000\000\000\003\r\190\000\000\000\003\r\194\000\000\000\000\019\030\005N\023\190\000\003\r\208\006^\000\00386\000\003\r\214\007n\000\0039F\000\003\r\218\b~\000\003:V\020\022\000\003\r\242\t\142\000\003;f\000\003\r\240\n\158\000\003<v\000\003\135\220\011\174\000\003=\134\006h\024\020\000\003\r\246\012\190\000\003>\150\000\003\r\244\r\206\000\003?\166\000\003\014\002\014\222\000\003@\182\015\238\000\003A\198\016\254\022N\000\000\000\000\000\000\014\n\000\000\000\003\014\n\000\000\000\003\014\014\000\000\000\000)\178\000\003\000\000\005(\000\003\000\000o\160\000\000\000\000\142*\014 \000\000P\136\000\000\rR\000\000w\172Yn\028\132\000\003\135\220\000\000\000\000\000\000Yn\023\\n\240 \"\000\003x\018\000\003x\018\000\000\000\000\000\003x\208\000\000\000\000\000\000\000\000]\172\000\000\014.\000\000\131\246Yn\005\\\000\003\136B\000\000\000\000\000\000\000\000\000\000\007\020\r\198\000\000\025fK\164\000:\000\000\030\160\000\000\028V\n\198\002^\000\000\000\000\014J\000\000\001\180\030\182O\248\000\000\003\194\000\003\r\158\000\003\r\164\000\000\r\162\000\003\r\168\000\000\000\003\003\194\000\003\r\166\000\003\r\186\000\000\000\000V\136\003h\014\128\135hk\138\024,\000\003\000\000\135h\000\000\000\000n\240\014\134\000\000\000\000\135h\000\000\014Z\000\003\000\000\000\003\000\000\000\000\000\000B\214n\240\000\000\000\000\014\182\000\003C\230\000\003D\246\000\000\014\004\000\000\028\150w\172\000\000\018\014\014\176\000\000x\018\n\172\007f\000\000\000\000\0144\000\000\014\184\000\000\131\246\000\000\000\000\r\246\000\000w\172\000\000\000\000\023\\\027\134\bh\000\003\000\000\003$\000,\003X\007^\027\134\144\222U\172\000\180\027\134\145^\014N\000\003\000\000\007^\000\000\024\198\023\\\024\242\0058\b\022\014X\000\003\000\000\023\\\147xo\160\134b\000\000\000\000\000\000\000\000\000\000\014\216\000\000\007p\014\224\000\000\000\000W\140\003h\014\234\132\144\000\003\000\000\014L\000\003\000\000\000\000\000\000\132\144\000\000\157l\t\004n \012,\000\003\000\000\014P\000\003\000\000\000\000\134b\000\000F\006\000\000\015,\138\152G\022\015.\138\152H&x\208\000\000U\172\0312\000\000U\172\024X\000\000U\172 D\000\000\127X!R\000\000Q\184\000\000n \b\000\000\000`2!\154\006*\t\160\000\000\014\196\003\160\000\003\000\000\014h\000\003\000\000^\236\000\000\007h\t\238\000\000\t^\000\000\014\202\014Pn Mr\014\216\004\176\000\003\000\000\014~\000\003\000\000!\196\tZ\t\206\014\226\137\002\157\184\003h\014|n \012L\000\003\000\000\n\014n [\026\014\146\000\003\000\000c\002\000\000^\236\000\000\bx\n\134\000\000\nn\000\000\015\000\014\146\157l\000\000\015\030\137\154\157\208\003h\014\180n \012d\000\003\000\000\014\202\000\003\000\000\000\000S\142N\128n\240P2\000\003\000\000\"\220\024\198\005\024\003\158\151\148U\172\148$\134b\000\000\023\\\tv\003X\007^\134b\154\018\000,\003X\007^\134b\154\018\000\000\000\000\007^\134b\000\000S\142N\128n\134\000\000\0036\000Q\000\222\014\164n \r<\015x\151\210\000\000\134b\000\000\024\198\023\\\024\242\145\196-$\023\\\134b\000\000\023\\\134b\000\000y,\161.\004l\003$\000,\004N\156f\000\000\000,\004N\156f\000\000\"\220\023\\\n\134\027\"\004N\156f\000\000\003X\014\168U\172\134b\1588\000,\003X\014\184U\172\134b\1588\000\000\000\000\bn\000\003qL\000\000U\172\154BqL\000\000\bn\000\000\024\198\023\\\024\242}4+z+z\005\024\006.\000\000\n\254\026l\t\b\000\000\015N\014\246Q\234\023\\dTn \011*\000\000a\194\023\030\n\152\011\252\000\000\011\020\000\000\015Z\014\240n ^\236\000\000\023$\t\136\011\144\000\000\011\248\000\000\015x\014\254\157l^\236\000\000\023\030Q\234\015\166\000,\000,\000\003\011\136Q\234n \nB\004N\000\000n \005\218\011\028\000\000\000\000\133\028\000\000\000\003\011\242Q\234\133Z^\236\000\000\023\\n \r\\n T\128^\236\000\000\015&\000\000^\236\000\000\000\000a\194\000\000\134b\154\192\005\024\006.\n\254\015\148\0158Q\234\134b\154\192\000\000\000\000\005\024\006.\n\254\015\160\015 _\170^jk\138\015\190_\170y,\025\244\015\200_\170k\138\015\202_\170\138&\138\176\000\000\152\\\000\000\000\000qL\158J\005\024\006.\n\254\015\190\015J_\170qL\158J\000\000\000\000\000\000\161.\000\000\000\000\000\000\000\000\000\000\000\000qL\000\000W\180\023\\U\172\134b\000\000\155*\023\\N\016\015\210\143n\000\000\149X\155*\000\000\000\000\158\200\023\\N\016\015\212\015T\149$\000\000qL\158\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011L+z\005\024\006.\n\254\015\218\139HT\128N\174\023\\Q\002`2\023\\\000\003^\236\000\000\023\030\023\030N\174N\174\139\240S\142\023\\\147xo\160\026\168\000\000\006\164\000,\000\003\012\028N\174n \011(\000:\000\000\023\\\139H\142\200N\174\t\166N\174\000\000Q\132R\134\000\000y\214\000\000\000\000zT\000\000\000\000{\002\000\003\012nN\174{\128\147xo\160\026\168\000\000\005\024\000\000_\170\016(\000\000Ld\015\232\000\000^\236\000\000N\174Ld^\236\000\000\023\\n ^\236\000\000\015\136\000\000^\236\000\000\000\000`2\000\000\149\226_\170\015\148N\174\150 \139H\000\000\134b\155\144\005\024\006.\n\254\015\254\139H\134b\155\144\000\000\000\000\000\000\156\164Yb\000\000\000\000\000\000\000\000\000\000\152\154\000\000\153$\134b\000\000Q\186\023\\\027\134\149X\000\000\155*\000\000\000\000\000\000\000\000qL\156\164\000\000\016>\000\000\152\154\000\000\153$\016N\000\000\015\196\000\000\015\202\000\000\149X\000\000\023\\\027\134\149X\000\000qL\156\164\000\000\000\000\016t\000\000\000\000\016d\028$,\020\149X\000\000\000\000\000\000\000\000\t\146\150\134\149$\000\000qL\000\000\016f\028$,\020\149X\000\000\015\216\000\000!T\000\000\134b\000\000\016|\000\000\000\000Q\186\023\\\027\134\004d\000\000U\172!b\000\000\006(\000\000\016\144\000\000\016\202\138\152I6JF\138\152KV\000\003\000\000\000\003\000\000\015\236\000\003\015\246\000\000\016\196\000\000\000\003\016\028\000\003\016\"\000\000\0168\000\000\000\000V\236\016B\000\000\000\000+v{\250\016\232\000\000\000\000\000\000\011|\n:\127\204\016\242\000\000\000\000\000\000\000\000\000\000\000\000\016T\000\000-$\000\000\016\\\000\000n \000\000\b\\\000\000\000\003\016f\000\000\000\000\004N\000\000\011\172\000\000\000\003\000\000\004\228\000\000\012\184\000\000\016h\000\000n\240\024\178\000\000\000\000\011J\016l\000\000\000\000\016n\011\150O\132\003\158\146T\000\000\000\000\000\000\000\000\000\000\156j\000\000\000\000\017*\000\000U\232\000\000\012\182\0170\000\000\017<\000\000P\136P\136\159,\159,\000\000\000\000\134b\159,\000\000\000\000\000\000\134b\159,\016\150\000\000\016\154\000\000"), (16, "\ty\000\006\000\254\ty\n\186\ty\001\n\001\014\ty\001\018\001\030\001*\ty\004\157\ty\004\157\001.\ty\012\245\ty\ty\ty\n\194\ty\ty\ty\0012\004&\000\246\004\157\004\157\0016\ty\007z\007~\rv\ty\001\014\ty\012\245\007\158\012\249\004\157\001:\004\254\ty\ty\b\014\b\018\ty\b\022\b\"\001n\b.\b2\b:\b\150\nZ\0046\ty\ty\001\130\012\249\001R\011\130\ty\ty\ty\011\134\011\138\011\150\011\166\tA\b\210\ty\ty\ty\ty\ty\ty\ty\ty\ty\011\190\001F\ty\000\246\ty\ty\ty\000\246\n\170\011\202\011\226\012\002\012\022\b\222\ty\005\170\ty\ty\ty\007\005\ty\ty\ty\ty\011\158\004\157\011\162\001V\018\030\ty\005Q\ty\ty\000\246\ty\ty\ty\ty\ty\ty\b\226\011\178\ty\ty\ty\012*\003z\012\142\004*\ty\ty\ty\ty\r%\011\002\tA\r%\002\158\r%\r%\r%\r%\001N\004\157\r%\r%\r%\r%\023\166\r%\r%\007\182\r%\r%\r%\000\246\r%\r%\r%\r%\002\170\001\150\r%\001~\r%\r%\r%\r%\r%\r%\r%\r%\001\234\tA\007\186\003\161\r%\004\157\r%\r%\r%\r%\r%\004\154\r2\r%\n\222\r%\r%\018\234\r%\b6\r%\r%\r%\001\238\n\230\r%\r%\r%\r%\r%\r%\r%\n\234\r%\r%\r%\r%\r%\r%\r%\r%\r%\r%\r%\001\205\r%\r%\003\201\r%\r%\r%\004\157\000\246\t\178\001\014\004\157\r%\r%\r%\r%\r%\r%\r%\014&\r%\r%\r%\r%\r%\r%\r%\005\t\r%\r%\004\157\r%\r%\004\158\r%\r%\r%\r%\r%\r%\r%\r%\r%\r%\r%\r%\r%\007\234\t%\r%\r%\r%\r%\001\205\000\246\001\205\001\205\001F\001\205\001\205\001\205\001\205\001\246\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\004*\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\003\201\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\014\001\205\000\246\004z\001\205\005V\001\205\001\205\001\205\001\205\001\205\bf\001\205\001\205\001\205\001\205\001\205\tm\001\205\017v\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001F\001\205\001\205\001\205\000\246\t%\001\234\003\161\007\238\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\t\018\012B\001\205\006\250\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\nq\003\021\003\021\nq\005Z\nq\nq\nq\nq\004\138\t=\nq\nq\nq\nq\002\006\nq\nq\001\234\nq\nq\nq\003\161\nq\nq\nq\nq\007\222\007\226\nq\000\n\nq\nq\nq\nq\nq\nq\nq\nq\000\n\005\142\007\017\nz\nq\003\181\nq\nq\nq\nq\nq\006m\bZ\nq\b~\nq\nq\003\021\nq\003\021\nq\nq\nq\003\021\002R\nq\nq\nq\nq\nq\nq\nq\003\021\nq\nq\nq\nq\nq\nq\nq\nq\nq\nq\nq\n\022\nq\nq\016\218\nq\nq\nq\005n\t)\005r\007\194\002\022\nq\nq\nq\nq\nq\nq\nq\006E\nq\nq\nq\nq\nq\012\166\nq\002V\012\254\nq\004*\nq\nq\007\198\nq\nq\nq\nq\nq\nq\nq\nq\nq\nq\nq\nq\nq\011N\nq\nq\nq\nq\nq\003\233\000\246\005v\003\233\006m\003\233\003\233\003\233\003\233\000\246\011Z\003\233\003\233\003\233\003\233\002J\003\233\003\233\004\230\003\233\003\233\003\233\020N\003\233\003\233\003\233\003\233\b^\bb\003\233\003\021\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\012\194\028z\011N\012\202\003\233\016\222\003\233\003\233\003\233\003\233\003\233\004\146\t)\003\233\002:\003\233\003\233\000\246\003\233\000\n\003\233\003\233\003\233\003\006\012f\003\233\003\233\003\233\003\233\003\233\003\233\003\233\011N\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\004\166\012\158\012\246\000\246\003\233\003\233\003\233\003\021\002\222\001R\005>\rB\003\233\003\233\003\233\003\233\003\233\003\233\003\233\004\238\003\233\003\233\003\233\003\233\003\233\012\166\003\233\011^\012\254\003\233\004\157\003\233\003\233\004\157\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\026\138\003\233\003\233\003\233\003\233\003\233\003\217\006\254\002B\003\217\028~\003\217\003\217\003\217\003\217\014&\017\022\003\217\003\217\003\217\003\217\022J\003\217\003\217\004*\003\217\003\217\003\217\020\150\003\217\003\217\003\217\003\217\004\157\005\198\003\217\017&\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\012\194\000\246\004\157\012\202\003\217\t\214\003\217\003\217\003\217\003\217\003\217\029\159\002\226\003\217\003z\003\217\003\217\003e\003\217\n\230\003\217\003\217\003\217\002\198\016j\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003e\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\002\202\012\158\012\246\003N\003\217\003\217\003\217\t\218\nN\n\006\t\017\026\142\003\217\003\217\003\217\003\217\003\217\003\217\003\217\017\014\003\217\003\217\003\217\003\217\003\217\012\166\003\217\005\234\012\254\003\217\016r\003\217\003\217\023\006\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\003\217\028\142\003\217\003\217\003\217\003\217\003\217\n\021\000\246\006\209\n\021\016\186\n\021\n\021\n\021\n\021\003f\003\205\n\021\n\021\n\021\n\021\002J\n\021\n\021\004\157\n\021\n\021\n\021\002b\n\021\n\021\n\021\n\021\004\157\004\157\n\021\rI\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\001\250\002f\000\246\004\157\n\021\rI\n\021\n\021\n\021\n\021\n\021\015\018\t\017\n\021\001N\n\021\n\021\000\246\n\021\015b\n\021\n\021\n\021\002\238\003^\n\021\n\021\n\021\n\021\n\021\n\021\n\021\000\246\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\002J\n\021\n\021\003a\n\021\n\021\n\021\003\205\012\194\nv\004\157\012\202\n\021\n\021\n\021\n\021\n\021\n\021\n\021\000\246\n\021\n\021\n\021\n\021\n\021\n\021\n\021\003j\n\021\n\021\015\214\n\021\n\021\001N\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\006\166\004\157\n\021\n\021\n\021\n\021\n\017\020n\004F\n\017\003N\n\017\n\017\n\017\n\017\011\142\004]\n\017\n\017\n\017\n\017\003\226\n\017\n\017\003\250\n\017\n\017\n\017\007\129\n\017\n\017\n\017\n\017\026\002\b\134\n\017\019^\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\002J\003V\020v\018\130\n\017\nv\n\017\n\017\n\017\n\017\n\017\011\142\006=\n\017\004V\n\017\n\017\000\246\n\017\015v\n\017\n\017\n\017\005:\011\018\n\017\n\017\n\017\n\017\n\017\n\017\n\017\003N\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\tU\n\017\n\017\007N\n\017\n\017\n\017\004]\b\138\bb\018\218\020.\n\017\n\017\n\017\n\017\n\017\n\017\n\017\b\146\n\017\n\017\n\017\n\017\n\017\n\017\n\017\004\130\n\017\n\017\018\226\n\017\n\017\011N\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\003Z\000\246\n\017\n\017\n\017\n\017\n\025\021\006\006\217\n\025\000\246\n\025\n\025\n\025\n\025\004\182\011~\n\025\n\025\n\025\n\025\000\246\n\025\n\025\004\230\n\025\n\025\n\025\005J\n\025\n\025\n\025\n\025\021\014\000\246\n\025\004\157\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\002\n\012\186\011N\012\226\n\025\nv\n\025\n\025\n\025\n\025\n\025\000\246\b]\n\025\006\225\n\025\n\025\000\246\n\025\015\138\n\025\n\025\n\025\006\186\011\022\n\025\n\025\n\025\n\025\n\025\n\025\n\025\018\194\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\004\206\n\025\n\025\029o\n\025\n\025\n\025\002\026\005&\023\022\022\194\004\230\n\025\n\025\n\025\n\025\n\025\n\025\n\025\014R\n\025\n\025\n\025\n\025\n\025\n\025\n\025\002V\n\025\n\025\022\206\n\025\n\025\020z\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\007\222\007\226\n\025\n\025\n\025\n\025\n\t\023r\n\174\n\t\004\157\n\t\n\t\n\t\n\t\002J\021\158\n\t\n\t\n\t\n\t\003\150\n\t\n\t\t\174\n\t\n\t\n\t\005\005\n\t\n\t\n\t\n\t\023z\004\157\n\t\006A\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\214\t\182\000\246\019\158\n\t\007Q\n\t\n\t\n\t\n\t\n\t\002\226\be\n\t\020B\n\t\n\t\028\030\n\t\015\162\n\t\n\t\n\t\006\214\006=\n\t\n\t\n\t\n\t\n\t\n\t\n\t\0052\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\005~\n\t\n\t\b]\n\t\n\t\n\t\001v\004\230\020r\011\022\0266\n\t\n\t\n\t\n\t\n\t\n\t\n\t\rQ\n\t\n\t\n\t\n\t\n\t\n\t\n\t\005\130\n\t\n\t\023\190\n\t\n\t\021\018\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\007\222\022z\n\t\n\t\n\t\n\t\n\r\023F\029*\n\r\002V\n\r\n\r\n\r\n\r\014&\022\138\n\r\n\r\n\r\n\r\005\154\n\r\n\r\021\n\n\r\n\r\n\r\000\246\n\r\n\r\n\r\n\r\018z\000\246\n\r\ba\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\020\222\017^\023N\r]\n\r\ti\n\r\n\r\n\r\n\r\n\r\005f\006U\n\r\005.\n\r\n\r\012\138\n\r\015\182\n\r\n\r\n\r\014F\023R\n\r\n\r\n\r\n\r\n\r\n\r\n\r\023\198\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\005\210\n\r\n\r\t\r\n\r\n\r\n\r\001v\0236\026\026\001\014\tQ\n\r\n\r\n\r\n\r\n\r\n\r\n\r\0031\n\r\n\r\n\r\n\r\n\r\n\r\n\r\b9\n\r\n\r\006Y\n\r\n\r\023\014\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\000\246\001R\n\r\n\r\n\r\n\r\n)\000\246\001\150\n)\001~\n)\n)\n)\n)\005\218\005\242\n)\n)\n)\n)\023v\n)\n)\000\246\n)\n)\n)\000\246\n)\n)\n)\n)\003N\014Z\n)\006:\n)\n)\n)\n)\n)\n)\n)\n)\bm\001\150\023~\001~\n)\t\r\n)\n)\n)\n)\n)\023\198\003N\n)\006\238\n)\n)\014\154\n)\015\202\n)\n)\n)\006Z\023\178\n)\n)\n)\n)\n)\n)\n)\006n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\023J\n)\n)\029&\n)\n)\n)\006\210\bi\n\230\006]\006\242\n)\n)\n)\n)\n)\n)\n)\029\143\n)\n)\n)\n)\n)\n)\n)\003Z\n)\n)\007\002\n)\n)\023\234\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\000\246\007\006\n)\n)\n)\n)\n!\026\014\007b\n!\002~\n!\n!\n!\n!\n\230\000\246\n!\n!\n!\n!\004\181\n!\n!\007\246\n!\n!\n!\000\246\n!\n!\n!\n!\007\250\019\166\n!\n\230\n!\n!\n!\n!\n!\n!\n!\n!\br\bz\b\174\026n\n!\020\210\n!\n!\n!\n!\n!\t\142\002V\n!\t\202\n!\n!\021B\n!\015\230\n!\n!\n!\006\138\t\246\n!\n!\n!\n!\n!\n!\n!\n\230\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n\002\n!\n!\n\"\n!\n!\n!\n\130\n\158\011B\011\250\012\190\n!\n!\n!\n!\n!\n!\n!\012\222\n!\n!\n!\n!\n!\n!\n!\012\234\n!\n!\012\250\n!\n!\r\n\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\000\246\014>\n!\n!\n!\n!\n\029\014f\014~\n\029\014\254\n\029\n\029\n\029\n\029\015\030\000\246\n\029\n\029\n\029\n\029\0156\n\029\n\029\015B\n\029\n\029\n\029\015^\n\029\n\029\n\029\n\029\015r\021\254\n\029\015\134\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\015\158\015\178\015\226\015\246\n\029\024\006\n\029\n\029\n\029\n\029\n\029\016\n\016:\n\029\016F\n\029\n\029\016R\n\029\015\250\n\029\n\029\n\029\016\134\016\150\n\029\n\029\n\029\n\029\n\029\n\029\n\029\017\006\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\017:\n\029\n\029\017n\n\029\n\029\n\029\017\142\017\150\017\158\017\166\017\186\n\029\n\029\n\029\n\029\n\029\n\029\n\029\017\194\n\029\n\029\n\029\n\029\n\029\n\029\n\029\017\214\n\029\n\029\017\254\n\029\n\029\018\018\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\018>\018V\n\029\n\029\n\029\n\029\n%\018n\018\138\n%\018\146\n%\n%\n%\n%\018\166\018\246\n%\n%\n%\n%\019\030\n%\n%\019N\n%\n%\n%\019Z\n%\n%\n%\n%\019n\019~\n%\019\178\n%\n%\n%\n%\n%\n%\n%\n%\019\210\019\222\020J\020Z\n%\020\130\n%\n%\n%\n%\n%\020\134\020\146\n%\020\162\n%\n%\020\186\n%\016\014\n%\n%\n%\020\202\020\234\n%\n%\n%\n%\n%\n%\n%\021\026\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\021\030\n%\n%\021*\n%\n%\n%\021:\021N\021\246\022\002\022\146\n%\n%\n%\n%\n%\n%\n%\022\170\n%\n%\n%\n%\n%\n%\n%\023\030\n%\n%\023\"\n%\n%\023Z\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\023^\023\134\n%\n%\n%\n%\na\023\138\023\162\na\024\026\na\na\na\na\024J\024N\na\na\na\na\024r\na\na\024v\na\na\na\024\134\na\na\na\na\024\150\024\162\na\024\214\na\na\na\na\na\na\na\na\024\218\025:\025b\025f\na\025\170\na\na\na\na\na\026\150\026\162\na\026\210\na\na\026\246\na\016\026\na\na\na\027\030\027\158\na\na\na\na\na\na\na\027\178\na\na\na\na\na\na\na\na\na\na\na\027\186\na\na\027\194\na\na\na\027\242\027\254\0286\028J\028b\na\na\na\na\na\na\na\028\150\na\na\na\na\na\na\na\028\158\na\na\028\198\na\na\028\206\na\na\na\na\na\na\na\na\na\na\na\na\na\028\214\001\014\na\na\na\na\003\213\028\226\028\234\003\213\028\243\003\213\003\213\003\213\003\213\029\003\029\022\003\213\003\213\003\213\003\213\0292\003\213\003\213\029O\003\213\003\213\003\213\029_\003\213\003\213\003\213\003\213\029{\029\175\003\213\029\203\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\029\214\r\002\030\011\001F\003\213\030\031\003\213\003\213\003\213\003\213\003\213\030'\030c\003\213\030k\003\213\003\213\014\246\003\213\015\002\003\213\003\213\003\213\000\000\000\000\003\213\003\213\003\213\003\213\003\213\003\213\003\213\000\000\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\000\000\012\158\012\246\000\000\003\213\003\213\003\213\000\000\000\000\000\000\000\000\000\000\003\213\003\213\003\213\003\213\003\213\003\213\003\213\000\000\003\213\003\213\003\213\003\213\003\213\012\166\003\213\000\000\012\254\003\213\000\000\003\213\003\213\000\000\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\003\213\000\000\003\213\003\213\003\213\003\213\003\213\t\253\000\000\000\000\t\253\000\000\t\253\t\253\t\253\t\253\000\000\000\000\t\253\t\253\t\253\t\253\000\000\t\253\t\253\000\000\t\253\t\253\t\253\000\000\t\253\t\253\t\253\t\253\000\000\000\000\t\253\000\000\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\000\000\001\230\000\000\000\000\t\253\000\000\t\253\t\253\t\253\t\253\t\253\000\000\000\000\t\253\000\000\t\253\t\253\001\254\t\253\002\014\t\253\t\253\t\253\000\000\000\000\t\253\t\253\t\253\t\253\t\253\t\253\t\253\000\000\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\000\000\012\158\012\246\000\000\t\253\t\253\t\253\000\000\000\000\000\000\000\000\000\000\t\253\t\253\t\253\t\253\t\253\t\253\t\253\000\000\t\253\t\253\t\253\t\253\t\253\012\166\t\253\000\000\012\254\t\253\007i\t\253\t\253\000\000\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\000\000\t\253\t\253\t\253\t\253\t\253\002)\000\000\000\000\002)\000\000\002)\001\n\001\014\002)\000\000\000\000\001*\002)\012\182\002)\000\000\001.\002)\000\000\002)\002)\002)\000\000\002)\002)\002)\0012\000\000\000\000\012\230\000\000\0016\002)\002)\002)\002)\002)\012\238\002)\000\000\000\000\000\000\000\000\001:\007i\002)\002)\002)\002)\002)\000\000\000\000\001n\000\000\001~\002)\000\000\002)\011\146\002)\002)\001\130\000\000\000\000\011\130\002)\002)\002)\011\134\011\138\011\150\000\000\015J\b\210\002)\002)\002)\002)\002)\002)\002)\002)\002)\000\000\012\158\012\246\000\000\002)\002)\002)\000\000\000\000\000\000\000\000\000\000\002)\b\222\002)\005\170\002)\002)\002)\000\000\002)\002)\002)\002)\011\158\015R\011\162\000\000\015\146\002)\000\000\002)\002)\000\000\002)\002)\002)\002)\002)\002)\b\226\011\178\002)\002)\002)\012*\003z\000\000\001\014\002)\002)\002)\002)\nM\000\000\000\000\nM\000\000\nM\001\n\001\014\nM\000\000\000\000\001*\nM\nM\nM\000\000\001.\nM\000\000\nM\nM\nM\000\000\nM\nM\nM\0012\000\000\000\000\nM\000\000\0016\nM\nM\nM\nM\nM\nM\nM\000\000\015\150\000\000\001F\001:\000\000\nM\nM\nM\nM\nM\000\000\000\000\001n\000\000\001~\nM\015\170\nM\015\190\nM\nM\001\130\000\000\000\000\011\130\nM\nM\nM\011\134\011\138\011\150\000\000\nM\b\210\nM\nM\nM\nM\nM\nM\nM\nM\nM\000\000\nM\nM\000\000\nM\nM\nM\000\000\000\000\000\000\000\000\000\000\nM\b\222\nM\005\170\nM\nM\nM\000\000\nM\nM\nM\nM\011\158\nM\011\162\000\000\nM\nM\000\000\nM\nM\000\000\nM\nM\nM\nM\nM\nM\b\226\011\178\nM\nM\nM\012*\003z\000\000\000\000\nM\nM\nM\nM\nI\000\000\000\000\nI\000\000\nI\001\n\001\014\nI\000\000\000\000\001*\nI\nI\nI\000\000\001.\nI\000\000\nI\nI\nI\000\000\nI\nI\nI\0012\000\000\000\000\nI\000\000\0016\nI\nI\nI\nI\nI\nI\nI\000\000\012\170\000\000\000\000\001:\000\000\nI\nI\nI\nI\nI\000\000\000\000\001n\000\000\001~\nI\016>\nI\016J\nI\nI\001\130\000\000\000\000\011\130\nI\nI\nI\011\134\011\138\011\150\000\000\nI\b\210\nI\nI\nI\nI\nI\nI\nI\nI\nI\000\000\nI\nI\000\000\nI\nI\nI\000\000\000\000\000\000\000\000\000\000\nI\b\222\nI\005\170\nI\nI\nI\000\000\nI\nI\nI\nI\011\158\nI\011\162\000\000\nI\nI\000\000\nI\nI\000\000\nI\nI\nI\nI\nI\nI\b\226\011\178\nI\nI\nI\012*\003z\000\000\000\000\nI\nI\nI\nI\002m\000\000\000\000\002m\000\000\002m\001\n\001\014\002m\000\000\000\000\001*\002m\012\182\002m\000\000\001.\002m\000\000\002m\002m\002m\000\000\002m\002m\002m\0012\000\000\000\000\012\230\000\000\0016\002m\002m\002m\002m\002m\012\238\002m\000\000\015\022\000\000\000\000\001:\000\000\002m\002m\002m\002m\002m\000\000\000\000\001n\000\000\001~\002m\015.\002m\015:\002m\002m\001\130\000\000\000\000\011\130\002m\002m\002m\011\134\011\138\011\150\000\000\015J\b\210\002m\002m\002m\002m\002m\002m\002m\002m\002m\000\000\000\000\002m\000\000\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\002m\b\222\002m\005\170\002m\002m\002m\000\000\002m\002m\002m\002m\011\158\004\157\011\162\004\157\004\157\002m\000\000\002m\002m\000\000\002m\002m\002m\002m\002m\002m\b\226\011\178\002m\002m\002m\012*\003z\004\157\004\157\002m\002m\002m\002mn\004\157\005r\004\157\004\157\002J\000\000\000\000\000\000\004\157\000\000\015j\006E\015~\000\000\000\000\004\157\004\157\004\157\000\000\n\170\004\157\004\157\004\157\004\157\000\161\000\161\004\157\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\015\218\000\161\000\161\020\002\000\161\000\161\017\226\000\000\000\161\000\161\005v\000\161\000\161\000\161\003\006\000\161\015\238\000\161\016\002\000\161\000\161\012\193\012\193\000\161\000\161\012\193\000\161\000\161\011\002\000\161\011\222\000\161\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\003\021\003\182\000\161\000\161\003\021\000\246\000\161\000\161\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\000\000\161\000\000\005\182\000\161\000\246\000\161\001*\000\161\000\n\018\026\000\000\000\000\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\000\161\000\161\000\000\000\000\003\021\000\161\003\021\007e\000\161\000\246\000\161\007e\000\230\000\000\bQ\020\006\000\161\012\193\bQ\003\021\003\021\000\000\000\161\000\161\000\161\000\161\005\186\000\000\000\161\000\161\000\161\000\161\002a\000\000\012\210\002a\000\000\002a\001\n\001\014\002a\000\000\005\190\001*\002a\029\187\002a\000\000\001.\002a\003\021\002a\002a\002a\000\246\002a\002a\002a\0012\tj\000\000\bQ\t>\0016\002a\002a\002a\002a\002a\tr\002a\000\000\005\170\tz\000\000\001:\000\000\002a\002a\002a\002a\002a\000\000\bQ\001n\000\000\011\154\002a\007e\002a\000\000\002a\002a\001\130\000\000\000\000\011\130\002a\002a\002a\011\134\011\138\011\150\000\000\000\000\b\210\002a\002a\002a\002a\002a\002a\002a\002a\002a\000\000\012\158\012\246\005\182\002a\002a\002a\001*\000\000\000\000\004R\t\r\002a\b\222\002a\005\170\002a\002a\002a\000\000\002a\002a\002a\002a\011\158\012\166\011\162\000\000\012\254\002a\000\000\002a\002a\000\000\002a\002a\002a\002a\002a\002a\b\226\011\178\002a\002a\002a\012*\003z\n\170\005\186\002a\002a\002a\002a\002y\012\241\000\246\002y\000\000\002y\000\000\000\000\002y\012\253\000\000\005\190\002y\006R\002y\0112\000\000\002y\000\000\002y\002y\002y\012\241\002y\002y\002y\002\150\000\000\000\000\002\154\012\253\000\000\002y\002y\002y\002y\002y\002\186\002y\000\000\011\002\005\170\000\000\002\166\000\000\002y\002y\002y\002y\002y\000\000\002\190\t\r\006^\000\000\002y\000\000\002y\000\000\002y\002y\000\246\tA\000\000\000\000\002y\002y\002y\000\000\000\000\005\178\000\000\000\000\002\178\002y\002y\002y\002y\002y\002y\002y\002y\002y\000\000\012\158\012\246\005\182\002y\002y\002y\001*\006\138\007y\000\000\000\000\002y\007y\002y\bM\002y\002y\002y\bM\002y\002y\002y\002y\004\181\012\166\006N\000\000\012\254\002y\000\000\002y\002y\005y\002y\002y\002y\002y\002y\002y\002\182\000\000\002y\002y\002y\000\000\005y\000\000\005\186\002y\002y\002y\002y\002u\000\000\006\005\002u\000\000\002u\007\146\001\014\002u\bM\000\000\005\190\002u\006f\002u\007\150\000\000\002u\000\000\002u\002u\002u\004\181\002u\002u\002u\0012\005y\000\000\000\000\000\000\bM\002u\002u\002u\002u\002u\b\194\002u\000\000\000\000\005\170\000\000\000\000\000\000\002u\002u\002u\002u\002u\000\000\006\005\b\002\006r\000\000\002u\000\000\002u\005y\002u\002u\001\130\005y\000\000\000\000\002u\002u\002u\000\000\022~\005\178\006\005\000\000\004R\002u\002u\002u\002u\002u\002u\002u\002u\002u\000\000\012\158\012\246\b]\002u\002u\002u\b]\nn\000\000\000\000\003\018\002u\b\241\002u\007a\002u\002u\002u\007a\002u\002u\002u\002u\000\000\012\166\006\214\000\000\012\254\002u\000\000\002u\002u\002J\002u\002u\002u\002u\002u\002u\000\000\007i\002u\002u\002u\007i\005\018\016\166\b]\002u\002u\002u\002u\002e\000\000\000\000\002e\b\241\002e\000\000\000\000\002e\012\201\012\201\b]\002e\012\201\002e\000\000\000\000\002e\000\000\002e\002e\002e\000\000\002e\002e\002e\b\241\003\006\000\000\000\000\000\000\000\000\002e\002e\002e\002e\002e\000\000\002e\000\000\000\000\b]\000\000\007a\000\000\002e\002e\002e\002e\002e\000\000\b\006\007\146\001\014\000\000\002e\000\246\002e\003\182\002e\002e\007\150\005U\b\182\b\241\002e\002e\002e\004R\011\146\b]\b\241\0012\000\000\002e\002e\002e\002e\002e\002e\002e\002e\002e\000\000\012\158\012\246\016\158\002e\002e\002e\012\201\000\000\000\000\000\000\000\000\002e\000\000\002e\b\002\002e\002e\002e\000\000\002e\002e\002e\002e\001\130\012\166\000\000\000\000\012\254\002e\000\246\002e\002e\016\182\002e\002e\002e\002e\002e\002e\000\000\016\186\002e\002e\002e\012\018\000\000\n\170\000\000\002e\002e\002e\002e\002q\nn\000\000\002q\000\000\002q\000\000\001R\002q\012\197\012\197\017\170\002q\012\197\002q\011:\000\000\002q\000\000\002q\002q\002q\000\000\002q\002q\002q\000\000\tj\000\000\000\000\t>\000\000\002q\002q\002q\002q\002q\tr\002q\000\000\011\002\tz\000\000\000\000\000\000\002q\002q\002q\002q\002q\000\000\000\000\012F\000\000\001~\002q\000\246\002q\000\000\002q\002q\000\246\n\170\n\170\016\138\002q\002q\002q\016\250\0172\017>\000\000\000\000\000\000\002q\002q\002q\002q\002q\002q\002q\002q\002q\011f\012n\002q\000\000\002q\002q\002q\012\197\000\000\000\000\000\000\000\000\002q\000\000\002q\000\000\002q\002q\002q\000\000\002q\002q\002q\002q\000\000\011\002\011\002\000\000\000\000\002q\b\001\002q\002q\000\000\r\018\002q\002q\002q\002q\002q\000\000\000\000\002q\002q\002q\000\000\000\246\000\246\000\000\002q\002q\002q\002q\tu\000\000\000\000\tu\000\000\tu\000\000\001R\tu\007\137\000\000\b\001\tu\007\137\tu\000\000\000\000\rN\000\000\tu\rr\tu\000\000\tu\tu\tu\000\000\b\001\000\000\000\000\b\001\012\130\r\134\r\158\r\166\r\142\r\174\b\001\tu\000\000\000\000\b\001\000\000\000\000\000\000\tu\tu\r\182\r\190\tu\000\000\000\000\012F\000\000\017z\tu\000\000\tu\000\000\r\198\tu\000\000\n\170\000\000\016\138\tu\tu\000\246\016\250\0172\017>\000\000\000\000\000\000\tu\tu\rV\r\150\r\206\r\214\r\230\tu\tu\019\246\000\000\tu\b\237\tu\tu\r\238\007\137\000\000\000\000\000\000\000\000\tu\000\000\tu\000\000\tu\tu\r\246\000\000\tu\tu\tu\tu\012\194\011\002\000\000\012\202\000\000\tu\n\189\tu\tu\000\000\014\022\tu\014\030\r\222\tu\tu\000\000\000\000\tu\r\254\tu\000\000\000\246\b\237\000\000\tu\tu\014\006\014\014\002\165\000\000\000\000\002\165\000\000\002\165\000\000\001R\002\165\000\000\000\000\n\189\002\165\000\000\002\165\000\000\b\237\002\165\000\000\002\165\002\165\002\165\000\000\002\165\002\165\002\165\000\000\n\189\000\000\000\000\n\189\014\146\002\165\002\165\002\165\002\165\002\165\n\189\002\165\000\000\000\000\n\189\000\000\000\000\000\000\002\165\002\165\002\165\002\165\002\165\000\000\001.\t\022\000\000\b\237\002\165\000\000\002\165\004R\002\165\002\165\b\237\000\000\n\170\b\154\002\165\002\165\002\165\t\130\007\178\b\162\000\000\000\000\000\000\002\165\002\165\rV\002\165\002\165\002\165\002\165\002\165\002\165\007\190\020\014\002\165\000\000\002\165\002\165\002\165\000\000\000\000\000\000\000\000\000\000\002\165\000\000\002\165\000\000\002\165\002\165\002\165\000\000\002\165\002\165\002\165\002\165\000\000\b\210\011\002\000\000\000\000\002\165\000\246\002\165\002\165\000\000\002\165\002\165\002\165\002\165\002\165\002\165\000\000\000\000\002\165\002\165\002\165\016\202\000\000\000\246\b\222\002\165\002\165\002\165\002\165\002\141\000\000\000\000\002\141\000\000\002\141\000\000\000\000\002\141\000\000\000\000\016\210\002\141\000\000\002\141\000\000\000\000\002\141\000\000\002\141\002\141\002\141\b\226\002\141\002\141\002\141\000\000\tj\000\000\000\000\t>\000\000\002\141\002\141\002\141\002\141\002\141\tr\002\141\000\000\000\000\tz\000\000\000\000\000\000\002\141\002\141\002\141\002\141\002\141\000\000\000\000\000\000\000\000\000\000\002\141\000\000\002\141\000\000\002\141\002\141\000\000\n\170\n\170\000\000\002\141\002\141\002\141\000\000\000\000\n\170\000\000\000\000\000\000\002\141\002\141\rrN\000\000\002\153\002\153\002\153\000\000\002\153\002\153\002\153\000\000\000\000\000\000\000\246\000\000\000\000\002\153\002\153\002\153\r\142\002\153\004\157\002\153\000\000\000\000\005\170\000\000\000\000\000\000\002\153\002\153\002\153\002\153\002\153\000\246\000\000\000\000\000\000\000\000\002\153\000\000\002\153\000\000\002\153\002\153\000\000\000\000\000\000\000\000\002\153\002\153\002\153\000\000\000\000\006\222\000\000\000\000\000\000\002\153\002\153\rV\r\150\002\153\002\153\002\153\002\153\002\153\000\000\000\000\002\153\000\000\002\153\002\153\002\153\020:\000\000\000\000\000\000\000\000\002\153\000\000\002\153\000\000\002\153\002\153\002\153\000\000\002\153\002\153\002\153\002\153\000\000\000\000\000\000\000\000\020\174\002\153\000\246\002\153\002\153\000\000\002\153\002\153\002\153\002\153\002\153\002\153\000\000\000\000\002\153\002\153\002\153\000\000\003\021\003\021\021v\002\153\002\153\002\153\002\153\002\169\000\000\000\000\002\169\000\000\002\169\000\000\000\000\002\169\003\021\000\000\012&\002\169\000\000\002\169\000\000\000\000\002\169\000\000\002\169\002\169\002\169\000\n\002\169\002\169\002\169\000\000\tj\000\000\000\000\t>\000\000\002\169\002\169\002\169\002\169\002\169\tr\002\169\000\000\000\000\tz\000\000\000\000\000\000\002\169\002\169\002\169\002\169\002\169\000\000\000\000\000\000\000\000\003\021\002\169\000\000\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\002\169\002\169\002\169\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\rrrN\000\000\002\149\002\149\002\149\000\000\002\149\002\149\002\149\000\000\007\253\000\000\000\000\t>\000\000\002\149\002\149\002\149\r\142\002\149\007\253\002\149\000\000\000\000\007\253\000\000\000\000\000\000\002\149\002\149\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\000\000\002\149\000\000\002\149\002\149\000\000\000\000\000\000\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\000\000\002\149\002\149\rV\r\150\002\149\002\149\002\149\002\149\002\149\000\000\000\000\002\149\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\000\000\002\149\000\000\002\149\002\149\002\149\000\000\002\149\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\b\017\002\149\002\149\000\000\002\149\002\149\002\149\002\149\002\149\002\149\000\000\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\002\149\002\149\002\149\002\149\002\145\000\000\000\000\002\145\000\000\002\145\000\000\000\000\002\145\000\000\000\000\b\017\002\145\000\000\002\145\000\000\000\000\rN\000\000\002\145\002\145\002\145\000\000\002\145\002\145\002\145\000\000\b\017\000\000\000\000\t>\000\000\002\145\002\145\002\145\r\142\002\145\b\017\002\145\000\000\000\000\b\017\000\000\000\000\000\000\002\145\002\145\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002\145\rV\rb%\002\185\000\000\002\185\000\000\000\000\rN\000\000\002\185\002\185\002\185\000\000\002\185\002\185\002\185\000\000\tj\000\000\000\000\t>\000\000\r\134\r\158\r\166\r\142\r\174\b%\002\185\000\000\000\000\b%\000\000\000\000\000\000\002\185\002\185\r\182\r\190\002\185\000\000\000\000\000\000\000\000\000\000\002\185\000\000\002\185\000\000\r\198\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\rV\r\150\r\206\r\214\r\230\002\185\002\185\000\000\000\000\002\185\000\000\002\185\002\185\r\238\000\000\000\000\000\000\000\000\000\000\002\185\000\000\002\185\000\000\002\185\002\185\r\246\000\000\002\185\002\185\002\185\002\185\000\000\000\000\000\000\000\000\000\000\002\185\b!\002\185\002\185\000\000\002\185\002\185\002\185\r\222\002\185\002\185\000\000\000\000\002\185\r\254\002\185\000\000\000\000\000\000\000\000\002\185\002\185\014\006\014\014\002\161\000\000\000\000\002\161\000\000\002\161\000\000\000\000\002\161\000\000\000\000\b!\002\161\000\000\002\161\000\000\000\000\rN\000\000\002\161\002\161\002\161\000\000\002\161\002\161\002\161\000\000\014\218\000\000\000\000\b!\000\000\002\161\002\161\002\161\r\142\002\161\b!\002\161\000\000\000\000\b!\000\000\000\000\000\000\002\161\002\161\002\161\002\161\002\161\000\000\000\000\000\000\000\000\000\000\002\161\000\000\002\161\000\000\002\161\002\161\000\000\000\000\000\000\000\000\002\161\002\161\002\161\000\000\000\000\000\000\000\000\000\000\000\000\002\161\002\161\rV\rrN\000\000\002\157\002\157\002\157\000\000\002\157\002\157\002\157\000\000\007\249\000\000\000\000\t>\000\000\002\157\002\157\002\157\r\142\002\157\007\249\002\157\000\000\000\000\007\249\000\000\000\000\000\000\002\157\002\157\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\000\000\002\157\002\157\000\000\000\000\000\000\000\000\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\000\000\002\157\002\157\rV\r\150\002\157\002\157\002\157\002\157\002\157\000\000\000\000\002\157\000\000\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\000\000\002\157\002\157\002\157\000\000\002\157\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\246\002\157\002\157\000\000\002\157\002\157\002\157\002\157\002\157\002\157\000\000\000\000\002\157\002\157\002\157\000\000\000\000\000\000\000\000\002\157\002\157\002\157\002\157\002\177\000\000\000\000\002\177\000\000\002\177\000\000\000\000\002\177\000\000\000\000\016^\002\177\000\000\002\177\000\000\000\000\rN\000\000\002\177\002\177\002\177\000\000\002\177\002\177\002\177\000\000\014\174\000\000\000\000\014\182\000\000\r\134\r\158\r\166\r\142\002\177\014\190\002\177\000\000\000\000\014\198\000\000\000\000\000\000\002\177\002\177\r\182\r\190\002\177\000\000\000\000\000\000\000\000\000\000\002\177\000\000\002\177\000\000\002\177\002\177\000\000\000\000\000\000\000\000\002\177\002\177\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\rV\r\150\r\206\r\214\002\177\002\177\002\177\000\000\000\000\002\177\000\000\002\177\002\177\002\177\000\000\000\000\000\000\000\000\000\000\002\177\000\000\002\177\000\000\002\177\002\177\002\177\000\000\002\177\002\177\002\177\002\177\000\000\000\000\000\000\000\000\000\000\002\177\000\000\002\177\002\177\000\000\002\177\002\177\002\177\r\222\002\177\002\177\000\000\000\000\002\177\002\177\002\177\000\000\000\000\000\000\000\000\002\177\002\177\002\177\002\177\002\133\000\000\000\000\002\133\000\000\002\133\003\021\002~\002\133\000\000\022\250\001*\002\133\000\000\002\133\000\000\000\000\rN\000\000\002\133\002\133\002\133\000\000\002\133\002\133\002\133\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\r\142\002\133\000\n\002\133\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\002\133\002\133\000\000\000\000\029\014\000\000\002V\002\133\003\021\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\002\133\002\133\002\133\005\190\003\021\003\021\000\000\000\000\000\000\002\133\002\133\rV\rrN\000\000\002\129\002\129\002\129\000\000\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\129\000\000\002\129\000\000\000\000\005\170\000\000\000\000\000\000\002\129\002\129\r\182\r\190\002\129\000\000\000\000\000\000\000\000\000\000\002\129\000\000\002\129\000\000\002\129\002\129\000\000\000\000\000\000\000\000\002\129\002\129\000\246\000\000\000\000\006\014\000\000\000\000\000\000\002\129\002\129\rV\r\150\r\206\r\214\002\129\002\129\002\129\000\000\000\000\002\129\001\014\002\129\002\129\002\129\001*\000\000\000\000\000\000\000\000\002\129\000\000\002\129\000\000\002\129\002\129\002\129\000\000\002\129\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\002\129\000\000\002\129\002\129\000\000\002\129\002\129\002\129\r\222\002\129\002\129\000\000\000\000\002\129\002\129\002\129\000\000\000\000\000\000\006\234\002\129\002\129\002\129\002\129\002\221\000\000\000\000\002\221\000\000\002\221\000\000\000\000\002\221\000\000\000\000\005\190\002\221\000\000\002\221\000\000\000\000\rN\000\000\002\221\002\221\002\221\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\221\000\000\002\221\000\000\000\000\005\170\000\000\000\000\000\000\002\221\002\221\r\182\r\190\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\000\000\002\221\002\221\000\000\000\000\000\000\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\000\000\002\221\002\221\rV\r\150\r\206\002\221\002\221\002\221\002\221\000\000\000\000\002\221\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\000\000\002\221\002\221\002\221\000\000\002\221\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\002\221\000\000\002\221\002\221\002\221\r\222\002\221\002\221\000\000\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\002\221\002\221\002\221\002\221\002}\000\000\000\000\002}\000\000\002}\000\000\000\000\002}\000\000\000\000\000\000\002}\000\000\002}\000\000\000\000\rN\000\000\002}\002}\002}\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\r\182\r\190\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\002}\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\rV\r\150\r\206\r\214\002}\002}\002}\000\000\000\000\002}\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\002}\002}\002}\000\000\002}\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\002}\002}\002}\r\222\002}\002}\000\000\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\002}\002}\002}\002}\002\181\000\000\000\000\002\181\000\000\002\181\000\000\000\000\002\181\000\000\000\000\000\000\002\181\000\000\002\181\000\000\000\000\rN\000\000\002\181\002\181\002\181\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\181\000\000\002\181\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\r\182\r\190\002\181\000\000\000\000\000\000\000\000\000\000\002\181\000\000\002\181\000\000\002\181\002\181\000\000\000\000\000\000\000\000\002\181\002\181\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\rV\r\150\r\206\r\214\002\181\002\181\002\181\000\000\000\000\002\181\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\002\181\000\000\002\181\000\000\002\181\002\181\002\181\000\000\002\181\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\002\181\000\000\002\181\002\181\000\000\002\181\002\181\002\181\r\222\002\181\002\181\000\000\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\002\181\002\181\002\181\002\181\002\173\000\000\000\000\002\173\000\000\002\173\000\000\000\000\002\173\000\000\000\000\000\000\002\173\000\000\002\173\000\000\000\000\rN\000\000\002\173\002\173\002\173\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\173\000\000\002\173\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\r\182\r\190\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\000\000\002\173\002\173\000\000\000\000\000\000\000\000\002\173\002\173\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\rV\r\150\r\206\r\214\002\173\002\173\002\173\000\000\000\000\002\173\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\000\000\002\173\002\173\002\173\000\000\002\173\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\002\173\000\000\002\173\002\173\002\173\r\222\002\173\002\173\000\000\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\002\173\002\173\002\173\002\173\002\189\000\000\000\000\002\189\000\000\002\189\000\000\000\000\002\189\000\000\000\000\000\000\002\189\000\000\002\189\000\000\000\000\rN\000\000\002\189\002\189\002\189\000\000\002\189\002\189\002\189\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\189\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\r\182\r\190\002\189\000\000\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\r\198\002\189\000\000\000\000\000\000\000\000\002\189\002\189\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\rV\r\150\r\206\r\214\r\230\002\189\002\189\000\000\000\000\002\189\000\000\002\189\002\189\r\238\000\000\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\002\189\002\189\r\246\000\000\002\189\002\189\002\189\002\189\000\000\000\000\000\000\000\000\000\000\002\189\000\000\002\189\002\189\000\000\002\189\002\189\002\189\r\222\002\189\002\189\000\000\000\000\002\189\r\254\002\189\000\000\000\000\000\000\000\000\002\189\002\189\014\006\014\014\002\193\000\000\000\000\002\193\000\000\002\193\000\000\000\000\002\193\000\000\000\000\000\000\002\193\000\000\002\193\000\000\000\000\rN\000\000\002\193\002\193\002\193\000\000\002\193\002\193\002\193\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\193\000\000\002\193\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\r\182\r\190\002\193\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\r\198\002\193\000\000\000\000\000\000\000\000\002\193\002\193\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\rV\r\150\r\206\r\214\r\230\002\193\002\193\000\000\000\000\002\193\000\000\002\193\002\193\r\238\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\002\193\002\193\r\246\000\000\002\193\002\193\002\193\002\193\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\002\193\000\000\002\193\002\193\002\193\r\222\002\193\002\193\000\000\000\000\002\193\002\193\002\193\000\000\000\000\000\000\000\000\002\193\002\193\014\006\014\014\002\197\000\000\000\000\002\197\000\000\002\197\000\000\000\000\002\197\000\000\000\000\000\000\002\197\000\000\002\197\000\000\000\000\rN\000\000\002\197\002\197\002\197\000\000\002\197\002\197\002\197\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\197\000\000\002\197\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\r\182\r\190\002\197\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\r\198\002\197\000\000\000\000\000\000\000\000\002\197\002\197\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\rV\r\150\r\206\r\214\r\230\002\197\002\197\000\000\000\000\002\197\000\000\002\197\002\197\r\238\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\002\197\002\197\r\246\000\000\002\197\002\197\002\197\002\197\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\002\197\000\000\002\197\002\197\002\197\r\222\002\197\002\197\000\000\000\000\002\197\002\197\002\197\000\000\000\000\000\000\000\000\002\197\002\197\014\006\014\014\t1\000\000\000\000\t1\000\000\t1\000\000\000\000\t1\000\000\000\000\000\000\t1\000\000\t1\000\000\000\000\rN\000\000\t1\t1\t1\000\000\t1\t1\t1\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\t1\000\000\000\000\000\000\000\000\000\000\000\000\t1\t1\r\182\r\190\t1\000\000\000\000\000\000\000\000\000\000\t1\000\000\t1\000\000\r\198\t1\000\000\000\000\000\000\000\000\t1\t1\000\246\000\000\000\000\000\000\000\000\000\000\000\000\t1\t1\rV\r\150\r\206\r\214\r\230\t1\t1\000\000\000\000\t1\000\000\t1\t1\r\238\000\000\000\000\000\000\000\000\000\000\t1\000\000\t1\000\000\t1\t1\r\246\000\000\t1\t1\t1\t1\000\000\000\000\000\000\000\000\000\000\t1\000\000\t1\t1\000\000\t1\t1\t1\r\222\t1\t1\000\000\000\000\t1\r\254\t1\000\000\000\000\000\000\000\000\t1\t1\014\006\014\014\002\201\000\000\000\000\002\201\000\000\002\201\000\000\000\000\002\201\000\000\000\000\000\000\002\201\000\000\002\201\000\000\000\000\rN\000\000\002\201\002\201\002\201\000\000\002\201\002\201\002\201\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\201\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\r\182\r\190\002\201\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\r\198\002\201\000\000\000\000\000\000\000\000\002\201\002\201\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\rV\r\150\r\206\r\214\r\230\002\201\002\201\000\000\000\000\002\201\000\000\002\201\002\201\r\238\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\002\201\002\201\r\246\000\000\002\201\002\201\002\201\002\201\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\002\201\000\000\014\022\002\201\014\030\r\222\002\201\002\201\000\000\000\000\002\201\r\254\002\201\000\000\000\000\000\000\000\000\002\201\002\201\014\006\014\014\t-\000\000\000\000\t-\000\000\t-\000\000\000\000\t-\000\000\000\000\000\000\t-\000\000\t-\000\000\000\000\rN\000\000\t-\t-\t-\000\000\t-\t-\t-\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\t-\000\000\000\000\000\000\000\000\000\000\000\000\t-\t-\r\182\r\190\t-\000\000\000\000\000\000\000\000\000\000\t-\000\000\t-\000\000\r\198\t-\000\000\000\000\000\000\000\000\t-\t-\000\246\000\000\000\000\000\000\000\000\000\000\000\000\t-\t-\rV\r\150\r\206\r\214\r\230\t-\t-\000\000\000\000\t-\000\000\t-\t-\r\238\000\000\000\000\000\000\000\000\000\000\t-\000\000\t-\000\000\t-\t-\r\246\000\000\t-\t-\t-\t-\000\000\000\000\000\000\000\000\000\000\t-\000\000\t-\t-\000\000\t-\t-\t-\r\222\t-\t-\000\000\000\000\t-\r\254\t-\000\000\000\000\000\000\000\000\t-\t-\014\006\014\014\002\249\000\000\000\000\002\249\000\000\002\249\000\000\000\000\002\249\000\000\000\000\000\000\002\249\000\000\002\249\000\000\000\000\rN\000\000\002\249\002\249\002\249\000\000\002\249\002\249\002\249\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\249\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\r\182\r\190\002\249\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\249\000\000\r\198\002\249\000\000\000\000\000\000\000\000\002\249\002\249\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\rV\r\150\r\206\r\214\r\230\002\249\002\249\000\000\000\000\002\249\000\000\002\249\002\249\r\238\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\249\000\000\002\249\002\249\r\246\000\000\002\249\002\249\002\249\002\249\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\249\002\249\000\000\014\022\002\249\014\030\r\222\002\249\002\249\000\000\000\000\002\249\r\254\002\249\000\000\000\000\000\000\000\000\002\249\002\249\014\006\014\014\002\245\000\000\000\000\002\245\000\000\002\245\000\000\000\000\002\245\000\000\000\000\000\000\002\245\000\000\002\245\000\000\000\000\rN\000\000\002\245\002\245\002\245\000\000\002\245\002\245\002\245\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\r\182\r\190\002\245\000\000\000\000\000\000\000\000\000\000\002\245\000\000\002\245\000\000\r\198\002\245\000\000\000\000\000\000\000\000\002\245\002\245\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\rV\r\150\r\206\r\214\r\230\002\245\002\245\000\000\000\000\002\245\000\000\002\245\002\245\r\238\000\000\000\000\000\000\000\000\000\000\002\245\000\000\002\245\000\000\002\245\002\245\r\246\000\000\002\245\002\245\002\245\002\245\000\000\000\000\000\000\000\000\000\000\002\245\000\000\002\245\002\245\000\000\014\022\002\245\014\030\r\222\002\245\002\245\000\000\000\000\002\245\r\254\002\245\000\000\000\000\000\000\000\000\002\245\002\245\014\006\014\014\002\253\000\000\000\000\002\253\000\000\002\253\000\000\000\000\002\253\000\000\000\000\000\000\002\253\000\000\002\253\000\000\000\000\rN\000\000\002\253\002\253\002\253\000\000\002\253\002\253\002\253\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\253\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\r\182\r\190\002\253\000\000\000\000\000\000\000\000\000\000\002\253\000\000\002\253\000\000\r\198\002\253\000\000\000\000\000\000\000\000\002\253\002\253\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\rV\r\150\r\206\r\214\r\230\002\253\002\253\000\000\000\000\002\253\000\000\002\253\002\253\r\238\000\000\000\000\000\000\000\000\000\000\002\253\000\000\002\253\000\000\002\253\002\253\r\246\000\000\002\253\002\253\002\253\002\253\000\000\000\000\000\000\000\000\000\000\002\253\000\000\002\253\002\253\000\000\014\022\002\253\014\030\r\222\002\253\002\253\000\000\000\000\002\253\r\254\002\253\000\000\000\000\000\000\000\000\002\253\002\253\014\006\014\014\002\233\000\000\000\000\002\233\000\000\002\233\000\000\000\000\002\233\000\000\000\000\000\000\002\233\000\000\002\233\000\000\000\000\rN\000\000\002\233\002\233\002\233\000\000\002\233\002\233\002\233\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\233\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\r\182\r\190\002\233\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\000\000\r\198\002\233\000\000\000\000\000\000\000\000\002\233\002\233\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\rV\r\150\r\206\r\214\r\230\002\233\002\233\000\000\000\000\002\233\000\000\002\233\002\233\r\238\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\000\000\002\233\002\233\r\246\000\000\002\233\002\233\002\233\002\233\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\002\233\000\000\014\022\002\233\014\030\r\222\002\233\002\233\000\000\000\000\002\233\r\254\002\233\000\000\000\000\000\000\000\000\002\233\002\233\014\006\014\014\002\237\000\000\000\000\002\237\000\000\002\237\000\000\000\000\002\237\000\000\000\000\000\000\002\237\000\000\002\237\000\000\000\000\rN\000\000\002\237\002\237\002\237\000\000\002\237\002\237\002\237\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\237\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\r\182\r\190\002\237\000\000\000\000\000\000\000\000\000\000\002\237\000\000\002\237\000\000\r\198\002\237\000\000\000\000\000\000\000\000\002\237\002\237\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\rV\r\150\r\206\r\214\r\230\002\237\002\237\000\000\000\000\002\237\000\000\002\237\002\237\r\238\000\000\000\000\000\000\000\000\000\000\002\237\000\000\002\237\000\000\002\237\002\237\r\246\000\000\002\237\002\237\002\237\002\237\000\000\000\000\000\000\000\000\000\000\002\237\000\000\002\237\002\237\000\000\014\022\002\237\014\030\r\222\002\237\002\237\000\000\000\000\002\237\r\254\002\237\000\000\000\000\000\000\000\000\002\237\002\237\014\006\014\014\002\241\000\000\000\000\002\241\000\000\002\241\000\000\000\000\002\241\000\000\000\000\000\000\002\241\000\000\002\241\000\000\000\000\rN\000\000\002\241\002\241\002\241\000\000\002\241\002\241\002\241\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\241\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\r\182\r\190\002\241\000\000\000\000\000\000\000\000\000\000\002\241\000\000\002\241\000\000\r\198\002\241\000\000\000\000\000\000\000\000\002\241\002\241\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\rV\r\150\r\206\r\214\r\230\002\241\002\241\000\000\000\000\002\241\000\000\002\241\002\241\r\238\000\000\000\000\000\000\000\000\000\000\002\241\000\000\002\241\000\000\002\241\002\241\r\246\000\000\002\241\002\241\002\241\002\241\000\000\000\000\000\000\000\000\000\000\002\241\000\000\002\241\002\241\000\000\014\022\002\241\014\030\r\222\002\241\002\241\000\000\000\000\002\241\r\254\002\241\000\000\000\000\000\000\000\000\002\241\002\241\014\006\014\014\003\005\000\000\000\000\003\005\000\000\003\005\000\000\000\000\003\005\000\000\000\000\000\000\003\005\000\000\003\005\000\000\000\000\rN\000\000\003\005\003\005\003\005\000\000\003\005\003\005\003\005\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\003\005\000\000\000\000\000\000\000\000\000\000\000\000\003\005\003\005\r\182\r\190\003\005\000\000\000\000\000\000\000\000\000\000\003\005\000\000\003\005\000\000\r\198\003\005\000\000\000\000\000\000\000\000\003\005\003\005\000\246\000\000\000\000\000\000\000\000\000\000\000\000\003\005\003\005\rV\r\150\r\206\r\214\r\230\003\005\003\005\000\000\000\000\003\005\000\000\003\005\003\005\r\238\000\000\000\000\000\000\000\000\000\000\003\005\000\000\003\005\000\000\003\005\003\005\r\246\000\000\003\005\003\005\003\005\003\005\000\000\000\000\000\000\000\000\000\000\003\005\000\000\003\005\003\005\000\000\014\022\003\005\014\030\r\222\003\005\003\005\000\000\000\000\003\005\r\254\003\005\000\000\000\000\000\000\000\000\003\005\003\005\014\006\014\014\003\001\000\000\000\000\003\001\000\000\003\001\000\000\000\000\003\001\000\000\000\000\000\000\003\001\000\000\003\001\000\000\000\000\rN\000\000\003\001\003\001\003\001\000\000\003\001\003\001\003\001\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\003\001\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\001\r\182\r\190\003\001\000\000\000\000\000\000\000\000\000\000\003\001\000\000\003\001\000\000\r\198\003\001\000\000\000\000\000\000\000\000\003\001\003\001\000\246\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\001\rV\r\150\r\206\r\214\r\230\003\001\003\001\000\000\000\000\003\001\000\000\003\001\003\001\r\238\000\000\000\000\000\000\000\000\000\000\003\001\000\000\003\001\000\000\003\001\003\001\r\246\000\000\003\001\003\001\003\001\003\001\000\000\000\000\000\000\000\000\000\000\003\001\000\000\003\001\003\001\000\000\014\022\003\001\014\030\r\222\003\001\003\001\000\000\000\000\003\001\r\254\003\001\000\000\000\000\000\000\000\000\003\001\003\001\014\006\014\014\003\t\000\000\000\000\003\t\000\000\003\t\000\000\000\000\003\t\000\000\000\000\000\000\003\t\000\000\003\t\000\000\000\000\rN\000\000\003\t\003\t\003\t\000\000\003\t\003\t\003\t\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\003\t\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\t\r\182\r\190\003\t\000\000\000\000\000\000\000\000\000\000\003\t\000\000\003\t\000\000\r\198\003\t\000\000\000\000\000\000\000\000\003\t\003\t\000\246\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\t\rV\r\150\r\206\r\214\r\230\003\t\003\t\000\000\000\000\003\t\000\000\003\t\003\t\r\238\000\000\000\000\000\000\000\000\000\000\003\t\000\000\003\t\000\000\003\t\003\t\r\246\000\000\003\t\003\t\003\t\003\t\000\000\000\000\000\000\000\000\000\000\003\t\000\000\003\t\003\t\000\000\014\022\003\t\014\030\r\222\003\t\003\t\000\000\000\000\003\t\r\254\003\t\000\000\000\000\000\000\000\000\003\t\003\t\014\006\014\014\002\229\000\000\000\000\002\229\000\000\002\229\000\000\000\000\002\229\000\000\000\000\000\000\002\229\000\000\002\229\000\000\000\000\rN\000\000\002\229\002\229\002\229\000\000\002\229\002\229\002\229\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\229\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\r\182\r\190\002\229\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\000\000\r\198\002\229\000\000\000\000\000\000\000\000\002\229\002\229\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\rV\r\150\r\206\r\214\r\230\002\229\002\229\000\000\000\000\002\229\000\000\002\229\002\229\r\238\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\000\000\002\229\002\229\r\246\000\000\002\229\002\229\002\229\002\229\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\002\229\000\000\014\022\002\229\014\030\r\222\002\229\002\229\000\000\000\000\002\229\rrN\000\000\002U\002U\002U\000\000\002U\002U\002U\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002U\000\000\000\000\000\000\000\000\000\000\000\000\002U\002U\r\182\r\190\002U\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\r\198\002U\000\000\000\000\000\000\000\000\002U\002U\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002U\002U\rV\r\150\r\206\r\214\r\230\002U\002U\000\000\000\000\002U\000\000\002U\002U\r\238\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\002U\002U\r\246\000\000\002U\002U\018F\002U\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\002U\000\000\014\022\002U\014\030\r\222\002U\002U\000\000\000\000\002U\r\254\002U\000\000\000\000\000\000\000\000\002U\002U\014\006\014\014\002Q\000\000\000\000\002Q\000\000\002Q\000\000\000\000\002Q\000\000\000\000\000\000\002Q\000\000\002Q\000\000\000\000\rN\000\000\002Q\002Q\002Q\000\000\002Q\002Q\002Q\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002Q\000\000\000\000\000\000\000\000\000\000\000\000\002Q\002Q\r\182\r\190\002Q\000\000\000\000\000\000\000\000\000\000\002Q\000\000\002Q\000\000\r\198\002Q\000\000\000\000\000\000\000\000\002Q\002Q\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002Q\002Q\rV\r\150\r\206\r\214\r\230\002Q\002Q\000\000\000\000\002Q\000\000\002Q\002Q\r\238\000\000\000\000\000\000\000\000\000\000\002Q\000\000\002Q\000\000\002Q\002Q\r\246\000\000\002Q\002Q\002Q\002Q\000\000\000\000\000\000\000\000\000\000\002Q\000\000\002Q\002Q\000\000\014\022\002Q\014\030\r\222\002Q\002Q\000\000\000\000\002Q\r\254\002Q\000\000\000\000\000\000\000\000\002Q\002Q\014\006\014\014\002\225\000\000\000\000\002\225\000\000\002\225\000\000\000\000\002\225\000\000\000\000\000\000\002\225\000\000\002\225\000\000\000\000\rN\000\000\002\225\002\225\002\225\000\000\002\225\002\225\002\225\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\225\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\r\182\r\190\002\225\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\000\000\r\198\002\225\000\000\000\000\000\000\000\000\002\225\002\225\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\rV\r\150\r\206\r\214\r\230\002\225\002\225\000\000\000\000\002\225\000\000\002\225\002\225\r\238\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\000\000\002\225\002\225\r\246\000\000\002\225\002\225\002\225\002\225\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\002\225\000\000\014\022\002\225\014\030\r\222\002\225\002\225\000\000\000\000\002\225\rt\000\000\000\000\002\t\000\000\002\t\000\000\000\000\002\t\000\000\000\000\000\000\002\t\000\000\002\t\000\000\000\000\002\t\000\000\002\t\002\t\002\t\000\000\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\t\002\t\000\000\002\t\000\000\000\000\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\002\t\000\000\002\t\000\000\002\t\002\t\000\000\000\000\000\000\000\000\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\000\000\000\000\002\t\000\000\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\002\t\000\000\002\t\000\000\002\t\002\t\002\t\000\000\002\t\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\002\t\000\000\002\t\002\t\000\000\002\t\002\t\002\t\002\t\002\t\002\t\000\000\000\000\002\t\002\t\018.\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\tr\000\000\002\r\000\000\000\000\002\r\000\000\000\000\000\000\002\r\000\000\002\r\000\000\000\000\002\r\000\000\002\r\002\r\002\r\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\000\000\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\002\r\000\000\002\r\000\000\002\r\002\r\000\000\000\000\000\000\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\000\000\000\000\002\r\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\002\r\000\000\028\186\000\000\002\r\002\r\002\r\000\000\002\r\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\002\r\000\000\002\r\002\r\000\000\002\r\002\r\002\r\002\r\002\r\002\r\000\000\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\rn\001\014\000\000\001\018\001\030\001*\012\166\000\000\000\000\012\254\001.\001r\000\000\000\000\000\000\001v\000\000\000\000\000\000\007Y\0012\000\000\000\000\000\000\000\000\001z\001\158\012N\012R\001\170\001\174\000\000\000\000\000\000\007\158\000\000\000\000\001:\000\000\028j\000\000\012r\012v\007Y\b\022\b\"\001n\b.\b2\b:\012z\nZ\000\000\001\190\007Y\001\130\000\000\000\000\011\130\007Y\007Y\000\246\011\134\011\138\011\150\011\166\000\000\b\210\007Y\007Y\001\194\001\198\001\202\001\206\001\210\000\000\000\000\011\190\001\214\000\000\000\000\000\000\000\000\001\218\000\000\000\000\011\202\011\226\012\002\012\022\b\222\000\000\005\170\000\000\000\000\001\222\000\000\000\000\007Y\000\000\000\000\011\158\001\226\011\162\000\000\000\000\000\000\000\000\000\000\007Y\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\011\178\000\000\002\"\000\000\016~\003z\012\142\026\158\002*\000\000\002.\0022\000\006\000\254\000\000\000\000\r1\001\n\001\014\000\000\001\018\001\030\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\000\000\000\000\012J\000\000\000\000\000\000\r1\0012\000\000\000\000\000\000\000\000\001z\001\158\012N\012R\001\170\001\174\000\000\000\000\000\000\007\158\000\000\000\000\001:\000\000\012V\000\000\012r\012v\r1\b\022\b\"\001n\b.\b2\b:\012z\nZ\000\000\001\190\r1\001\130\000\000\000\000\011\130\r1\r1\000\246\011\134\011\138\011\150\011\166\000\000\b\210\r1\r1\001\194\001\198\001\202\001\206\001\210\000\000\000\000\011\190\001\214\012\241\012\221\000\000\000\000\001\218\000\000\000\000\011\202\011\226\012\002\012\022\b\222\000\000\005\170\000\000\000\000\001\222\000\000\000\000\r1\000\000\012\241\011\158\001\226\011\162\002\150\000\000\000\000\002\154\000\000\r1\000\000\000\000\000\000\002\030\007\002\000\000\000\000\b\226\011\178\000\000\002\"\002\166\016~\003z\012\142\002\174\002*\012\221\002.\0022\000\006\000\254\000\000\000\000\001\138\001\n\001\014\006\146\001\018\001\030\001*\000\000\000\000\000\000\000\000\001.\000\000\000\000\007r\000\000\000\000\002\178\004\201\000\000\007v\0012\000\000\000\000\021b\001\014\0016\000\000\007z\007~\000\000\000\000\000\000\007\130\000\000\007\158\000\000\000\000\001:\000\000\021r\000\000\b\014\b\018\0012\b\022\b\"\001n\b.\b2\b:\b\150\nZ\r%\000\000\021Z\001\130\000\000\025\182\011\130\021\214\000\000\000\000\011\134\011\138\011\150\011\166\002\182\b\210\000\000\025\222\000\000\001F\005\169\000\000\025\226\021\222\005\169\011\190\001\130\000\000\000\000\000\000\000\000\000\000\000\000\026\018\011\202\011\226\012\002\012\022\b\222\000\000\005\170\021\230\022\018\000\000\000\000\004\201\004\201\000\000\000\000\011\158\000\000\011\162\007}\tf\000\000\000\000\007}\000\000\026\"\000\000\000\000\000\000\000\000\022>\025\150\b\226\011\178\018\158\000\000\000\000\012*\003z\012\142\000\006\000\254\000\000\000\000\001\138\001\n\001\014\006\146\001\018\001\030\001*\r%\r%\000\000\000\000\001.\000\000\000\000\004\233\000\000\tI\000\000\tI\tI\007v\0012\000\246\000\000\005\169\000\000\0016\000\000\007z\007~\000\000\r%\000\000\007\130\r%\007\158\000\000\000\000\001:\000\000\021r\005\169\b\014\b\018\005\169\b\022\b\"\001n\b.\b2\b:\b\150\nZ\r%\000\000\021Z\001\130\000\000\000\000\011\130\021\214\000\000\000\000\011\134\011\138\011\150\011\166\000\000\b\210\000\000\000\000\000\000\tj\005\173\000\000\t>\021\222\005\173\011\190\000\000\029\222\000\000\tr\000\000\000\000\021j\tz\011\202\011\226\012\002\012\022\b\222\000\000\005\170\021\230\022\018\000\000\000\000\029\255\018N\000\000\000\000\011\158\004Y\011\162\b=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nB\025\150\b\226\011\178\tI\000\000\000\000\012*\003z\012\142\000\006\000\254\000\000\000\000\001\138\001\n\001\014\006\146\001\018\001\030\001*\r%\r%\000\000\000\000\001.\000\000\000\000\030.\000\000\000\000\000\000\005f\000\246\007v\0012\000\000\000\000\005\173\000\000\0016\000\000\007z\007~\000\000\r%\000\246\007\130\r%\007\158\000\000\000\000\001:\000\000\021r\005\173\b\014\b\018\005\173\b\022\b\"\001n\b.\b2\b:\b\150\nZ\004Y\000\000\021Z\001\130\000\000\000\000\011\130\021\214\001\r\000\000\011\134\011\138\011\150\011\166\000\000\b\210\tj\000\000\000\000\t>\t\230\000\000\000\000\021\222\000\000\011\190\tr\029\222\001\r\tj\tz\000\000\t>\nF\011\202\011\226\012\002\012\022\b\222\tr\005\170\021\230\022\018\tz\000\000\004\241\000\000\000\000\000\000\011\158\000\000\011\162\001\r\000\000\000\000\007\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\r\025\150\b\226\011\178\016\142\001\r\000\000\012*\003z\012\142\000\173\001\n\001\014\000\173\001\r\001\r\001*\000\000\012\182\000\000\000\000\001.\000\000\000\000\000\173\000\000\000\173\000\000\000\173\000\000\000\173\0012\000\000\000\000\012\230\000\000\0016\000\000\003\021\003\021\000\000\000\000\012\238\000\173\001\r\000\000\000\000\003\021\001:\000\000\000\173\000\000\020\"\000\000\000\173\001\r\000\000\001n\003\021\001~\000\173\000\000\000\173\002J\000\000\000\173\001\130\000\n\000\000\011\130\000\173\000\173\000\173\011\134\011\138\011\150\000\000\015J\b\210\000\173\000\173\000\000\0012\000\000\003\021\000\000\000\173\000\000\000\000\000\000\000\173\000\000\000\000\003\021\000\000\000\000\023&\000\000\000\246\003\021\000\000\b\222\000\000\005\170\000\173\000\173\000\000\000\000\000\173\000\173\003\006\000\000\011\158\023\158\011\162\n:\000\000\001\130\000\000\000\000\000\173\000\000\000\000\003\021\023\182\000\000\000\173\000\173\b\226\011\178\000\000\000\000\000\000\012*\003z\000\000\000\173\000\000\000\173\000\197\001\n\001\014\000\197\000\000\000\000\001*\000\000\012\182\tj\000\000\001.\t>\020&\000\197\000\000\000\197\000\000\000\197\tr\000\197\0012\000\246\tz\012\230\000\000\0016\000\000\003\021\003\021\000\000\000\000\012\238\000\197\000\000\000\000\000\000\003\021\001:\000\000\000\197\000\000\000\000\000\000\000\197\000\000\000\000\001n\003\021\001~\000\197\000\000\000\197\000\000\000\000\000\197\001\130\000\n\000\000\011\130\000\197\000\197\000\197\011\134\011\138\011\150\000\000\015J\b\210\000\197\000\197\000\000\tj\000\000\003\021\t>\000\197\000\000\000\000\000\000\000\197\000\000\tr\003\021\000\000\000\000\tz\000\000\000\000\003\021\000\000\b\222\000\000\005\170\000\197\000\197\000\000\000\000\000\197\000\197\t\150\000\000\011\158\t]\011\162\000\000\000\000\000\000\000\000\000\000\000\197\000\000\000\000\003\021\000\000\000\000\000\197\000\197\b\226\011\178\000\000\000\000\000\000\012*\003z\000\000\000\197\000\014\000\197\000\018\000\022\000\026\000\030\000\000\000\"\000&\000\000\000*\000.\0002\000\000\0006\000:\000\000\000\000\000>\000\000\000\246\000\000\000B\007\134\000\000\000\000\000\000\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\000\000\000\000J\000\000\000N\000R\000V\000Z\000^\000b\000f\000j\000\000\000\000\000\000\000n\000\000\000r\000\000\000v\000z\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tj\000\130\000\000\t>\000\134\000\138\000\000\000\000\t]\000\000\tr\000\142\000\146\000\150\tz\000\000\000\000\000\000\007I\007I\000\000\000\154\000\158\000\162\000\000\000\166\000\000\000\000\000\170\000\174\000\178\000\000\000\000\000\000\000\182\000\186\000\190\000\000\007I\007I\000\000\007I\000\194\000\000\000\198\000\202\000\000\000\000\000\000\007I\000\000\000\000\000\206\000\000\000\210\000\000\001\221\007\174\001\014\n\018\000\214\000\218\001*\000\222\007I\007I\007I\001.\001r\000\000\000\000\007I\001v\007I\007I\007I\001\221\0012\000\000\000\000\007I\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\210\007I\001\178\n.\001\221\000\000\000\000\007\202\017\246\001~\000\000\001\186\000\000\000\000\001\190\001\221\001\130\000\000\000\000\b\154\001\221\001\221\000\246\b\158\000\000\b\162\b\198\000\000\b\210\001\221\001\221\001\194\001\198\001\202\001\206\001\210\000\000\000\000\000\000\001\214\b\214\000\000\000\000\003.\001\218\007I\000\000\000\000\b\006\007\146\001\014\b\222\000\000\005\170\000\000\t\030\001\222\000\000\007\150\001\221\000\000\000\000\000\000\001\226\011R\000\000\000\000\000\000\000\000\0012\001\221\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\000\000\002*\000\000\002.\0022\007\174\001\014\011\242\000\000\b\002\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\001\130\000\000\001v\000\000\000\000\000\000\000\000\0012\002~\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\002\130\000\000\000\000\000\000\000\000\000\000\000\000\007\210\0012\001\178\n.\nn\000\000\000\000\007\202\017\246\001~\001\138\001\186\000\000\006\146\001\190\000\000\001\130\000\000\000\000\b\154\007\242\000\000\000\000\b\158\004\233\b\162\b\198\n\134\b\210\002V\007v\001\194\001\198\001\202\001\206\001\210\001\130\000\000\000\000\001\214\b\214\000\000\000\000\007\130\001\218\000\000\000\000\000\000\000\000\000\000\021r\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\b:\000\000\027:\001\226\000\000\021Z\n\138\000\000\000\000\000\000\021\214\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\021\222\002*\000\000\002.\0022\007\174\001\014\017\206\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\021\230\022\018\001v\000\000\000\000\000\000\000\000\0012\000\000\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\000\000\000\000\000\000\000\000\025\150\000\000\000\000\007\210\000\000\001\178\n.\000\000\000\000\000\000\007\202\017\246\001~\001\138\001\186\000\000\002\138\001\190\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\022B\b\162\b\198\000\000\b\210\000\000\007v\001\194\001\198\001\202\001\206\001\210\000\000\000\000\000\000\001\214\b\214\000\000\000\000\022F\001\218\000\000\000\000\000\000\000\000\000\000\022n\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\000\000\000\000\000\000\001\226\000\000\021Z\000\000\000\000\000\000\000\000\021\214\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\021\222\002*\000\000\002.\0022\007\174\001\014\019f\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\021\230\022\230\001v\000\000\004\189\004\189\000\000\0012\003\021\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\003\021\000\000\000\000\000\000\022\246\000\000\000\000\007\210\003\021\001\178\n.\000\000\000\000\000\000\007\202\017\246\001~\000\n\001\186\000\000\000\000\001\190\000\000\001\130\000\000\000\000\b\154\003\021\000\000\000\000\b\158\000\000\b\162\b\198\003\021\b\210\003\021\000\000\001\194\001\198\001\202\001\206\001\210\003\021\000\000\000\000\001\214\b\214\000\000\003\021\000\000\001\218\000\000\000\000\000\000\000\000\000\000\000\000\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\000\000\000\000\000\000\001\226\000\000\000\000\003\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\000\000\002*\000\000\002.\0022\007\174\001\014\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\000\000\000\000\001v\000\000\000\000\000\000\000\000\0012\000\000\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\210\000\000\001\178\n.\000\000\000\000\000\000\007\202\n2\001~\000\000\001\186\000\000\000\000\001\190\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\b\198\000\000\b\210\000\000\000\000\001\194\001\198\001\202\001\206\001\210\000\000\000\000\000\000\001\214\b\214\000\000\000\000\000\000\001\218\000\000\000\000\000\000\000\000\003\021\000\000\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\000\000\003\021\003\021\001\226\000\000\000\000\003\021\003\021\000\000\003\021\003\021\003\021\003\021\003\021\002\030\006\238\003\021\003\021\b\226\000\n\000\000\002\"\003\021\002&\003z\000\000\003\021\002*\000\000\002.\0022\003\021\003\021\003\021\003\021\000\n\003\021\003\021\n^\000\000\003\021\000\n\003\021\003\021\003\021\018\202\000\000\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\000\nt\000\000\003\021\003\021\003\021\0009\000\000\000\000\000\000\000\000\0009\000\000\0009\0009\000\000\000\000\000\000\000\000\000\000\0009\000\000\000\000\0009\000\000\nb\000\000\0009\0009\000\000\0009\0009\0009\0009\0009\0009\0009\0009\000\000\000\000\000\000\0009\000\000\000\000\0009\000\000\000\000\000\000\0009\0009\0009\0009\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\0009\0009\0009\0009\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000\000\0009\000\000\0005\0005\000\000\000\000\bI\0005\0005\000\000\0005\0005\0005\000\000\0009\0009\000\000\0005\000\000\0009\0009\0009\007\005\000\000\000\000\000\000\bI\0005\000\000\000\000\000\000\000\000\0005\000\000\0005\0005\000\000\000\000\000\000\000\000\000\000\0005\000\000\000\000\0005\000\000\000\000\000\000\0005\0005\bI\0005\0005\0005\0005\0005\0005\0005\0005\000\000\000\000\bI\0005\000\000\000\000\0005\bI\bI\000\246\0005\0005\0005\0005\000\000\0005\bI\bI\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\0005\0005\0005\0005\000\000\0005\000\000\000\000\bI\000\000\000\000\bI\000\000\000\000\0005\000\000\0005\000\000\012\129\012\129\000\000\000\000\b}\012}\000\000\000\000\000\000\012}\012}\000\000\012}\012}\012}\000\000\012\129\012\129\000\000\012}\000\000\012\129\012\129\012\129\007\017\000\000\000\000\000\000\000\000\012}\000\000\000\000\000\000\000\000\012}\000\000\012}\012}\000\000\000\000\000\000\000\000\000\000\012}\000\000\000\000\012}\000\000\000\000\000\000\012}\012}\000\000\012}\012}\012}\012}\012}\012}\012}\012}\000\000\000\000\000\000\012}\000\000\000\000\012}\000\000\000\000\000\000\012}\012}\012}\012}\000\000\012}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012}\012}\012}\012}\012}\000\000\012}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012}\000\000\012}\000\006\000\254\000\000\000\000\000\000\001\n\001\014\000\000\001\018\001\030\001*\000\000\000\000\012}\012}\001.\000\000\000\000\012}\012}\012}\000\000\016\254\000\000\000\000\0012\000\000\000\000\000\000\000\000\0016\000\000\007z\007~\000\000\000\000\000\000\000\000\000\000\007\158\000\000\000\000\001:\000\000\000\000\000\000\b\014\b\018\000\000\b\022\b\"\001n\b.\b2\b:\b\150\nZ\000\000\000\000\000\000\001\130\000\000\000\000\011\130\000\000\000\000\000\000\011\134\011\138\011\150\011\166\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\202\011\226\012\002\012\022\b\222\005y\005\170\000\000\005y\000\000\005y\005y\005y\005y\000\000\011\158\000\000\011\162\000\000\000\000\005y\000\000\005y\000\000\005y\005y\005y\000\000\005y\005y\005y\b\226\011\178\000\000\000\000\000\000\012*\003z\012\142\000\000\000\000\005y\000\000\005y\000\000\000\000\000\000\000\000\005y\005y\005y\005y\000\000\000\000\005y\000\000\000\000\005y\000\000\005y\005y\000\000\005y\005y\000\000\005y\000\000\000\000\005y\005y\005y\005y\005y\004\181\000\000\000\000\000\000\000\000\000\000\005y\005y\000\000\000\000\000\000\005y\000\000\005y\000\000\005y\000\000\005y\000\000\000\000\004\181\005y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005y\005y\005y\005y\005y\005y\005y\005y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\181\000\000\000\000\005y\000\000\005y\005y\024~\005y\003\"\005y\004\181\000\000\000\000\000\000\005y\004\181\006\138\000\246\005y\n\213\005y\005y\n\213\n\213\004\181\004\181\000\000\n\213\000\000\n\213\000\000\000\000\n\213\000\000\000\000\000\000\n\213\n\213\000\000\n\213\n\213\000\000\n\213\000\000\000\000\n\213\000\000\000\000\000\000\000\000\n\213\002F\002J\n\213\004\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\213\000\000\n\213\004\181\000\000\000\000\n\213\000\000\n\213\0012\002N\000\000\002^\000\000\000\000\n\213\000\000\000\000\n\213\000\000\002j\n\213\n\213\023&\n\213\000\000\n\213\n\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\n\213\024z\000\000\n\213\023\158\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\n\213\024\138\n\213\000\000\000\000\n\213\0206\n\213\000\000\000\000\000\000\000\000\000\000\000\000\b\254\000\000\000\000\000\000\003F\000\000\000\000\n\213\n\213\000\000\n\213\n\213\007v\n\213\000\000\n\213\000\000\n\213\t5\n\213\000\000\n\213\000\000\t5\000\000\002J\t5\000\000\000\000\000\000\000\000\000\000\000\000\002F\002J\t5\020\170\t5\t5\t5\000\000\t5\t5\t5\000\000\000\000\000\000\021Z\000\000\000\000\000\000\000\000\021\214\0012\002N\000\000\t5\000\000\000\000\000\000\000\000\025\194\025\210\t5\t5\000\000\000\000\t5\000\000\000\000\000\000\000\000\003\006\t5\000\000\t5\000\000\000\000\t5\002n\000\000\003\014\000\000\t5\t5\t5\003\n\000\000\001\130\003*\0036\004\225\t5\t5\000\000\003B\000\000\000\000\000\000\t5\000\000\000\000\026\190\003\182\000\000\000\000\000\000\t5\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\005\030\t5\t5\t5\000\000\t5\t5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t5\000\000\t5\t5\005\006\000\000\012\185\t5\000\000\000\000\000\000\012\185\t5\002J\012\185\000\000\t5\000\000\t5\t5\000\000\002F\002J\003\198\000\000\012\185\012\185\012\185\000\000\012\185\012\185\012\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\002N\000\000\012\185\000\000\000\000\000\000\000\000\000\000\000\000\012\185\012\185\000\000\000\000\012\185\000\000\000\000\000\000\023>\003\006\012\185\000\000\012\185\000\000\000\000\012\185\002n\000\000\003\014\000\000\012\185\012\185\012\185\003\n\000\000\001\130\003*\0036\007v\012\185\012\185\000\000\003B\000\000\000\000\000\000\012\185\000\000\000\000\000\000\003\182\000\000\000\000\000\000\012\185\000\000\000\000\000\000\000\000\003F\000\000\000\000\023j\005I\012\185\012\185\012\185\000\000\012\185\012\185\000\000\000\000\000\000\021Z\000\000\000\000\000\000\000\000\021\214\000\000\012\185\000\000\012\185\012\185\005\006\000\000\t9\012\185\023\150\000\000\000\000\t9\012\185\002J\t9\000\000\012\185\000\000\012\185\012\185\000\000\002F\002J\t9\000\000\t9\t9\t9\000\000\t9\t9\t9\000\000\000\000\000\000\000\000\000\000\004\217\000\000\000\000\000\000\0012\002N\000\000\t9\000\000\000\000\000\000\023\250\000\000\000\000\t9\t9\000\000\000\000\t9\000\000\000\000\000\000\000\000\003\006\t9\000\000\t9\000\000\000\000\t9\002n\000\000\003\014\000\000\t9\t9\t9\003\n\000\000\001\130\003*\0036\000\000\t9\t9\000\000\003B\000\000\000\000\000\000\t9\000\000\000\000\000\000\003\182\000\000\000\000\000\000\t9\000\000\000\000\bE\000\000\003F\000\000\000\000\000\000\005M\t9\t9\t9\000\000\t9\t9\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bE\000\000\000\000\t9\000\000\t9\t9\005\006\012\189\000\000\t9\000\000\000\000\012\189\000\000\t9\012\189\000\000\000\000\t9\000\000\t9\t9\000\000\bE\003\166\000\000\012\189\012\189\012\189\000\000\012\189\012\189\012\189\000\000\bE\000\000\000\000\000\000\000\000\bE\bE\000\246\000\000\000\000\000\000\012\189\000\000\000\000\bE\bE\000\000\000\000\012\189\012\189\000\000\000\000\012\189\000\000\000\000\000\000\000\000\000\000\012\189\000\000\012\189\000\000\007\229\012\189\000\000\000\000\000\000\000\000\012\189\012\189\012\189\bE\000\000\000\000\bE\000\000\000\000\012\189\012\189\007\229\007\229\000\000\007\229\007\229\012\189\bttr\000\000\000\000\000\000\000\000\012\r\000\000\000\000\012\r\000\000\012)\000\000\012)\012)\000\000\000\000\000\000\012)\007\213\012\r\012\r\012\r\012)\012\r\012\r\012\r\012)\000\000\012)\012)\000\000\000\000\000\000\007\213\000\000\000\000\000\000\000\000\012\r\000\000\000\000\000\000\000\000\000\000\000\000\012\r\003\150\000\000\000\000\012\r\000\000\000\000\007\213\000\000\007\213\012\r\000\000\012\r\000\000\000\000\012\r\000\000\000\000\000\000\000\000\012\r\012\r\012\r\007\213\000\000\000\000\t>\007\213\000\000\012\r\012\r\007\213\000\000\007\213\000\000\000\000\012\r\007\213\000\000\000\000\012\r\000\000\000\000\000\000\012\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\r\012\r\012\r\000\000\012\r\012\r\012\t\000\000\000\000\000\000\000\000\012\t\000\000\000\000\012\t\000\000\012\r\000\000\012\r\012\r\000\000\000\000\000\000\012\r\000\000\012\t\012\t\012\t\012\r\012\t\012\t\012\t\012\r\000\000\012\r\012\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\t\000\000\000\000\000\000\000\000\000\000\000\000\012\t\003\138\000\000\000\000\012\t\000\000\000\000\000\000\000\000\000\000\012\t\000\000\012\t\000\000\007\245\012\t\000\000\000\000\000\000\000\000\012\t\012\t\012\t\000\000\000\000\000\000\000\000\000\000\000\000\012\t\012\t\007\245\007\245\000\000\007\245\007\245\012\t\000\000\000\000\000\000\012\t\000\000\000\000\000\000\012\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\t\012\t\012\t\007\245\012\t\012\t\012\005\000\000\000\000\000\000\000\000\012\005\000\000\000\000\012\005\000\000\012\t\000\000\012\t\012\t\000\000\000\000\000\000\012\t\000\246\012\005\012\005\012\005\012\t\012\005\012\005\012\005\012\t\000\000\012\t\012\t\000\000\000\000\000\000\007\245\000\000\000\000\000\000\000\000\012\005\000\000\000\000\000\000\000\000\000\000\000\000\012\005\003\150\000\000\000\000\012\005\000\000\000\000\007\245\000\000\007\245\012\005\000\000\012\005\000\000\000\000\012\005\000\000\000\000\000\000\000\000\012\005\012\005\012\005\007\245\000\000\000\000\ttj\000\000\000\000\tn\003&\003\006\000\000\012\029\012\029\012\029\003\nn\003\218\003\006\000\000\012\025\012\025\012\025\003\nj\000\000\000\000\012\017\012\017\012\017\000\000\000\000\002r\000\000\000\000\000\000\012\017\012\017\000\000\002n\003\002\003\030\000\000\012\017\003\153\003\153\003\n\012\017\001\130\003*\0036\012\017\000\000\003\153\000\000\003B\003\153\000\000\000\000\000\000\000\000\012\017\012\017\012\017\003\153\012\017\012\017\000\000\000\000\000\000\000\000\000\000\003F\003\153\000\000\000\000\000\000\012\017\000\000\012\017\012\017\000\000\000\000\003\153\012\017\012\241\012\221\000\000\000\000\012\017\003\153\000\000\003\153\012\017\n\225\012\017\012\017\007\174\001\014\003\153\000\000\000\000\001*\000\000\000\000\003\153\012\241\001.\000\000\000\000\002\150\n\225\n\225\002\154\n\225\n\225\003z\0012\000\000\000\000\002\162\000\000\000\000\000\000\000\000\007\178\000\000\002\166\000\000\021\226\000\000\002\174\000\000\012\221\000\000\000\000\000\000\n\225\000\000\007\190\000\000\000\000\000\000\007\202\t\222\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\002\178\n\225\b\158\000\000\b\162\b\198\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\225\000\000\000\000\b\214\000\000\000\000\000\000\000\000\000\000\n\221\000\000\000\000\007\174\001\014\b\222\000\000\005\170\001*\t\030\n\225\000\000\n\225\001.\000\000\000\000\000\000\n\221\n\221\000\000\n\221\n\221\000\000\0012\000\000\002\182\n\225\000\000\000\000\n\225\n\225\007\178\b\226\000\000\n\225\000\000\n\225\000\000\003z\000\000\n\225\000\000\000\000\n\221\000\000\007\190\000\000\000\000\000\000\007\202\bN\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\n\221\b\158\000\000\b\162\b\198\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\221\000\000\000\000\b\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\222\000\000\005\170\000\000\t\030\n\221\000\000\n\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\245\000\000\000\000\n\221\000\000\001\245\n\221\n\221\001\245\b\226\000\000\n\221\000\000\n\221\000\000\003z\000\000\nbV\000\000\001\245\001.\001\245\001\245\004\181\000\000\000\000\001\245\004\181\000\000\004\181\0012\001\245\000\000\b\130\000\000\004R\000\000\001\245\007\178\000\000\000\000\t\210\004\181\000\000\000\000\000\000\000\000\000\000\000\000\004\181\000\000\000\000\007\190\000\000\000\000\000\000\n\014\000\000\001~\004\181\000\000\004\181\000\000\004:\004\181\001\130\000\000\000\000\b\154\004\181\006\138\n\185\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\181\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\004\181\004\181\nV\0012\004\181\004\181\b\130\000\000\000\000\000\000\000\000\007\178\n\230\000\000\t\210\000\000\006\178\000\000\n\185\012\194\000\000\n\185\0142\004\181\b\226\007\190\000\000\000\000\n\185\n\014\003z\001~\n\185\000\000\004\181\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\n\185\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\005\241\000\000\000\000\000\000\000\000\005\241\000\000\000\000\005\241\b\222\000\000\005\170\000\000\000\000\nV\000\000\000\000\000\000\000\000\005\241\000\000\005\241\000\000\005\241\000\000\005\241\012\241\012\221\000\000\000\000\n\185\000\000\000\000\n\185\n\185\000\000\b\226\000\000\005\241\000\000\n\185\000\000\003z\000\000\nnt!\000\000\001\229\000\000\000\000\000\000\001\229\000\000\001\229\000\000\000\000\000\000\000\000\003\141\003\141\003\141\000\000\003\141\003\141\000\000\000\000\001\229\000\000\000\000\000\000\005\129\000\000\000\000\001\229\001\229\000\000\000\000\003\141\000\000\000\000\000\000\003\141\003\006\001\229\000\000\001\229\000\000\000\000\001\229\000\000\000\000\000\000\003\141\001\229\001\229\001\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003q\000\000\002J\003q\000\000\001\229\001\229\000\000\000\000\003\182\000\000\000\000\t\029\000\000\003q\000\000\000\000\000\000\003q\000\000\003q\000\000\000\000\001\229\001\229\000\000\000\000\001\229\001\229\000\000\000\000\000\000\000\000\003q\000\000\000\000\000\000\000\000\000\000\001\229\003q\001\225\000\000\000\000\000\000\000\000\001\229\000\000\000\000\003\006\003q\001\229\003q\000\000\000\000\003q\000\000\001\229\000\000\000\000\003q\003q\003q\000\000\000\000\000\000\b\185\000\000\000\000\000\000\000\000\b\185\000\000\000\000\b\185\000\000\003q\003q\000\000\000\000\003\182\000\000\000\000\000\000\000\000\b\185\000\000\b\185\000\000\b\185\000\000\b\185\000\000\000\000\003q\003q\000\000\000\000\003q\003q\000\000\000\000\000\000\000\000\b\185\000\000\000\000\000\000\000\000\000\000\003q\b\185\b\185\000\000\000\000\000\000\000\000\003q\000\000\000\000\000\000\b\185\003q\b\185\000\000\000\000\b\185\000\000\003q\000\000\000\000\b\185\b\185\b\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\185\000\000\000\000\000\000\b\185\000\000\000\000\000\000\rq\000\000\000\000\000\000\000\000\rq\000\000\000\000\rq\000\000\b\185\b\185\b\185\000\000\b\185\b\185\000\000\000\000\000\000\rq\000\000\rq\000\000\rq\000\000\rq\b\185\000\000\000\000\b\185\000\000\000\000\000\000\b\185\000\000\000\000\000\000\000\000\rq\000\000\000\000\000\000\004R\000\000\b\185\rq\rq\000\000\000\000\000\000\000\000\000\000\003N\000\000\000\000\rq\000\000\rq\000\000\000\000\rq\000\000\000\000\000\000\000\000\rq\rq\rq\000\000\ru\000\000\000\000\000\000\000\000\ru\000\000\000\000\ru\000\000\000\000\000\000\rq\000\000\000\000\000\000\rq\000\000\000\000\ru\000\000\ru\000\000\ru\000\000\ru\000\000\000\000\000\000\000\000\rq\rq\rq\000\000\rq\rq\000\000\000\000\ru\000\000\000\000\000\000\003Z\000\000\000\000\ru\ru\000\000\000\000\rq\000\000\000\000\003N\rq\000\000\ru\000\000\ru\000\000\000\000\ru\000\000\000\000\000\000\rq\ru\ru\ru\000\000\003\141\000\000\000\000\000\000\000\000\003\141\000\000\000\000\003\141\000\000\000\000\000\000\ru\000\000\000\000\000\000\ru\000\000\000\000\003\141\000\000\003\141\000\000\003\141\000\000\003\141\000\000\000\000\000\000\000\000\ru\ru\ru\000\000\ru\ru\000\000\000\000\003\141\000\000\000\000\000\000\003Z\000\000\000\000\003\141\003\141\000\000\000\000\ru\000\000\000\000\005\133\ru\000\000\003\141\000\000\003\141\000\000\000\000\003\141\000\000\000\000\000\000\ru\003\141\003\141\003\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\141\000\000\000\000\000\000\003\141\000\000\000\000\000\000\000\000\rN\000\000\000\000\015&\tE\000\000\tE\tE\000\000\003\141\003\141\003\141\000\000\003\141\003\141\r\134\r\158\r\166\r\142\r\174\000\000\005\133\000\000\000\000\000\000\000\000\000\000\000\000\003\141\000\000\r\182\r\190\003\141\000\000\000\000\000\000\000\000\001}\000\000\000\000\000\000\000\000\r\198\003\141\000\000\000\000\016\218\000\000\000\000\000\000\000\246\rN\000\000\000\000\007m\000\000\000\000\001}\007m\rV\r\150\r\206\r\214\r\230\000\000\000\000\r\134\r\158\r\166\r\142\r\174\018b\r\238\000\000\000\000\000\000\000\000\000\000\016\158\000\000\000\000\r\182\r\190\000\000\r\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\000\000\000\000\000\000\014\022\000\246\014\030\r\222\000\000\000\000\000\000\000\000\tE\r\254\rV\r\150\r\206\r\214\r\230\000\000\000\000\014\006\014\014\000\000\000\000\007m\000\000\r\238\000\000\000\000\000\000\000\000\000\000\001}\000\000\000\000\001y\000\000\000\000\r\246\000\000\000\000\000\000\000\000\016\222\000\000\000\000\000\000\000\000\000\000\rN\000\000\000\000\000\000\019\234\014\022\001y\014\030\r\222\000\000\000\000\000\000\000\000\001}\r\254\r\134\r\158\r\166\r\142\r\174\000\000\001}\014\006\014\014\000\000\000\000\000\000\000\000\000\000\000\000\r\182\r\190\000\000\000\000\001\138\002F\002J\002\138\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\000\000\000\000\022B\000\000\000\246\000\000\004\189\000\000\007v\0012\002N\000\000\002^\rV\r\150\r\206\r\214\r\230\000\000\000\000\002j\022F\000\000\000\000\000\000\000\000\r\238\000\000\022n\000\000\000\000\000\000\001y\000\000\000\000\002n\003\002\003\030\r\246\000\000\000\000\000\000\003\n\021Z\001\130\003*\0036\000\000\021\214\000\000\000\000\003B\000\000\000\000\014\022\019\238\014\030\r\222\019\250\000\000\000\000\000\000\001y\r\254\021\222\000\000\000\000\000\000\003F\000\000\001y\014\006\014\014\000\181\000\000\000\000\000\181\000\000\000\000\000\000\000\000\000\000\021\230\022\230\000\000\000\000\000\000\000\181\000\000\000\181\000\000\000\181\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\246\000\181\000\000\000\000\000\000\003v\000\000\003zr\000\000\000\000\000\185\001ve\000\000\000\000\003e\t\029\001\193\001\225\000\000\000\000\001\193\001\225\000\000\001\225\000\000\003e\000\000\000\000\000\000\003e\000\000\003e\000\000\000\000\001\193\001\193\001\225\000\000\001\193\001\193\000\000\000\000\000\000\001\225\003e\005\198\005\129\000\000\000\000\000\000\001\193\003e\003\006\001\225\000\000\001\225\001\193\001\193\001\225\000\000\000\000\000\000\001\193\001\225\001\225\001\225\003e\000\000\001\193\b\189\000\000\003e\003e\003e\b\189\000\000\000\000\b\189\000\000\001\225\001\225\000\000\000\000\003\182\000\000\000\000\000\000\003e\b\189\000\000\b\189\000\000\b\189\000\000\b\189\000\000\000\000\001\225\001\225\000\000\000\000\001\225\001\225\000\000\000\000\003e\003e\b\189\000\000\003e\003e\000\000\000\000\001\225\b\189\b\189\000\000\000\000\000\000\000\000\001\225\000\000\000\000\000\000\b\189\001\225\b\189\005\234\003e\b\189\000\000\001\225\000\000\000\000\b\189\b\189\000\246\000\000\000\000\000\000\rm\000\000\000\000\000\000\000\000\rm\000\000\000\000\rm\000\000\b\189\000\000\000\000\000\000\b\189\000\000\000\000\000\000\000\000\rm\000\000\rm\000\000\rm\000\000\rm\000\000\000\000\b\189\b\189\b\189\000\000\b\189\b\189\000\000\000\000\000\000\000\000\rm\000\000\000\000\000\000\000\000\000\000\b\189\rm\rm\b\189\000\000\000\000\000\000\b\189\000\000\000\000\000\000\rm\000\000\rm\000\000\000\000\rm\000\000\b\189\000\000\000\000\rm\rm\rm\000\000\ri\000\000\000\000\000\000\000\000\ri\000\000\000\000\ri\000\000\000\000\000\000\rm\000\000\000\000\000\000\rm\000\000\000\000\ri\000\000\ri\000\000\ri\000\000\ri\000\000\007I\007I\000\000\rm\rm\rm\000\000\rm\rm\000\000\000\000\ri\000\000\000\000\000\000\000\000\000\000\003:\ri\ri\007I\007I\rm\007I\000\000\000\000\rm\000\000\ri\000\000\ri\007I\000\000\ri\000\000\004R\000\000\rm\ri\ri\ri\000\000\000\000\000\000\006\025\000\000\007I\007I\007I\006\025\000\000\000\000\006\025\007I\ri\007I\007I\007I\ri\000\000\000\000\000\000\007I\006\025\000\000\006\025\000\000\006\025\000\000\006\025\000\000\000\000\ri\ri\ri\000\000\ri\ri\000\000\007I\000\000\000\000\006\025\000\000\000\000\000\000\000\000\000\000\006\178\006\025\006\025\ri\000\000\000\000\000\000\ri\011N\000\000\000\000\006\025\000\000\006\025\000\000\000\000\006\025\000\000\ri\000\000\000\000\006\025\006\025\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001rm\000\000\002J\003m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\237\000\000\003m\000\000\001\237\000\000\003m\000\000\003m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\170\001\237\001\237\000\000\003m\001\237\001\237\000\000\000\000\000\000\000\000\003m\000\000\000\000\000\000\000\000\000\000\001\237\000\000\000\000\003\006\003m\000\000\003m\001\237\000\000\003m\000\000\000\000\000\000\000\000\003m\003m\003m\000\000\001\237\007\174\001\014\000\000\000\000\000\000\001*\000\000\bV\000\000\000\000\001.\003m\003m\000\000\000\000\003\182\000\000\000\000\000\000\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\003m\003m\t\210\000\000\003m\003m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\190\000\000\000\000\003m\019b\000\000\001~\000\000\000\000\000\000\003m\000\000\000\000\001\130\000\000\003m\b\154\000\000\000\000\000\000\b\158\003m\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\000\000\000\000\019r\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\012\194\000\000\000\000\019\150\000\000\b\226\007\190\000\000\000\000\000\000\n\014\003z\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\170\000\000\000\000\000\000\b\214\006\021\000\000\000\000\006\021\000\000\000\000\000\000\000\000\000\000\000\000\b\222\000\000\005\170\000\000\006\021\nV\006\021\000\000\006\021\000\000\006\021\000\000\000\000\000\000\000\000\000\000\006-\000\000\000\000\000\000\000\000\006-\012\194\006\021\006-\012\202\000\000\b\226\000\000\000\000\006\021\011\002\000\000\003z\000\000\006-\000\000\006-\000\000\006-\006\021\006-\006\021\000\000\000\000\006\021\000\000\000\000\000\000\000\000\006\021\006\021\000\246\000\000\006-\000\000\000\000\000\000\000\000\000\000\000\000\006-\006-\000\000\000\000\000\000\006\021\000\000\000\000\000\000\006\021\006-\000\000\006-\000\000\000\000\006-\000\000\000\000\000\000\000\000\006-\006-\006-\006\021\006\021\006\021\n\170\006\021\006\021\000\000\000\000\006)\000\000\000\000\006)\000\000\006-\000\000\000\000\000\000\006-\000\000\006\021\000\000\000\000\006)\006\021\006)\000\000\006)\000\000\006)\000\000\000\000\006-\006-\006-\006\021\006-\006-\000\000\000\000\000\000\000\000\006)\000\000\000\000\000\000\000\000\000\000\000\000\006)\011\002\006-\000\000\000\000\000\000\006-\000\000\000\000\000\000\006)\000\000\006)\000\000\000\000\006)\000\000\n\250\000\000\000\000\006)\006)\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rN\000\000\000\000\015&\006)\000\000\tE\015\n\006)\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\000\000\006)\006)\006)\000\000\006)\006)\000\000\000\000\r\182\r\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006)\r\198\000\000\000\000\006)\000\000\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\000\006)\000\000\000\000\rV\r\150\r\206\r\214\r\230\000\000\000\000\007\174\001\014\000\000\000\000\000\000\001*\r\238\bV\000\000\000\000\001.\000\000\017\014\000\000\000\000\000\000\000\000\000\000\r\246\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\014\022\000\000\014\030\r\222\000\000\000\000\000\000\000\000\007\190\r\254\000\000\000\000\019b\000\000\001~\000\000\000\000\014\006\014\014\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\001I\000\000\000\000\001I\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\000\000\001I\000\000\001I\000\000\001I\000\000\001I\b\222\000\000\005\170\000\000\000\000\019r\000\000\000\000\000\000\000\000\001E\000\000\001I\001E\000\000\000\000\000\000\000\000\000\000\001I\000\000\000\000\012\194\001I\001E\012\202\001E\b\226\001E\001I\001E\001I\000\000\003z\001I\000\000\000\000\000\000\000\000\001I\001I\000\246\000\000\001E\000\000\000\000\000\000\000\000\000\000\001I\001E\000\000\000\000\000\000\001E\001I\000\000\000\000\000\000\001I\001E\000\000\001E\000\000\000\000\001E\000\000\000\000\000\000\000\000\001E\001E\000\246\001I\001I\001I\000\000\001I\001I\003e\001E\000\000\003e\000\000\000\000\000\000\001E\000\000\000\000\001I\001E\000\000\000\000\003e\000\000\000\000\001I\003e\000\000\003e\000\000\000\000\000\000\000\000\001E\001E\001E\001I\001E\001E\000\000\000\000\003e\005\198\000\000\000\000\000\000\000\000\000\000\003e\001E\000\000\000\000\000\000\000\000\000\000\000\000\001E\000\000\003e\000\000\003e\000\000\000\000\003e\000\000\000\000\n\170\001E\003e\003e\003e\004\181\000\000\000\000\004\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003e\004\181\000\000\000\000\003e\004\181\000\000\004\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003e\003e\004\181\000\000\003e\003e\000\000\000\000\000\000\004\181\011\002\000\000\000\000\004\181\000\000\000\000\003e\000\000\000\000\004\181\000\000\004\181\005\234\003e\004\181\000\000\000\000\000\000\003e\004\181\006\138\000\246\000\000\000\000\003e\000\000\000\000\000\000\004\181\004\181\000\000\000\000\000\000\000\000\000\000\004\181\004\181\000\000\000\000\004\181\000\000\000\000\003\021\003\021\000\000\000\000\000\000\003\021\000\000\003\021\000\000\000\000\003\021\004\181\004\181\000\000\000\000\004\181\004\181\000\000\000\000\000\000\003\021\000\000\000\000\003\021\000\000\000\000\000\000\004\181\003\021\000\n\000\000\003\021\000\000\000\000\004\181\000\000\000\000\000\000\000\000\006\222\000\000\000\000\003\021\000\000\000\000\004\181\003\021\000\000\003\021\007\174\001\014\000\000\000\000\000\000\001*\003\021\bV\000\000\003\021\001.\000\000\003\021\003\021\000\000\003\021\000\000\003\021\003\021\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\003\021\t\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\254\003\021\007\190\003\021\000\000\000\000\017\202\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\003\021\rN\000\000\000\000\000\000\000\000\003\021\000\000\015\198\000\000\000\000\b\214\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\b\222\000\000\005\170\000\000\000\000\000\000\000\000\000\000\000\000\r\182\r\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\017\218\000\000\b\226\000\000\000\246\rN\000\000\000\000\003z\000\000\000\000\017\030\000\000\rV\r\150\r\206\r\214\r\230\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\r\238\000\000\000\000\000\000\000\000\000\000\016\158\000\000\000\000\r\182\r\190\000\000\r\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\000\000\000\000\000\000\014\022\000\246\014\030\r\222\000\000\000\000\000\000\000\000\016\174\r\254\rV\r\150\r\206\r\214\r\230\000\000\000\000\014\006\014\014\000\000\000\000\000\000\000\000\r\238\000\000\000\000\000\000\000\000\000\000\017\014\000\000\000\000\000\000\000\000\000\000\r\246\007\174\001\014\000\000\000\000\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\000\000\014\022\000\000\014\030\r\222\000\000\0012\000\000\000\000\b\130\r\254\000\000\000\000\000\000\007\178\000\000\000\000\t\210\014\006\014\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\190\000\000\000\000\000\000\n\014\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\000\000\000\000\nV\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\190\000\000\b\226\007\190\000\000\000\000\000\000\n\014\003z\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\001u\000\000\012\213\001u\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\012\213\000\000\001u\000\000\001u\000\000\001u\000\000\001u\b\222\000\000\005\170\000\000\000\000\nV\000\000\000\000\000\000\000\000\000\000\000\000\001u\000\000\000\000\000\000\000\000\000\000\000\000\001u\012\213\000\000\000\000\000\000\000\000\021.\000\000\b\226\012\213\000\000\000\000\000\000\000\000\003z\001u\000\000\000\000\007\174\001\014\001u\001u\001u\001*\000\000\000\000\000\000\000\000\001.\0019\000\000\000\157\0019\t\026\000\000\005f\001u\000\000\0012\000\000\012\213\000\157\000\000\0019\000\000\0019\007\178\0019\000\000\0019\000\000\000\000\000\000\000\000\001u\001u\001u\000\000\001u\001u\007\190\000\000\0019\000\000\007\202\000\000\001~\000\000\000\000\0019\000\157\000\000\000\000\001\130\000\000\000\000\b\154\001u\000\157\000\000\b\158\000\000\b\162\b\198\0019\b\210\000\000\000\000\001u\0019\0019\0019\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0019\007\174\001\014\b\222\000\157\005\170\001*\t\030\bV\000\000\000\000\001.\000\000\000\000\000\000\000\000\000\000\000\000\0019\0019\0019\0012\0019\0019\b\130\000\000\000\000\007\002\000\000\007\178\b\226\000\000\t\210\000\000\011\214\000\000\003z\000\000\000\000\000\000\000\000\0019\000\000\007\190\000\000\000\000\000\000\025\174\000\000\001~\000\000\000\000\0019\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\000\000\000\000\004\157\004\157\000\000\000\000\000\000\004\157\b\222\000\000\005\170\000\000\004\157\025\178\000\000\000\000\000\000\000\000\004\157\000\000\000\000\000\000\004\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\157\025\230\000\000\026\238\025\254\b\226\000\000\000\000\000\000\000\000\000\000\003z\000\000\000\000\004\157\000\000\000\000\000\000\004\157\004\157\004\157\000\000\000\000\000\000\000\000\000\000\000\000\004\157\000\000\000\000\004\157\000\000\000\000\000\246\004\157\000\000\004\157\004\157\000\000\004\157\000\000\000\000\000\000\000\000\000\000\001\n\001\014\000\000\000\000\000\000\001*\004\157\000\000\000\000\000\000\001.\000\000\000\000\000\000\000\000\006\197\000\000\004\157\000\000\004\157\0012\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001:\000\000\000\000\000\000\000\000\000\000\000\000\004\157\000\000\001n\000\000\001~\000\000\004\157\000\000\000\000\000\000\000\000\001\130\000\000\000\000\011\130\000\000\000\000\000\000\011\134\011\138\011\150\000\000\000Y\b\210\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y\003e\000\000\000Y\003e\000\000\000\000\000Y\000Y\000\000\b\217\000\000\b\222\000\000\005\170\003e\000\000\000\000\000\000\003e\000\000\003e\000\000\011\158\000\000\011\162\000\000\000\000\000\000\000Y\000\000\000\000\000Y\000\000\003e\005\198\000\000\000Y\000\000\b\226\011\178\003e\000\000\000Y\012*\003z\000\000\000\000\000Y\000Y\000Y\003e\000\000\003e\000\000\000\000\003e\000Y\000Y\000\000\000\000\003e\003e\003e\000\000\000\000\000\000\000\000\000Y\000\000\000\000\003e\000Y\000\000\003e\000\000\000\000\003e\000\000\000\000\000\000\003e\000\000\000\000\000Y\003e\000\000\000Y\000\000\003e\000\000\003e\000\000\000\000\b\217\003e\003e\006\230\000Y\003e\003e\000Y\000\000\000\000\003e\005\198\000\000\000\000\000\000\000\000\000\000\003e\000\000\000\000\000Y\000\000\000\000\005\234\003e\000\000\000\000\003e\000\000\003e\000\000\000\000\003e\000\000\000\000\000\000\000\000\003e\003e\003e\001\n\001\014\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\000\000\000\000\003e\000\000\006\237\000\000\003e\000\000\000\000\0012\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\003e\003e\007:\000\000\003e\003e\001:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\001~\000\000\000\000\000\000\000\000\005\234\003e\001\130\000\000\000\000\011\130\003e\000\000\000\000\011\134\011\138\011\150\000\000\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\000\000\000\000\001*\000\000\bV\000\000\000\000\001.\b\222\000\000\005\170\000\000\000\000\000\000\000\000\000\000\000\000\0012\000\000\011\158\b\130\011\162\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\000\000\000\000\b\226\011\178\026.\000\000\007\190\012*\003z\000\000\025\174\000\000\001~\000\000\000\000\006}\000\000\000\000\006}\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\006}\n&\b\210\000\000\006}\000\000\006}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\012\205\000\000\006}\012\205\000\000\000\000\000\000\000\000\b\222\006}\005\170\000\000\000\000\000\000\012\205\000\000\000\000\000\000\012\205\006}\012\205\006}\000\000\000\000\006}\000\000\000\000\005y\000\000\006}\006}\000\246\000\000\012\205\000\000\b\226\000\000\000\000\000\000\000\000\012\205\003z\000\000\000\000\000\000\006}\000\000\000\000\000\000\006}\012\205\000\000\012\205\000\000\000\000\012\205\000\000\000\000\000\000\000\000\012\205\012\205\000\000\006}\006}\006J\000\000\006}\006}\000\000\000\000\000\000\007\174\001\014\000\000\000\000\012\205\001*\000\000\006}\012\205\000\000\001.\000\000\000\000\000\000\006}\006\201\000\000\ta\000\000\000\000\0012\000\000\012\205\012\205\002\242\006}\012\205\012\205\007\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\205\000\000\000\000\000\000\007\190\000\000\000\000\012\205\007\202\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\012\205\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\b\198\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\000\000\t\030\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\005\205\000\000\000\000\005\205\000\000\b\226\007\190\ta\000\000\000\000\011\238\003z\001~\000\000\005\205\000\000\000\000\000\000\005\205\001\130\005\205\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\005\205\000\000\000\000\000\000\000\000\000\000\000\000\005\205\000\000\000\000\b\214\000\000\000\000\000\000\011N\000\000\000\000\005\205\000\000\005\205\000\000\b\222\005\205\005\170\000\000\000\000\000\000\005\205\005\205\000\246\000\000\005\209\000\000\000\000\005\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\205\005\205\005\209\000\000\005\205\b\226\005\209\000\000\005\209\000\000\000\000\003z\000\000\000\000\000\000\000\000\000\000\000\000\005\205\005\205\000\000\005\209\005\205\005\205\000\000\000\000\000\000\000\000\005\209\000\000\000\000\000\000\000\000\000\000\000\000\011N\000\000\000\000\005\209\003e\005\209\005\205\003e\005\209\000\000\000\000\000\000\000\000\005\209\005\209\000\246\000\000\005\205\003e\000\000\000\000\000\000\003e\000\000\003e\000\000\000\000\000\000\000\000\005\209\005\209\000\000\000\000\005\209\000\000\000\000\000\000\003e\005\198\000\000\000\000\000\000\000\000\000\000\003e\000\000\000\000\005\209\005\209\000\000\000\000\005\209\005\209\000\000\003e\000\000\003e\000\000\000\000\003e\000\000\000\000\000\000\000\000\003e\003e\003e\000\000\000\000\000\000\005\209\000\000\000\000\000\000\000\000\000\000\012\141\000\000\001\014\012\141\003e\005\209\029\230\000\000\003e\000\000\000\000\029\234\000\000\000\000\012\141\000\000\000\000\000\000\000\000\000\000\012\141\000\000\003e\003e\022\"\000\000\003e\003e\000\000\000\000\000\000\000\000\000\000\012\141\000\000\000\000\000\000\000\000\000\000\000\000\012\141\000\000\000\000\000\000\005\234\003e\000\000\001\150\000\000\001~by\by\001\241\001\241\000\000\by\000\000\000\000\000\000\000\000\by\006\129\000\000\000\000\001\241\006\129\bF\000\000\000\000\000\000\by\001\241\000\000\000\000\000\000\000\000\006\014\000\000\by\006\129\006\129\000\000\001\241\006\129\006\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\by\000\000\000\000\006\129\by\by\by\007\174\001\014\000\000\006\129\000\000\001*\by\000\000\000\000\by\001.\000\000\000\000\by\006\129\by\by\t\134\by\000\000\0012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\178\000\000\by\n\170\000\000\000\000\000\000\000\000\007u\000\000\000\000\007u\000\000\by\007\190\by\000\000\000\000\007\202\000\000\001~\000\000\007u\000\000\000\000\000\000\007u\001\130\007u\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\b\198\000\000\b\210\by\007u\000\000\000\000\000\000\000\000\by\000\000\007u\011\002\000\000\b\214\000\000\012\205\000\000\000\000\012\205\000\000\007u\000\000\007u\000\000\b\222\007u\005\170\000\000\t\030\012\205\007u\007u\000\246\012\205\000\000\012\205\000\000\000\000\000\000\000\000\000\000\000\000\005y\000\000\000\000\000\000\007u\000\000\012\205\000\000\007u\b\226\000\000\t\194\000\000\012\205\000\000\003z\000\000\000\000\000\000\000\000\000\000\000\000\007u\007u\000\000\000\000\007u\007u\012\205\000\000\000\000\000\000\000\000\012\205\012\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007u\000\000\000\000\000\000\012\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002F\002\246\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\012\205\012\205\002\242\000\000\012\205\012\205\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\002\250\004\181\012\205\000\000\004\181\000\000\006~\002j\000\000\012\205\000\000\000\000\000\000\000\000\000\000\004\181\000\000\000\000\000\000\004\181\012\205\004\181\002\254\003\002\003\030\000\000\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\004\181\000\000\000\000\000\000\005byj\000\000\012\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\205\000\000\002\254\003\002\003\030\000\000\000\000\007q\000\000\003\n\007q\001\130\003*\0036\000\000\000\000\000\000\000\000\005b\000\000\005j\007q\000\000\000\000\000\000\007q\000\000\007q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\006u\000\000\007q\006u\000\000\000\000\000\000\000\000\000\000\007q\005\170\022\002\000\000\000\000\006u\000\000\000\000\000\000\006u\007q\006u\007q\005\174\000\000\007q\000\000\000\000\000\000\000\000\007q\007q\000\000\000\000\006u\000\000\000\000\000\000\000\000\000\000\005\178\006u\000\000\000\000\000\000\000\000\007q\000\000\000\000\000\000\007q\006u\000\000\006u\000\000\000\000\006u\000\000\000\000\000\000\000\000\006u\006u\000\000\007q\007q\021\134\000\000\007q\007q\001a\000\000\000\000\001a\000\000\000\000\000\000\006u\000\000\000\000\000\000\006u\000\000\000\000\001a\000\000\001a\007q\001a\000\000\001a\000\000\000\000\000\000\000\000\006u\006u\000\000\000\000\006u\006u\0129\000\000\001a\0129\000\000\000\000\000\000\000\000\000\000\001a\000\000\000\000\000\000\000\000\0129\000\000\000\000\006u\0129\000\000\0129\000\000\000\000\000\000\001a\000\000\000\000\000\000\000\000\001a\001a\000\246\000\000\0129\000\000\000\000\000\000\000\000\000\000\000\000\0129\000\000\000\000\000\000\000\000\001a\000\000\000\000\000\000\000\000\0129\000\000\0129\000\000\000\000\0129\000\000\000\000\000\000\000\000\0129\000\000\000\000\001a\001a\001a\000\000\001a\001a\012=\000\000\000\000\012=\000\000\000\000\000\000\0129\r2\000\000\000\000\0129\000\000\000\000\012=\000\000\000\000\001a\012=\000\000\012=\000\000\000\000\000\000\000\000\0129\0129\000\000\001a\0129\0129\000\000\000\000\012=\000\000\000\000\000\000\000\000\000\000\000\000\012=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0129\000\000\012=\000\000\012=\000\000\000\000\012=\000\000\000\000\000\000\014&\012=\000\000\000\000\007\174\001\014\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\000\000\000\000\012=\rB\000\000\000\000\012=\000\000\000\000\0012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\178\000\000\000\000\012=\012=\000\000\000\000\012=\012=\000\000\000\000\000\000\000\000\000\000\007\190\000\000\000\000\000\000\n*\000\000\001~\000\000\000\000\000\000\000\000\000\000\012=\001\130\004\141\000\000\b\154\004\141\000\000\000\000\b\158\000\000\b\162\014&\000\000\b\210\000\000\000\000\004\141\000\000\000\000\000\000\004\141\n\170\004\141\000\000\000\000\b\214\005\217\000\000\000\000\005\217\000\000\000\000\000\000\000\000\000\000\004\141\b\222\000\000\005\170\000\000\005\217\000\000\004\141\000\000\005\217\000\000\005\217\000\000\000\000\000\000\000\000\000\000\004\141\000\000\004\141\000\000\000\000\004\141\000\000\005\217\000\000\000\000\004\141\b\226\000\000\000\000\005\217\011\002\000\000\003zu\004\165\000\000\004u\004\165\000\000\000\000\000\000\000\000\004\165\000\000\000\000\000\000\004\133\004u\000\000\000\000\000\000\004u\000\000\004u\000\000\000\000\000\000\024:\004\165\000\000\000\000\000\000\004\165\000\000\000\000\000\000\004u\000\000\000\000\000\000\000\000\000\000\000\000\004u\000\000\000\000\004\165\004\165\000\000\000\000\004\165\004\165\000\000\004u\000\000\004u\000\000\000\000\004u\000\000\000\000\002F\002J\004u\000\000\000\000\000\000\000\000\000\000\004\165\000\000\000\000\000\000\000\000\000\000\000\000\001v\000\000\005f\004u\025.\0012\002N\004u\002^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002j\000\000\000\000\000\000\000\000\004u\004u\000\000\002r\004u\004u\000\000\000\000\000\000\000\000\002n\003\002\003\030\004\181\000\000\012\157\004\181\003\n\012\157\001\130\003*\0036\000\000\004u\000\000\000\000\003B\004\181\000\000\012\157\000\000\004\181\000\000\004\181\027\014\012\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\001\138\000\000\004\181\006\146\012\157\000\000\000\000\000\000\000\000\004\181\000\000\012\157\000\000\000\000\007r\000\000\003N\000\000\004\201\000\000\007v\012\157\000\000\012\157\004\181\000\000\012\157\000\000\000\000\004\181\006\138\012\157\000\000\007\130\005.\000\000\000\000\000\000\000\000\000\000\021r\003v\000\000\003z\000\000\004\181\000\000\012\157\000\000\000\000\b:\012\157\027:\000\000\000\000\021Z\000\000\000\000\ry\ry\021\214\000\000\000\000\004\181\004\181\012\157\012\157\004\181\004\181\012\157\000\000\000\000\000\000\000\000\000\000\003Z\021\222\029\214\ry\ry\000\000\ry\n\190\000\000\000\000\000\000\004\181\000\000\012\157\ry\000\000\000\000\000\000\000\000\021\230\022\018\000\000\000\000\004\201\004\201\000\000\002F\002J\0146\ry\ry\ry\000\000\000\000\000\000\000\000\ry\000\000\ry\ry\ry\000\000\025\150\000\000\000\000\ry\0012\003\022\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002j\000\000\000\000\000\000\000\000\ry\000\000\002F\002J\020\194\000\000\000\000\000\000\000\000\000\000\002n\003\002\003\030\000\000\002F\002J\0212\003\n\000\000\001\130\003*\0036\0012\003\022\000\000\002^\003B\000\000\000\000\000\000\000\000\000\000\000\000\002j\0012\003\022\000\000\002^\000\000\000\000\000\000\000\000\000\000\003F\000\000\002j\000\000\000\000\002n\003\002\003\030\000\000\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\002n\003\002\003\030\000\000\003B\004\149\000\000\003\n\004\149\001\130\003*\0036\000\000\000\000\004}\000\000\003B\004}\000\000\004\149\000\000\003F\000\000\004\149\000\000\004\149\000\000\000\000\004}\000\000\000\000\000\000\004}\003F\004}\000\000\000\000\000\000\004\149\000\000\000\000\000\000\000\000\000\000\000\000\004\149\000\000\004}\000\000\000\000\000\000\000\000\000\000\000\000\004}\000\000\000\000\000\000\000\000\000\000\004\149\000\000\000\000\000\000\000\000\004\149\000\000\000\000\000\000\004}\000\000\000\000\000\000\000\000\004}\000\000\000\000\004\173\000\000\000\000\004\173\004\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004}\004\173\000\000\000\000\000\000\004\173\000\000\004\173\000\000\004\149\004\149\000\000\000\000\004\149\004\149\000\000\000\000\000\000\004}\004}\004\173\000\000\004}\004}\000\000\000\000\000\000\004\173\000\000\000\000\000\000\000\000\004\149\000\000\000\000\000\000\000\000\001\138\000\000\000\000\006\146\004}\004\173\022\158\000\000\000\000\000\000\004\173\000\000\000\000\000\000\030.\024\198\000\000\000\000\000\000\000\000\007v\000\000\000\000\000\000\000\000\000\000\004\173\000\000\000\000\000\000\000\000\000\000\000\000\007\130\000\000\000\000\000\000\000\000\000\000\000\000\021r\000\000\000\000\000\000\004\173\004\173\000\000\000\000\004\173\004\173\b:\000\000\027:\000\000\000\000\021Z\000\000\000\000\000\000\000\000\021\214\000\000\000\000\000\000\000\000\002F\002J\004\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\222\000\000\025V\000\000\029\222\000\000\000\000\002F\002J\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\000\000\021\230\022\018\002j\000\000\004\241\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\002n\003\142\003\030\002j\000\000\000\000\025\150\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\000\000\003B\000\000\002n\003\154\003\030\002F\002J\000\000\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\003F\003B\000\000\000\000\000\000\000\000\002F\002J\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\003F\002j\000\000\000\000\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\002n\003\230\003\030\002j\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\000\000\003B\000\000\002n\003\254\003\030\002F\002J\000\000\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\003F\003B\000\000\000\000\000\000\000\000\002F\002J\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\003F\002j\000\000\000\000\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\002n\004\186\003\030\002j\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\001\138\000\000\000\000\002\138\003B\000\000\002n\004\210\003\030\000\000\000\000\000\000\000\000\003\n\022B\001\130\003*\0036\004\189\000\000\007v\003F\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022F\000\000\000\000\000\000\000\000\000\000\003F\022n
  
  and lhs =
    (8, "\012\011\n\t\b\007\006\005\004\003\002\001\000\228\228\227\227\226\225\225\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\223\223\222\221\221\221\221\221\221\221\221\220\220\220\220\220\220\220\220\219\219\219\218\218\217\216\216\216\215\215\214\214\214\214\214\214\213\213\213\213\213\213\213\212\212\212\212\212\211\211\211\211\210\209\208\208\207\207\207\207\206\206\206\206\205\205\205\205\204\204\204\204\203\203\203\202\202\202\202\201\200\200\200\199\199\198\198\197\197\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\195\195\194\194\193\192\191\190\190\189\189\188\188\188\188\187\187\186\186\185\184\184\184\184\183\182\181\181\180\180\179\179\178\177\177\176\176\175\174\174\173\172\171\171\171\170\170\169\168\168\168\168\168\168\167\167\167\167\167\167\167\167\167\167\167\167\167\166\166\166\166\166\166\166\166\166\165\165\164\164\164\163\163\162\162\162\161\161\160\160\159\159\158\158\157\157\156\156\155\155\154\154\153\153\152\152\151\151\151\150\150\150\150\149\149\148\148\147\147\146\146\146\146\146\145\145\145\145\144\144\143\143\143\142\141\141\140\140\140\139\139\139\139\139\139\139\138\138\138\138\138\138\138\137\137\136\136\135\135\135\135\135\135\134\134\133\133\132\132\131\131\130\130\129\128\128\128\127\127~~~~~~~~~}}|{{{{{{{{{zyxxwwwwvvvvvuttssrrrrrrrrrrrrrrqqppooooooooooooooooooooooooooooooonnmmllkkjjiihhggffeeddccccccba`r\r")
  
  and goto =
    ((16, "\000%\001}\000G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000&\000\006\000`\001U\000f\002v\000\000\000\000\000\235\000\234\004\b\000\227\001N\006\030\000\000\000\000\000\000\025r\000\217\001\150\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\198\000\000\bv\000\000\000\000\025r\000\000\000P\001n\000,\001\248\000F\001n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\212\000\000\000\000\000\000\000\000\000\000\002B\000\000\000\000\000\000\002h\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000O\004\000\000\000\000\002\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000A`\002\176\003\138\000\201\000\000\004\018H\222\003\206\005\b\000`\000\000\000\000\000\000\006(\000\000\000\000\000\138\000\000\000\000\000\000\000\000\005\\\000\000\004,\000\000\000\000\000\000\000\000\000\000\000L\000\000\001\182\005\178\t$\000\000'\156A`\001 \000\000\005>\000\000\018\244\004\186\000\000\000\000\007\230\017F\005J\000\000 \192\005j\000\000;\144-\016\0009\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000;\248\005&\000\000\000\000\000\000\002\016\020\142\000\000\003\162\024\012\000\000\000\000\t\244\000\000\000\000\005\174\001\222\000\000\000\000\005\174\r&\005\174\000\000\000\000\024\\\025\238\000\000\005\184\028Z\000\000\000\000\000\000\000\000\007\206\029T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000C\142\000\000\005\160\005\242\000\000C\020\005\190\rD\000\000\000\000\000\000\005\158\000\000\000\000\000\000\000\000\005Z\000\000\000\000\000\000\000\000\000\000<8\000\000\000\000\000\000\000\000\000\000\000\000\000\018\006^\000\000\000\000\000\000\000\000\011\228\030b\000\000\000\000\000\000\000\000\016\236\031\132\000\000\000\000\000\000\000\000\005\254\000\000G\210\000\000\007F\000\000\007\162\005\214\000\000\000\000\005\174\n.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006Z\004`\000\000\000\000O\030\005Z\005Z\000\000O:\005Z-\016\000\000\000\176\000\000\000\000\000\000\000\000\000\000L\246\007\250\000\000\b\006\000\000\000\000\000\000\001X\000\000\000\000\000\000\000\000\002\248\000\000\000\000\000\000\006\006\000\028\003l\000\000\000\000\000\000\014\198\005\174\000\000\005\174\003`\000\000\015\204\005\174\005\174\bD\000\000\000\000\006\026\002\248\000\000\000\000\000\000\005Z\000\000\0068\bh\000\000\004\018\000\000\000\000\000\000\000\000\005Z\001\170\002.\004(\000\000\000\000\000\000\000\000\004N\000\000\000\000\000\000\000\000\000\000\t4\0070\000~\000x\001\242\006B\b\152\006\172\b\188\006\228\005\178\007^\000\166Op\005ZO\176\005Z\002\228\000\000\000\000\000\000\007^\000\000\001(\003\160\006\006\000\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\206\000\000\000\000\0040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0068\000\250\t \000\000\000\000\007J\007\196\007\148\003\024\000\000\000\000\007\154\002\186\b*\000\000\007,\000\000\000\000\000\000\006\218\007\n\t,\000\183\000\000\tF\005\154\007F\tV\007,C\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000'0\000\000\007\132\t\146\b.\000\000\000\000\000\000\000\000\000$\000\000\000\000\t\172\000\159\000\140\t\192(\028\000\000\000\000\007\198\t\198\b\220\007\202\n\028\n\006\n\166\000\000(D\b\006\n$\t\b\000\000<\128\005\158\">\000\000\b`\b\204\000\000P\026\005Z\000\000\000\000\000\000\000\000\000\000\000\000\b\244\t\006\t\242\n\2429T<\228=J\000\157\000\000\000\000\000\000\t\240PF\005Z\n\012D&\tz\n,P\000\000\000\007\168\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\011\004DZ\000\000\t\238\n:D\150\000\000\000\000\000\000D\246\t\200E:\t\200\000\000EZ\t\200\000\000E\246\t\200\t\200\t\200\000\000F*\t\200Fl\t\200\006\228\000\000=J\000\000\000\000\000\000\t\200=\128\000\000\000\000\000\000\t\200\000\000\000\139\n\176\000\000\000\000\000\000\000\000\000\000\000\000J:\n\228\000\000=\180>p\t\200Pp\005Z\n\198\000\000\000\000\n\204\000\000\000\000\000\000\000\000'0\n\180\n\194\000\000\000\000%@PD'0\000\000F\230\t\200\000\000\t\200\000\000P\156\005Z\000\000\000\000\n\252\n*\n4\nD\n^\002l\np\001\140\011\006\000\000\000\000\001N\006\222\n\136\001\168\n\196\000\000\000\000\t\226\000\000\007>\003@\b\224\000\235\012B\000\000\000\000U\012\000\000U\016\011\216\000\000\003\148\000\000\001j\000\000\000\000\003\158\000\000\000\000\000\000\012T\000\000\nf\007>\000\000\000\000\011\014\000\000\000\000\000\000\000\000\000\000\000\000\007>\000\000\007>\000\000\000\000\002\240\000\000\000\250\000\140\000\000\000\250\000\000\rn\007>\000\000\000\000\000\000\000\000\000\000\000\250\011\222\0126\012\148\012\030\011\204(\206\012@\000\000#\206)&\011\030\n\142H\164\011$\n\146\012\232\011,\n\154\r\b\011@\n\168:\022>|\t\200\014\018\011D\n\188M\026'0\011\236\000\000JT\014n\011V\n\198G\n\t\200\014\150\011X\n\222GF\t\200\014\204J\178\000\000\000\000\000\000\000\000\000\000\t:\b\212\000\000\000\000\000\000\011v\n\242\004N\000\250\r\130\007>\000\000\000\000\000\0009T\000\000Q\"\005Z\015 \011\134\011\028P\234\000\000T\190\000\000\000\000\016\022)\200\000\023\000\000\000\000\012\218Q:\005ZMn\005ZQx\005Z\000\000\000\000\000\000\000\000\000\000T\216\000\000\000\000\000\000\007\\\016R\000\000\000\000\000\000)\242U\\\000\000\000\000\000\000\000\000\000\000\011V\016\158\000\000\000\000\011r\016\200\000\000\000\165*\170\000\165*\212\000\165\000\000U\210\000\000*\252\000\165\017\"\001 \017\150\000\000\000\000+\162\000\165+\222\000\165,\132\000\165,\168\000\165-p\000\165-\144\000\165-\204\000\165.B\000\165.\154\000\165.\246\000\165/L\000\165/\168\000\165/\254\000\1650Z\000\1650\176\000\1651\012\000\1651b\000\1651\190\000\1652\020\000\1652p\000\165\011H>\150G\192Mn\012\\\000\000Q\152\005Z\018P\000\000\000\000R\004\005Z\018\156\000\000\000\000\018\166\000\000\000\000\000\000?4\000\000\019\136\000\000\000\000\000\000\000\000R\028\005Z\019\212\000\000\011\174\020.\000\000G\136\t\200G\252\t\200H\154\t\200\t\188\000\000\000\000\000\000\000\000H\190\t\200\003\190\000\000\000\000\000\000\000\165\020X\000\000\000\0002\198\000\165\000\000\000\000\000\000\020\206\000\000\000\000\000\165\021R\000\000\021\214\000\000\000\000\0224\000\000\000\000\000\000U\224\000\000\000\000\022^\000\000\000\0003\"\000\165\022\136\000\000\000\0003x\000\165\022\230\000\000\000\0003\212\000\165\b\022\023\238\000\000\000\0004*\000\165\024\016\000\000\000\0004\134\000\1654\220\000\165\000\00058\000\165\000\000\000\000\023j\000\000\000\0005\142\000\165\024b\000\000\000\0005\234\000\165\024\182\000\000\000\0006@\000\165\000\0006\156\000\165\000\000\004\210\000\000\000\000\000\165\000\000\000\000\025\024\000\000\000\000\025\156\000\000\000\000\000\000\011\174\025\232\000\000\000\000\026B\000\000?P\000\000\000\000J\178\000\000\000\000\026\156\000\000\000\000\000\000\000\165\000\236\011\2146\242\000\139\000\000\000\000\000\000\000\157\011fI\b\t\2007N\000\1657\164\003\250\000\000\000\0008\000\000\165\000\000\000\000\000\000\000\000\026\232\000\000\000\000\000\000\000V\003\140\011\2368V\002\022\000\000\000\000\000\000\000\000\000\000\r.\000\000\000\000\021*\000\000\005f\000\000\004\144\000\000\012\204\000\000\006B\000\000\000\000\000\000\000\000\000\000\t:\000\000\000\000\012\030\027\018\000\000\027l\000\000\000\000\000\000\027\184\000\000\000\000\028\018\012.\028\154\000\000\028\252\000\000\000\000\000\000'0\012\228\000\000Jn\016\134\005\174\029\030\000\000J\166\000\000\000\000?p\000\000\000\000\000\000J\218\000\000\000\000\029\162\000\000\029\196\000\000\000\000\000\000\000\000?\146\000\000\000\000\000\0008\178\000\1659\b\000\165\000\000\000\000\000\000\000\000\000\165\000\000\000\000\000\000\000\000\000\165\000\000\rl\000\000\000\000\000\000\000\000\000\000\000\000\002d\000\000\000\000\000\000\000\000\003J\000\000\000\000\011j\t\026\000\250\030\022\000\000\012Z\011\154\012\236\004\186\t\140\000\250\014\236\007>\012\028\000\250\000\000\030\208\000\000\004\192\000\000\012f\011\156\b\\\012\136\011\200\000\000\031&\000\000\011\246\rd@2\004\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r4\000\000\000\000\000\000'0\r\030\000\000@f\031\138\000\000\000\000\031\224\000\000\000\000\000\000A\004\000\000M\220\000\000RB\005Z T\000\000\000\000 \240\000\000\000\000\006\138\000\000\000\165\000\000\000\000:R\000\000\000\000:\\\000\000\000\165\000\000\017\016\007>\000\000\017\226\007>\000\000\019\\\007>\000\000\000\250\007>\000\000\t\200\000\000R\160\005Z\000\000\001\232\005p\012\004\r\024\000\000\000\000\r\216!T\000\000\000\000!\186\000\000\006\236\000\000\002@\000\000\000\000\000\000\000\000\000\000\000\000S\016\005Z\000\000\r\218!\220\000\000\000\000\"\130\000\000\005>\012&\r\132\000\000J\246\rV\rX\000\000S,\005Z\"\164\000\000\000\000S6\005Z\000\000#\006\000\000\005Z\000\000\006\248\000\000\005l\000\000\000\000\000\000\000\000\000\000\000\000;\002\000\000\000\000K\250K\b\rZ\000\000S\148\005Z#l\000\000\000\000#\142\000\000\000\000\002\212\003\000It\t\200$4\000\000\012\196\012\198\0128\012\232\r\142\020\164\007>\b\228\000\000\012:\rh\r\154\006@\t\174\rn\012V\r\180\006p\t\228\r|\000\000\000\000\006\160\n\150\000\000\004*\003\132\000\000\000\000\r2\012t\nl\000\000S\174\005Z\r\214\r\232\000\000\n\246\000\000\rj\012\178\t\152\r\146\004\168\012\240\011\004\000\000\r\026\011B\000\000\bF\031\130\r\134\r\160\rR\b2\011\146\000\000\rT\b\200\012|\000\000\r\204\r|\014h\000\000\tn\012\180\000\000\014p\000\000\021\026\007>\014D\r\148\014\132\000\000\022\"\007\178\014J\000\000\000\000\004\216\006.\012\234\000\000\0232\007>\r\022\000\000\005\218\000\000\014\000\r\162\n<\r\146\014\026\0146\r\168\015\194\000\000\014n\000\190\000\000\000\000\000\000\000\000\000\247\r\182\014jT\012\005Z\000\000\002,\r\236\015L\000\000\000\000\000\000\000\000\000\000\000\000T&\bF\000\000\r\242\015\190\000\000\000\000\000\000\000\000\000\000\000\000K\246\r\148\000\000\014\n\002Z\000\000\014\016\0142\006\212\000\000\0034D\194\000\000\005\134\000\000T\142\005Z\005Z\000\000\000\000\b\234\000\000\007\000\000\000\005\002\b\234\b\234\000\000\014VN\b\005ZT\240\005Z\014J\000\000\000\000\000\000\014\138\000\000\000\000\003L\000\000\b\250\015&\014X\016J\015\022\000\000\000\000\006\002\t\026\015^\000\000\000\000\014\138\016\180\015p\000\000\000\000\007\136\000\000!N\000\000\011\014@\212\005Z\000\000\011H%:\000\000\014\252\000\000\000\000\000\000\b\234\000\000\000\000\014\146\015\186\014\146\016\226\015\138\000\000\000\000\015\188\014\206\015\206\000\000\000\000\000\000)\030\000\000\000\000\000\000\000\000\000\000\000\000\014\240\000\000\015\162\014\154\023<\t\176\000\000\015\250\014\182\tR\000\000\017\012\016\200\014\244\016D\000\000\000\000\016N\014\218\n\012\000\000\000\000$v\016\244\015\002\016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005Z\016\028\015\022\017\134\0160\000\000LL'0\000\211\015$\016\012\002f\0152%\030\015\004\000\000\015>\015@\000\169\006\208\015B\007\000\015V\017.Af\015\020\000\000\015X\015Z\b\148\000\000\007jN\018\000\000\tx\000\000\015fLVL\154\n2\016\004\r\156\000\000 \174\004\210\000\000\002h\000\000\000\000\002h\000\000\000\000\002h\t\172\000\000\018\138\002h\0174A\216\015|\000\000\002h\000\000\019\004\000\000\000\000\002h\000\000\000\000\015\168\000\000\023\162\005\164\015\234\000\000\015jN^\016\014\000\000\000\000\000\000\016\018\000\000\000\000\006r\000\000\002h\028\172\000\000\028\006\002hL\190\000\000\016\"\016\146\015z\017\190\016v\000\000M\014\0164\016\180\000\000\000\000\000\000\007\030\n*\000\000\000\000\000\000\000\000\000\000\011V\000\000\011r\016:\000\000\016p\015\180\012\192\005\194\000\000\016\196\000\000\000\000\000\000\000\000\016B8\170\000\000\000\000\000\000\011V\000\000\011r\000\000\000\000\000\000\000\000\000\000\000\000\t\n\000\000\015\210\014:\t\230\000\000\016FH\206\000\000\000\000\000\000\000\000\000\000\000\000\017d\002\170\003\172\000\000\000\000\000\000\000\000\007\196\007\196%`\017\128\016\148\000\000\000\000\017t\003\020\b\164\000\000\000\000\000\000\007>\000\000\n\140\000\000\000\000\000\000\000\000\016\144\015\212\014X\000\250\000\000\028\230\007>\000\000\017\220\000\000\000\000\000\000\000\000:\160\000\000\000\000;j\000\000%|\000\000&.\000\000\000\000&\182\000\000\000\000\000\000\000\000'\016\000\000':\000\000\000\000\000\000\000\000\000\000@\014\000\000\000\000\000\000\020\234\001n\000\000\000\000\000\000\000\000\000\000\001\158\001n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000N\128\000\000\005Z\000\000\000\228\000\000\000\000\000\000\000\187\000\000\000\000\000\000\001\226\000\000\000\000\000\000\011\254\000\000\000\000\000\000B`\t\200\000\000\000\000\001$\000\000\000\000\000\000\000\000\t:\004\146\016\184\004,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000I\202\000\000\016\164\000\000\000\000\000\000\000\000\005\022\006\168B\026B\132\000\000\000\000\016\168CJ\000\000\000\000\000\000\016\212C\128\000\000\000\000\000\000\000\000"), (16, "\006\205\007b\003\012\003\r\002;\000=\0009\000\211\002\210\003\012\003\r\002;\000S\000\217\000\220\000W\002*\003,\006\206\007<\002\210\002\169\006\208\007\020\000S\000A\003-\000W\000X\0009\002\196\006\209\006\228\004\t\002\200\006\242\000\217\007c\002\221\003D\000\213\000W\000\225\000\217\0009\000S\000\217\005\005\000W\000X\002\221\000S\002\174\000W\000W\002*\000\144\002;\004\n\006\141\000S\006\210\000\177\000W\002*\000\186\006\205\002+\003\012\003\r\002;\005\245\000\177\001v\007\007\001\210\002p\001)\000F\002\201\006\141\0009\000I\003,\006\206\006\227\005\246\000P\006\208\006\143\006\r\002-\003-\000\177\002\202\006\211\000\182\006\209\006\228\003F\002-\0009\000\211\002\222\006\212\003D\003\015\006\144\000\217\000\220\006\143\003\016\006\146\003H\000W\002\222\006\187\0040\003\016\000\177\003H\000W\000\182\006\233\003O\004>\001,\006\210\006\144\000\183\004;\0075\006\234\006\146\003\012\003\r\002;\006\167\004-\002\169\003X\005\006\000S\001\177\000\211\000W\000X\006\235\002\196\003,\000\217\000\235\002\200\003X\000\217\005\197\006\216\004\012\003-\006\218\007>\006\211\006\223\001\177\007^\003F\007r\003\r\002;\002\210\006\212\003D\000\225\006\225\0077\001K\003I\003\016\003S\003H\000W\000\221\004)\003I\003Y\0009\001\197\003K\000<\006\233\003O\003J\006\226\001\197\003K\002A\002\214\002\201\006\234\002\221\000\233\006\205\000W\003\012\003\r\002;\000B\001_\000\236\007`\003[\000;\002\202\006\235\001y\006\254\007V\000d\003,\006\206\006\227\001\198\006\216\006\208\002\219\006\218\000?\003-\006\223\007N\000Y\003F\006\209\006\228\001\190\001\179\007t\000W\001z\006\225\003D\000Z\003I\003\016\003S\003H\000W\006\255\001\190\004L\003Y\000W\001\197\003K\001\190\003L\003O\000W\006\226\001f\001h\001j\006\210\000b\002\222\003X\007\024\006\205\002\165\003\012\003\r\002;\000G\000Z\000\211\007u\003[\003H\000W\003P\000\217\000\235\002\165\001\164\003,\006\206\006\227\001\131\002\169\006\208\002\206\001_\000\225\003-\000\142\001\004\006\211\002\196\006\209\006\228\003F\002\200\001\005\000\217\005 \006\212\003D\001\195\003I\001\197\003S\002\185\003\016\0040\003H\000W\003Y\000\217\001\197\003K\000\233\007W\000J\001\197\006\233\003O\004=\001\208\006\210\001\197\001\202\001\203\006\252\006\234\007f\003\012\003\r\002;\000\236\000Z\001\204\001\205\003[\001i\001h\001j\002\201\002\220\006\235\000\211\003,\001\206\001\130\001\131\002B\000\217\000\235\006\216\000Q\003-\006\218\002\202\006\211\006\223\000\246\0071\003F\003_\000\241\000\211\007g\006\212\003D\000W\006\225\000\217\000\220\003I\003\016\003S\003H\000W\000[\002\208\002\203\003Y\007O\001\197\003K\000Z\006\233\003O\006\238\006\226\000\211\001\134\001\135\002\167\002\203\006\234\000\217\000\235\006\205\0009\003\012\003\r\002;\000e\005$\002\210\000}\003[\001\158\007\002\006\235\006\170\001\138\001\130\006\182\003,\006\206\006\227\001\219\006\216\006\208\000Z\006\218\006\006\003-\006\223\002\189\000\211\003F\006\209\006\228\006\184\002\223\000\217\000\220\002\221\006\225\003D\000W\003I\003\016\003S\003H\000W\000\239\000Z\001\177\003Y\006\b\001\197\003K\006\180\003L\003O\000\236\006\226\000\225\001\134\001\135\006\210\006\185\000\129\007\016\006\236\006\205\006\n\003\012\003\r\002;\004I\000Z\002\210\001\177\003[\001\153\002\190\003P\006\182\001\138\001\130\000\133\003,\006\206\006\227\000\241\003X\006\208\001v\006\011\000\225\003-\005\245\000\244\006\211\006\184\006\209\006\228\003F\002\211\000\245\002\222\002\221\006\212\003D\000W\003I\005\246\003S\004\167\003\016\005\253\003H\000W\003Y\004E\001\197\003K\000\233\001\178\007\005\007\006\006\233\003O\006\185\003X\006\210\006\148\001\202\001\203\006\231\006\234\000\151\003\012\003\r\002;\000\158\000\211\001\204\001\205\003[\001\138\001\130\000\217\000\220\001\215\006\235\001\177\003,\001\206\001\130\007~\003\r\002;\001_\006\216\001\177\003-\006\218\000\211\006\211\006\223\000\246\007*\003F\000\217\000\235\002\222\006\012\006\212\003D\0009\006\225\007\005\007\006\003I\003\016\003S\003H\000W\001q\001\130\005X\003Y\002\183\001\197\003K\000W\006\233\003O\002\188\006\226\000\211\006\b\001\138\001\130\000\217\006\234\000\217\000\235\006\205\005\245\003\012\003\r\002;\000\159\001t\001h\001j\003[\006\n\004U\006\235\001\177\007\129\007\130\005\246\003,\007\132\007\003\005\247\006\216\006\208\000\236\006\218\004\172\003-\006\223\003\186\001|\003F\006\209\007\134\006\011\003\012\003\r\002;\001_\006\225\003D\003X\003I\003\016\003S\003H\000W\0040\002\210\001_\003Y\007\004\001\197\003K\001\127\003L\003O\000\236\006\226\004\t\004=\007\127\006\210\003H\000W\001\185\001\130\006\205\001_\003\012\003\r\002;\007\149\000Z\000\162\003\025\003[\001\177\002\221\003P\000\164\000W\007\141\004V\003,\007\142\001\199\000\241\000\211\006\208\001\142\001h\001j\003-\000\217\000\220\006\211\000\225\006\209\007\150\003F\001\150\001h\001j\0049\006\212\003D\005F\003I\000\181\003S\000\180\003\016\005\025\003H\000W\003Y\001\200\001\197\003K\001\155\001h\001j\001\190\006\233\003O\000W\001\201\006\210\003X\007\137\004\189\003\015\006\205\004\193\003\012\003\r\002;\002\021\002;\004S\000Z\003[\002\222\003\016\005\182\003H\000W\006\235\004\206\003,\006\206\006\240\000\240\005w\006\208\001\171\006\216\000\225\003-\006\218\000\252\006\211\006\223\006\209\006\228\003F\001Q\000\253\000\211\005J\006\212\003D\000\225\006\225\000\217\000\220\003I\003\016\003S\003H\000W\000\199\004\011\000\205\003Y\000\233\001\197\003K\004\192\006\233\003O\004\192\006\226\006\210\007\154\005\138\000\165\001\197\000\211\000\208\003\012\003\r\002;\005\184\000\217\000\235\005?\001I\003I\000\177\003[\000\187\001\210\006\235\001\177\003,\003J\000S\001\197\003K\000W\002*\006\216\005A\003-\006\218\006\174\006\211\006\223\000\246\007'\003F\005\245\002\219\000\211\000\224\006\212\003D\001R\006\225\000\217\000\220\003I\003\016\003S\003H\000W\005\246\005\027\004Y\003Y\005\252\001\197\003K\000\211\006\233\003O\004T\006\226\000\211\000\217\000\235\000\236\000Z\006\234\000\217\000\235\006\205\001\016\003\012\003\r\002;\001\026\005\185\000\211\000\177\003[\001\211\001\210\006\235\000\217\000\235\007\141\001C\003,\007\142\006\222\001\024\006\216\006\208\000Z\006\218\001D\003-\006\223\001\023\000\211\003F\006\209\007\145\002`\002;\000\217\000\220\001\028\006\225\003D\001\180\003I\003\016\003S\003H\000W\005\241\001\177\000Z\003Y\005\178\001\197\003K\000W\003L\003O\000\236\006\226\005j\006\205\000S\006\210\001+\000W\002*\005\184\006\205\0009\003\012\003\r\002;\000\236\000Z\000\211\006\148\003[\001;\006\206\003P\000\217\000\235\006\208\005o\003,\006\206\001\128\000\241\000Z\006\208\002\220\006\209\001\216\003-\005\245\001\133\006\211\001\177\006\209\006\248\003F\004T\001D\001\177\006\186\006\212\003D\005t\003I\005\246\003S\001\139\003\016\006\021\003H\000W\003Y\004\192\001\197\003K\004\241\006\210\001\162\000\225\006\233\003O\006%\001\166\006\210\007\148\006\182\002\169\000S\002\204\005\236\000W\000X\000W\001\177\0027\002\196\004\192\003[\000\211\002\200\001\172\000\217\006\184\006\235\000\217\000\235\000\233\001\183\007\r\001\213\006\211\005\250\006\216\000\225\000W\006\218\001\002\006\211\006\223\006\212\004\192\003F\006\141\001\003\005\026\000\225\006\212\001\214\0013\006\225\005@\006\185\003I\003\016\003S\003H\000W\001\218\006\213\003O\003Y\000\233\001\197\003K\002\201\006\233\003O\006\214\006\226\000\211\006'\001\177\006\143\000\233\006\251\000\217\000\235\003\196\006\244\002\202\000W\002*\006\215\006<\000S\005\167\003[\000W\000X\006\235\006\144\006\216\001?\000\225\006\218\006\146\000\226\006\223\006\216\006\162\000\211\006\218\001\227\001\007\006\223\000\246\000\217\006*\006\225\003\012\003\r\002;\006=\006c\006>\006\225\000\211\003\210\003I\006\141\003S\000\233\000\217\000\235\003,\006{\003Y\006\226\001\197\003K\000\211\001\177\001\233\003-\006\226\000\211\000\217\000\235\001A\007#\005\r\000\217\000\235\005\173\006?\001\177\003D\000\211\000\177\006\143\001\169\001\210\003[\000\217\000\235\002\195\003\012\003\r\002;\000Z\003\012\003\r\002;\001\246\006+\000\246\000\177\006\144\002\173\001\210\003\245\003,\006\146\000W\002*\003,\006\153\006@\001\250\005\246\003-\0060\001c\006-\003-\005\150\004!\006A\001e\006B\004\247\000\217\001\177\003D\000\241\000\211\002\007\003D\002\n\000\236\000\142\000\217\000\235\001\220\000\225\000Z\003F\000\226\004`\002;\004\006\000\236\000\225\002\195\001\007\000\226\006d\005\218\003\016\001\129\003H\000W\001\007\000\177\001\177\006N\001\210\001\177\002\016\000\241\003L\003O\000\233\006\131\001\200\001\177\000W\001\140\002\019\006D\000\233\000\241\006F\001\177\001\201\006K\006U\000\142\002\030\000Z\001\131\001\177\001\019\003F\003P\000Z\006`\003F\001\131\000\236\005\154\001\167\002\219\006e\007\017\003\016\000\217\003H\000W\003\016\002\210\003H\000W\003\179\002;\006a\000\246\003L\003O\004\197\001\130\003L\003O\003I\000\246\003S\000Z\001\028\001\196\000\241\001\145\003Y\001\029\001\197\003K\007\004\005e\004\176\001\161\005\254\002\221\003P\002\028\000W\000Z\003P\000\211\006\014\000\225\003\012\003\r\002;\000\217\000\235\000\211\006\243\000\177\003[\006X\001\210\000\217\000\235\004\213\006\022\003,\001\177\001\177\002\210\000Z\001\209\003I\002$\003S\003-\003I\001\228\003S\000\225\003Y\004\244\001\197\003K\003Y\005\161\001\197\003K\003D\000S\001\231\000\217\000W\000X\001\177\001\177\004\184\000Z\001\234\002\221\001\134\001\135\000W\005}\002;\001\019\003[\002\222\001\134\001\135\003[\005\248\000\236\001\019\002\219\006\155\001\146\001\159\000W\005\248\000\236\001\138\001\130\004\211\001\146\001\159\0020\002\220\001\247\001\138\001\130\003\012\003\r\002;\002\169\005\248\002\170\002k\000Z\005k\006J\002\000\000\241\002\196\000Z\001\029\003,\002\200\003F\000\217\000\241\002\003\000\211\001\029\002\b\003-\0023\000Z\000\217\000\235\003\016\004\243\003H\000W\002\222\000Z\005p\006\247\003D\003\012\003\r\002;\003L\003O\003\012\003\r\002;\006\136\001\177\005\136\001\130\000\211\000S\001\177\003,\000W\000X\000\217\000\235\003,\001F\000\225\002\201\003-\006%\000Z\003P\002\011\003-\004\210\002\169\002\017\002\194\002h\004\207\0024\003D\002\202\000Z\002\196\002\195\003D\002J\002\200\002I\000\217\000\236\006\141\000Z\000\233\000\225\000Z\002R\006%\002o\003I\002\131\003S\003F\002}\002\155\001\177\002\128\003Y\002\136\001\197\003K\002\220\001\177\002\157\003\016\002\135\003H\000W\004\202\000\236\000\237\006\143\000\233\004\174\007\023\002\164\003L\003O\002\236\005u\002\239\002\154\002\201\003[\002\242\005\189\001\130\006'\000Z\006\144\003F\002\245\000Z\001\177\006\146\003F\000Z\002\202\006\150\001D\003P\002\251\003\016\000Z\003H\000W\003\003\003\016\002\160\003H\000W\003\012\003\r\002;\003L\003O\006'\000\211\003\b\003L\003O\000Z\000\225\000\217\006*\0011\003,\005\132\003\024\003I\000Z\003S\0012\001\177\005\140\003-\002\166\003Y\003P\001\197\003K\004\173\000Z\003P\001\028\000Z\000\211\000Z\003D\003&\000\233\000Z\000\217\006*\002\179\003\012\003\r\002;\000Z\002\181\003\012\003\r\002;\003[\002\192\005\143\002\199\003I\000Z\003S\003,\003\139\003I\000Z\003S\003Y\004\162\001\197\003K\003-\003Y\006+\001\197\003K\004Q\000Z\0041\004\158\004\175\004\169\002\235\004Z\003D\002\238\000\246\000Z\005\246\002\241\006/\007j\006-\003[\003\012\003\r\002;\005\151\003[\002\244\003F\002\250\006+\000\241\004\181\004\196\002\254\004\155\000Z\003,\003\002\003\007\003\016\002\210\003H\000W\000\211\005\246\003-\006.\007k\006-\000\217\000\235\003L\003O\003\023\004\199\004\164\002\196\000Z\003D\000\241\002\200\003%\000\217\003\012\003\r\002;\0037\004\188\003\188\001\177\002\221\003F\000Z\000W\000Z\003P\003\015\004\203\003,\003\012\003\r\002;\003\187\003\016\005\016\003H\000W\003-\004]\003\143\003H\000W\002*\004\149\003,\003L\003O\001\177\000Z\000Z\003D\005-\000\225\003-\003I\002\201\003S\000\236\003\180\004\143\005`\005g\003Y\004<\001\197\003K\003D\000\225\003F\003P\000\226\000Z\002\210\004K\001\177\005m\000\225\001\007\004T\000\226\003\016\004N\003H\000W\004W\002\222\001\007\000\241\003[\004b\005|\005\155\003L\003O\000Z\000\233\001\177\004m\003I\006\221\004\171\000Z\002\221\003I\000\233\000W\003Y\004u\001\197\003K\003F\003J\004\160\001\197\003K\0057\003P\004\180\000Z\005\162\004\182\005\135\003\016\004\195\003H\000W\003F\000Z\000Z\004\198\005:\004\204\003[\004\214\003L\003O\004\219\005\018\003\016\000\246\003H\000W\000Z\005\022\005(\003I\005\179\004\166\000\246\005.\003L\003O\005\139\003Y\000\211\001\197\003K\000Z\003P\001\177\000\217\000\235\003\012\003\r\002;\0052\005N\002\222\005\183\000\211\005f\005_\005a\005\142\003P\000\217\000\235\003,\000\211\003[\005d\002\169\005s\002\217\000\217\000\235\003-\003I\000Z\003S\002\196\002\169\004\132\003\027\002\200\003Y\000\217\001\197\003K\003D\002\196\005\149\005\153\003I\002\200\003S\000\217\005i\003\012\003\r\002;\003Y\000S\001\197\003K\000W\000X\005r\000\236\000Z\005n\003[\005\158\003,\005q\005{\001\019\005\131\003\012\003\r\002;\005\229\003-\000\236\005\169\001\019\005\130\003[\004r\002\201\000Z\005\188\000\236\003,\005\193\003D\005=\006\141\000\243\002\201\001\177\005\203\003-\005\134\002\202\003\012\003\r\002;\004g\003F\000\225\002\210\005\141\000\241\002\202\003D\001\020\005\152\000Z\000Z\003,\003\016\000\241\003H\000W\001\029\002\210\006\143\005\209\003-\005\148\005\220\001\177\003L\003O\004a\001\177\000\225\006\246\000Z\006%\002\221\003D\005\231\000W\006\144\005\249\003\012\003\r\002;\006\146\000Z\005\157\007\030\006\147\003F\002\221\003P\000Z\000W\005\176\000Z\003,\005\235\005\164\000\233\001\177\003\016\000Z\003H\000W\003-\006\005\005\175\005\170\003F\005\174\004\022\005\187\003L\003O\006\000\006\016\001\177\003D\001\177\003I\003\016\003S\003H\000W\006\025\001\177\001\177\003Y\000Z\001\197\003K\000Z\003L\003O\001\177\003F\003P\006\t\005\192\002\222\006\026\0061\006'\000Z\0063\000\211\000Z\003\016\006H\003H\000W\000\217\000\235\003[\002\222\002\169\003P\004\186\005\195\003L\003O\005\199\006M\000Z\002\196\003I\000\225\003S\002\200\006%\000\217\0069\000\211\003Y\000\225\001\197\003K\003F\000\217\006*\006W\000Z\000Z\003P\005\207\003I\001\177\003S\006E\003\016\006R\003H\000W\003Y\000\233\001\197\003K\006]\006t\003[\005\214\003L\003O\003\012\003\r\002;\006\127\000Z\001\177\000\236\006h\000Z\003I\002\201\003S\000Z\005\225\006o\003,\003[\003Y\006\024\001\197\003K\006r\003P\006\017\003-\002\202\000Z\006\172\006w\006\158\003\012\003\r\002;\006+\004\014\006'\001x\003D\001\177\006|\006\154\006\130\006\018\003[\000Z\003,\006\023\006\138\005\246\006\177\006,\003I\006-\003S\003-\006\161\001\177\006\197\001\177\003Y\003B\001\197\003K\000\241\000\225\000\211\001\177\003D\003\012\003\r\002;\000\217\006*\000\211\000Z\001\177\006\027\006\171\001\177\000\217\000\235\000Z\001\177\003,\001\177\003[\006\220\006\028\000Z\003\012\003\r\002;\003-\006;\000Z\000Z\000Z\003F\003N\0064\0065\006\245\007\029\006:\003,\003D\000Z\000Z\000Z\003\016\006\175\003H\000W\003-\000Z\000\225\000Z\006G\0017\003R\006T\003L\003O\001\177\000Z\0018\003D\003F\006\179\006+\006\183\001\177\006P\001\177\003\012\003\r\002;\000\236\006\195\003\016\006Q\003H\000W\000\233\005\246\003P\0068\006\202\006-\003,\006\217\003L\003O\000Z\006\229\001\177\006\249\006S\003-\000\241\000\225\006_\006\\\001-\003a\003F\000\211\001~\000Z\000Z\006^\003D\000\217\000\235\003I\003P\003\201\003\016\006g\003H\000W\006i\003Y\006j\001\197\003K\003F\000\246\000\233\003L\003O\006p\003\012\003\r\002;\007\012\006}\006\149\003\016\006\159\003H\000W\006\204\007\135\003I\007\146\003S\003,\003[\006\198\003L\003O\003Y\003P\001\197\003K\003-\000\211\006\199\006\203\006\219\006\224\003`\000\217\000\235\007\001\002\169\007\151\004\253\003D\000\236\003F\007\011\007\015\003P\002\196\007\028\007%\003[\002\200\007y\000\217\003I\003\016\003S\003H\000W\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\000\000\000\000\004x\000\000\000\211\003I\000\000\003S\000\000\000\000\000\217\000\235\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\003P\000\000\000\236\000\000\000\000\002\201\003\012\003\r\002;\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003[\000\000\002\202\003,\003\016\000\000\003H\000W\000\000\000\000\000\000\003I\003-\003S\000\241\000\000\003L\003O\003\147\003Y\000\000\001\197\003K\000\000\000\000\003D\003\012\003\r\002;\000\236\000\000\003\012\003\rr\002;\003L\003O\000\000\000\246\000\000\003L\003O\000\000\000\000\000\000\000\000\006'\003,\000\000\006\141\003I\000\000\003S\000\000\000\000\000\000\003-\000\000\003Y\003P\001\197\003K\003\161\000\000\003P\000\000\000\000\000\000\000\211\003D\003\012\003\r\002;\000\000\000\217\000\235\000\211\000\000\000\000\006\143\000\000\000\000\000\217\006*\003[\003,\000\000\000\000\003I\000\000\003S\000\000\000\000\003I\003-\003S\003Y\006\144\001\197\003K\003\168\003Y\006\146\001\197\003K\000\000\006\157\003D\000\000\000\000\000\000\002\169\000\000\005\003\000\000\003\012\003\r\002;\000\000\000\000\002\196\000\000\003[\000\000\002\200\001\019\000\217\003[\000\000\003F\003,\000\000\000\236\000\000\000\000\000\000\003\012\003\r\002;\003-\006+\003\016\000\000\003H\000W\003\171\000\000\000\000\000\000\000\000\000\000\003,\003D\003L\003O\005\246\000\000\006\165\000\000\006-\003-\000\000\000\241\000\000\000\000\001G\003\191\003F\000\000\002\201\000\241\000\225\000\000\003D\000\229\000\000\000\000\003P\000\000\003\016\000\000\003H\000W\000\000\002\202\000\000\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\003\012\003\r\002;\000\000\000\233\000\000\000\000\000\000\000\000\000\000\000\000\003I\000\000\003S\000\000\003,\007G\003F\000\000\003Y\003P\001\197\003K\000\000\003-\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003\199\000\000\000\000\003D\003F\000\000\000\000\003L\003O\000\000\000\000\003[\003\012\003\r\002;\003I\003\016\003S\003H\000W\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\003P\003\012\003\r\002;\000\000\004Q\000\000\000\000\000\000\000\000\000\000\000\000\004Z\000\211\000\000\002\169\003,\005c\003[\000\217\000\235\003P\000\000\000\000\002\196\003-\000\000\007H\002\200\003I\000\217\003S\003F\000\000\000\000\003\203\004[\003Y\003D\001\197\003K\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\003I\000\000\003S\000\000\000\000\000\000\003L\003O\003Y\007I\001\197\003K\000\000\003[\007P\000\217\000\000\003\012\003\r\002;\000\000\000\000\000\000\002\201\002\169\000\000\005\166\000\236\003\015\000\000\003P\000\000\003,\002\196\003[\000\000\000\000\002\200\002\202\000\217\004]\003-\003H\000W\002*\000\000\000\000\000\000\003F\000\000\000\000\003\205\000\000\000\000\003D\000\000\000\000\000\241\007Q\003I\003\016\003\201\003H\000W\003\012\003\r\002;\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\000\000\000\000\000\000\000\000\003,\004T\000\000\002\201\007R\000\000\003\012\003\r\002;\003-\000\000\000\000\000\000\000\000\003[\000\000\000\000\003P\002\202\003\208\000\000\003,\003D\000\000\000\000\007S\003I\003\012\003\r\002;\003-\000\000\000\000\000\000\003J\003F\001\197\003K\000\000\000\000\003\215\000\000\003,\003D\000\000\000\000\003I\003\016\003\201\003H\000W\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003L\003O\003\220\000\000\000\000\003D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\002\169\000\000\005\172\003[\000\000\003F\003P\000\000\000\000\002\196\000\000\000\000\003,\002\200\000\000\000\217\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\003F\000\000\000\000\003L\003O\003\225\000\000\000\000\003D\003I\000\000\003\201\003\016\000\000\003H\000W\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\000\000\002\201\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\003[\000\000\003L\003O\002\202\003P\000\000\000\000\000\000\003,\000\000\000\000\000\000\003I\000\000\003\201\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\003F\003P\000\000\003\248\000\000\000\000\003D\000\000\000\000\003I\000\000\003\201\003\016\000\000\003H\000W\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\000\000\003I\000\000\003\201\000\000\000\000\003\012\003\r\002;\003Y\000\000\001\197\003K\002\169\003[\005\181\000\000\000\000\002\169\003P\006I\003,\002\196\003\012\003\r\002;\002\200\002\196\000\217\000\225\003-\002\200\000\232\000\217\000\000\003[\003\231\003F\003,\000\000\000\000\000\000\000\000\003D\000\000\000\000\000\000\003-\003I\003\016\003\201\003H\000W\003\236\000\000\000\000\003Y\000\233\001\197\003K\003D\003L\003O\000\000\003\012\003\r\002;\000\000\000\000\000\225\000\000\002\201\000\254\000\000\000\000\000\000\002\201\000S\000\000\003,\000W\000X\003[\000\000\000\000\003P\002\202\000\000\003-\000\000\000\000\002\202\000\000\000\000\000\000\000\000\000\000\000\233\003\253\000\000\000\000\003D\000\000\003F\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\006\141\000\000\003I\003\016\003\201\003H\000W\000\000\003F\003,\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\003-\000\211\003\016\000\000\003H\000W\000\000\000\217\000\235\000\000\004\002\000\000\006\143\003D\003L\003O\000\000\000\000\003[\000\000\000\000\003P\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\006\144\003F\000\000\000\000\000\000\006\146\000\000\000\000\003P\006\173\003,\000\211\000\000\003\016\000\000\003H\000W\000\217\000\235\003-\003I\000\000\003S\000\000\000\000\003L\003O\000\000\003Y\004\017\001\197\003K\003D\000\000\000\000\000\236\000\000\003I\000\000\003S\003\012\003\r\002;\003F\000\000\003Y\000\000\001\197\003K\003P\000\000\000\000\000\000\000\000\003[\003\016\000\000\003H\000W\000\000\000\000\003\012\003\r\002;\007\026\000\241\000\000\003L\003O\000\000\000\000\003[\000\000\000\000\000\000\000\236\003,\000\000\003I\000\000\003\201\000\000\000\000\000\000\000\000\003-\003Y\000\000\001\197\003K\000\000\003P\003F\000\000\000\000\004\020\000\000\000\000\003D\003\012\003\r\002;\000\000\000\000\003\016\000\241\003H\000W\000\000\000\000\000\225\000\000\003[\000\248\003,\000\000\003L\003O\000\000\000\000\003I\000\000\003\201\003-\000\000\000\000\000\000\000\000\003Y\004\025\001\197\003K\000\000\000\000\000\000\000\000\003D\003\015\000\233\000\000\003P\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\003\016\000\000\003H\000W\000\000\003[\000\000\000\000\000\000\003F\003,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003-\003I\003\016\003\201\003H\000W\004\028\000\000\000\000\003Y\000\000\001\197\003K\003D\003L\003O\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\003[\003,\000\000\003P\000\000\003\016\000\000\003H\000W\000\211\003-\003I\000\000\000\000\000\000\000\217\000\235\003L\003O\003J\004%\001\197\003K\003D\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003I\000\000\003\201\000\000\000\000\000\000\003F\003,\003Y\003P\001\197\003K\000\000\003\012\003\r\002;\003-\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\004A\000\000\003,\003D\003L\003O\000\000\000\000\003[\000\000\000\000\003-\003I\000\000\003S\000\236\000\000\004c\000\000\000\000\003Y\000\000\001\197\003K\003D\003F\000\000\000\000\003P\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\000\241\003[\003,\000\000\003L\003O\000\000\000\000\000\000\000\000\000\000\003-\003I\000\000\003S\000\000\000\000\004e\003F\000\000\003Y\000\000\001\197\003K\003D\003\012\003\r\002;\003P\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\000\000\003F\003,\000\000\003L\003O\000\000\000\000\003[\000\000\000\000\003-\000\000\003\016\000\000\003H\000W\004i\000\000\003I\000\000\004'\000\000\000\000\003D\003L\003O\003Y\003P\001\197\003K\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\003,\000\000\003P\000\000\000\000\000\000\003[\000\000\000\000\003-\003I\003\016\004C\003H\000W\004l\000\000\000\000\003Y\000\000\001\197\003K\003D\003L\003O\000\000\000\000\000\000\000\000\000\225\000\000\003I\000\251\003S\000\000\000\000\000\000\003F\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\003P\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\233\000\000\000\000\000\000\003L\003O\000\000\000\000\003[\000\000\000\000\003,\000\000\000\225\000\000\000\000\006%\000\000\000\000\003I\003-\003S\000\000\000\000\000\000\003F\004n\003Y\003P\001\197\003K\000S\000\000\003D\000W\000X\000\000\003\016\000\000\003H\000W\000\233\000\000\000\000\000\000\003\012\003\r\002;\000\000\003L\003O\000\000\000\000\003[\000\000\000\000\000\000\003I\000\000\003S\003,\000\000\003\012\003\r\002;\003Y\006\141\001\197\003K\003-\000\000\000\000\000\000\003P\000\211\004p\000\000\003,\000\000\000\000\000\217\000\235\003D\000\000\000\000\006'\003-\000\000\000\000\000\000\000\000\003[\004z\003F\000\000\000\000\006\143\000\225\000\000\003D\001\001\000\000\003I\000\000\003S\003\016\000\000\003H\000W\000\000\003Y\000\000\001\197\003K\006\144\000\211\000\000\003L\003O\006\146\000\000\000\217\006*\006\191\000\000\000\233\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\002\169\003[\007!\000\236\000\000\000\000\003P\003F\003,\002\196\003\012\003\r\002;\002\200\000\000\000\217\000\000\003-\000\000\003\016\000\000\003H\000W\004\134\003F\003,\000\000\000\000\000\000\000\000\003D\003L\003O\000\241\003-\003I\003\016\003S\003H\000W\004\137\000\000\000\000\003Y\006+\001\197\003K\003D\003L\003O\000\000\003\012\003\rr\002;\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\241\003,\003\016\000\000\003H\000W\000\000\000\000\000\000\003I\003-\003S\000\000\000\000\003L\003O\004\191\003Y\000\000\001\197\003K\000\000\000\000\003D\000\000\000\000\003I\000\000\003S\003\012\003\r\002;\000\000\000\000\003Y\000\000\001\197\003K\003P\000\000\000\000\000\211\000\000\003[\003,\000\000\000\000\000\217\000\235\000\000\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\004\201\003[\000\000\000\000\000\000\000\000\000\000\003D\003I\000\000\003S\000\000\000\000\000\000\006<\000\000\003Y\000\000\001\197\003K\003\012\003\r\002;\000\000\003F\000\225\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\000\000\003,\003\016\000\000\003H\000W\000\000\000\000\003[\006=\003-\006>\000\236\000\000\003L\003O\004\222\000\000\000\000\000\233\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\003F\000\000\000\000\000\000\000\000\003P\000\000\000\000\006?\000\241\000\000\003,\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003-\000\000\000\000\000\000\003L\003O\004\225\000\000\000\000\000\000\000\000\000\000\000\000\003D\003I\000\000\003S\000\000\000\000\000\000\000\000\006@\003Y\000\000\001\197\003K\000\000\000\000\003P\000\000\003F\006A\000\000\006B\003\012\003\r\002;\000\000\000\000\000\000\000\211\000\000\003\016\000\000\003H\000W\000\217\000\235\003[\003,\000\000\000\000\000\000\000\000\003L\003O\000\000\003I\003-\003S\006b\000\000\000\000\000\000\004\235\003Y\000\000\001\197\003K\000\000\000\000\003D\000\000\003F\000\000\000\000\000\000\000\000\003P\003\012\003\r\002;\000\000\006D\000\000\003\016\006F\003H\000W\006K\006U\003[\000\000\000\000\000\000\000\000\000\225\003L\003O\000\226\006`\000\000\001\006\004\t\000\236\000\000\001\007\003I\000\000\003S\000\000\000\000\003\012\003\r\002;\003Y\000\000\001\197\003K\006a\000\000\003P\000\000\001\b\000\233\000\000\000\000\003,\006\145\000\000\001&\003F\000\000\000\000\000\241\000\000\003-\000\000\000\000\000\000\000\000\003[\004\238\003\016\000\000\003H\000W\000\000\000\000\003D\003I\000\000\003S\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\003\012\003\r\002;\000\000\000\000\000\225\000\246\000\000\006!\000\000\000\000\000\000\000\000\000\000\003\015\003,\000\000\003P\000\000\000\000\000\000\000\000\003[\001\r\003-\000\000\003\016\000\000\003H\000W\005\021\000\000\000\000\000\233\000\000\000\000\000\211\003D\000\000\000\000\000\000\000\000\000\217\000\235\000\000\000\000\003I\003F\003S\000\000\000\000\003\012\003\r\002;\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\000\000\004\012\003,\000\000\003\012\003\r\002;\003L\003O\000\000\000\000\003-\000\000\000\000\000\000\000\000\003[\005\024\000\000\003,\000\000\000\000\000\000\000\000\003D\000\000\000\000\003I\003-\001\019\000\000\003P\000\000\003F\005'\003J\000\236\001\197\003K\000\000\001\027\003D\000\000\000\211\000\000\003\016\000\000\003H\000W\000\217\000\235\000\000\000\000\000\000\002:\002;\000\000\003L\003O\000\000\003I\000\000\003S\004\236\000\000\000\000\000\241\000\000\003Y\001\029\001\197\003K\000\000\000\000\000\000\002<\003\157\000\000\002>\002?\000\000\003P\000\000\000\000\003F\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\003[\000\000\003\016\000\000\003H\000W\000\000\003F\003,\000\000\003\012\003\r\002;\000\236\003L\003O\003I\003-\003S\003\016\000\000\003H\000W\005*\003Y\003,\001\197\003K\000\000\000\000\003D\003L\003O\000\000\003-\000\000\000\000\000\000\003P\000\000\0056\000\000\000\000\000\241\000\000\000\000\000\000\003D\000\000\000\000\003[\000\000\000\000\000\000\000\000\003P\002C\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003I\002D\003S\000\000\000W\000\000\000\000\003,\003Y\000\000\001\197\003K\000\000\000\000\000\000\004\239\003-\003I\000\000\003S\000\000\000\000\005<\003F\000\000\003Y\000\000\001\197\003K\003D\000\000\000\000\000\000\000\000\003[\003\016\000\000\003H\000W\004\228\003F\000\000\000\000\003\012\003\r\002;\000\000\003L\003O\000\000\000\000\003[\003\016\000\000\003H\000W\000\000\000\000\003,\000\000\003\012\003\r\002;\000\000\003L\003O\002U\003-\000\000\000\000\000\000\003P\000\000\005R\002i\003,\001\197\002B\000\000\000\000\003D\000\000\000\000\000\000\003-\000\000\000\000\000\000\003P\003F\005U\000\000\003\012\003\r\002;\000\000\000\000\003D\000\000\000\000\003I\003\016\003S\003H\000W\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\004\154\003I\000\000\003S\000\000\000\000\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\003[\000\000\000\000\003P\000\000\000\000\003F\000\000\000\000\003\012\003\rr\002;\000\000\003L\003O\003I\000\000\003[\000\000\006[\000\000\000\000\000\000\003J\003,\001\197\003K\002:\002;\000\000\000\000\000\225\000\000\003-\006(\000\211\003\159\003P\000\000\006s\000\000\000\217\000\235\000\000\000\000\003\162\003D\000\000\002<\003\157\000\225\002>\002?\000\226\000\000\000\000\003\012\003\rn\000\000\000W\000\217\000\235\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\211\003F\003P\000\000\000\000\000\000\000\217\000\235\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\003\158\000\000\0070\000\000\003L\003O\000\000\000\000\000\000\003D\003I\000\000\003S\000\000\000\000\000\000\000\000\000\000\003Y\000\000\001\197\003K\004\208\000\000\000\236\000\000\000\000\002U\003P\000\000\000\000\001\134\001\135\000\000\000\000\002i\001\019\001\197\002B\000\000\003\012\003\r\002;\000\236\003[\000\000\000\000\001\146\001\159\000\000\000\000\000\000\001\138\001\130\000\241\003,\000\000\003I\000\000\003S\000\000\000\000\000\000\000\000\003-\003Y\000\000\001\197\003K\003F\0073\000\000\000\000\000\241\000\000\000\000\001\029\003D\000\000\000\000\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\000\000\000\000\003,\000\000\002:\002;\000\000\000\000\003\012\003\rr\002;\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\003,\000\246\000\000\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\000\000\000\000\000\000\003[\000\000\000\000\003P\000\000\000\000\003,\000\000\003D\000\000\000\000\003I\000\000\003S\000\000\003-\000\000\000\211\000\000\003Y\000\000\001\197\003K\000\217\000\235\000\000\000\000\002U\003D\000\000\000\000\000\000\003I\000\000\003S\002V\000\000\001\197\002B\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\003[\000\000\003F\001\134\001\135\000\000\000\000\000\000\001\019\003,\000\000\000\000\000\000\000\000\003\016\000\236\003H\000W\003-\001\136\001\137\000\000\003F\000\000\001\138\001\130\003L\003O\000\000\000\000\000\000\003D\006<\000\000\003\016\000\000\003H\000W\003\012\003\rr\002;\000\000\000\000\000\000\000\000\006@\000\000\000\000\000\000\000\000\000\000\000\000\003[\003,\003F\006A\000\000\006B\003P\003\012\003\r\002;\003-\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003,\003D\000\000\000\000\003L\003O\000\000\000\000\000\000\003-\006C\000\000\000\000\003I\000\000\004\157\000\000\000\000\000\000\000\000\000\000\003Y\003D\001\197\003K\000\000\000\000\000\000\003P\000\000\000\000\000\000\000\000\006D\000\000\000\000\006F\000\000\000\000\006K\006U\000\000\000\000\000\000\000\000\000\000\000\000\003[\000\000\000\000\006`\000\000\000\000\000\000\000\000\000\000\000\000\003I\000\000\004\152\000\000\003F\000\000\000\000\000\000\003Y\000\000\001\197\003K\006a\000\000\000\000\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\003F\000\000\000\000\003L\003O\000\000\000\000\000\000\000\000\003[\003,\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\003-\000\000\000\000\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\003,\003D\000\000\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003D\000\000\000\000\003I\000\000\004\r\000\000\003-\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\003D\000\000\000\000\000\000\003I\000\000\003\189\000\000\000\000\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\003[\000\000\003F\000\000\000\000\003L\003O\000\000\003\012\003\r\002;\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003F\003,\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\003-\000\000\003\016\000\000\003H\000W\003\012\003\rr\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\003[\000\000\003F\003,\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\003-\000\000\003\016\000\000\003H\000W\000\000\000\000\003P\003,\000\000\000\000\000\000\003D\003L\003O\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\000\000\003I\003P\003c\000\000\000\000\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\000\000\226\000\000\000\000\001\030\000\000\000\000\000\000\001\007\000\000\000\000\003I\000\000\003e\000\000\003[\000\000\003F\000\000\003Y\000\000\001\197\003K\000\000\000\000\001 \000\233\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\003F\000\000\000\000\003\012\003\r\002;\003L\003O\000\000\000\000\003[\000\000\003\016\000\000\003H\000W\000\000\000\000\003,\003\012\003\r\002;\000\000\000\000\003L\003O\000\000\003-\000\000\000\000\003P\000\000\000\000\000\000\003,\000\246\000\000\000\000\000\000\000\000\003D\000\000\000\000\003-\000\000\000\000\000\000\000\000\003P\003\012\003\r\002;\001\r\000\000\000\000\000\000\003D\000\000\000\000\003I\000\000\003g\000\000\000\000\003,\000\211\000\000\003Y\000\000\001\197\003K\000\217\000\235\003-\000\000\000\000\000\000\003I\000\000\003i\000\000\000\000\000\000\000\000\000\000\003Y\003D\001\197\003K\000\000\000\000\000\000\000\000\003[\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\003[\003\016\000\000\003H\000W\003F\000\000\000\000\000\000\000\000\000\000\001\019\003,\003L\003O\000\000\000\000\003\016\000\236\003H\000W\003-\001\027\000\000\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\000\000\003D\003F\000\000\003P\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\003\016\000\241\003H\000W\001\029\000\000\003P\000\000\000\000\003,\000\000\000\000\003L\003O\000\000\000\000\000\000\000\000\003-\003I\000\000\003k\000\000\000\000\000\000\000\000\000\000\003Y\000\000\001\197\003K\003D\000\000\000\000\000\000\003I\003P\003m\000\000\000\000\003\012\003\r\002;\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\000\000\003[\000\000\003,\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003-\003I\000\000\003o\000\000\003[\000\000\003L\003O\003Y\000\000\001\197\003K\003D\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\003P\000\000\000\000\003,\003[\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\003I\000\000\003q\000\000\000\000\003\012\003\r\002;\003Y\000\000\001\197\003K\000\000\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\003[\000\000\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003s\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003u\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003w\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003y\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003{\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003}\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\127\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003\129\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\131\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003\133\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\135\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003\137\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\194\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003\218\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\223\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003\228\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\234\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003\239\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\241\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\003\244\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\003\251\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\004\000\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\004\005\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\000\000\000\000\003I\000\000\004\b\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\004+\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\000\000\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\000\000\006\205\000\000\003I\000\000\0044\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\003P\000\000\006\206\000\000\000\000\003,\006\208\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\006\209\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\003I\000\000\0046\000\000\003\012\003\r\002;\000\000\003Y\000\000\001\197\003K\003F\000\000\000\000\000\000\006\210\003P\000\000\003,\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\003[\000\000\003L\003O\000\000\000\000\000\000\003D\000\000\002tb\000\233\000\000\000\000\000\211\000\000\000\000\001$\000\000\000\000\000\217\000\235\002L\000\000\002M\002\247\000\000\000\000\000\000\002U\000\000\000\000\000\000\000\000\000\000\000\225\000\000\002V\000\226\001\197\002B\001\006\000\000\000\000\000\000\001\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002S\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\000\001\b\000\233\000\000\002D\000\000\000\225\000W\001\t\000\226\001\019\001\r\001\006\000\000\000\000\004\142\001\007\000\236\000\000\000\000\000\000\005=\000\000\000\000\000\211\000\000\000\000\000\000\000\000\000\000\000\217\000\235\000\000\001\b\000\233\003\140\002;\000\000\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\246\000\241\000\000\000\000\001\029\000\000\000\000\000\000\000\000\000\000\003\164\002K\000\000\002>\002?\000\000\000\000\001\r\000\000\000\000\000\000\000\000\000\000\002U\000\000\000\000\000\000\000\000\000\000\000\000\000\211\002V\000\246\001\197\002B\001\019\000\217\000\235\000\000\002:\002;\000\000\000\236\000\000\000\000\000\000\001\027\000\000\000\000\001\r\000\000\000\000\000\000\003\169\003\181\003\182\000\000\000\000\000\000\000\000\002<\002K\000\211\002>\002?\000\000\000\000\000\000\000\217\000\235\002r\000\000\000\241\000\000\000\000\001\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002S\000\000\001\019\000\000\000\000\002:\002;\000\000\000\000\000\236\000\000\000\000\002D\001\027\000\000\000W\000\000\000\000\000\000\002L\000\000\002M\002e\000\000\000\000\000\000\002<\002K\000\000\002>\002?\000\000\002:\002;\001\019\000\000\002c\000\000\000\000\000\241\000\000\000\236\001\029\000\000\000\000\001\027\000\000\000\000\000\000\004\240\002S\000\000\000\000\002<\002K\000\000\002>\002?\002:\002;\000\000\000\000\002D\002g\000\000\000W\000\000\000\000\000\000\000\000\002L\000\241\002M\002e\001\029\000\000\000\000\002U\000\000\002<\002K\000\000\002>\002?\000\000\002V\000\000\001\197\002B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002L\000\000\002M\002e\002S\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002D\000\000\000\000\000W\000\000\000\000\000\000\000\000\000\000\000\000\002L\000\000\002M\002yy\000\000\000\000\002L\000\000\002M\002\247\000\000\000\000\000\000\000\000\002U\000\000\000\000\000\000\003\169\003\181\003\182\000\000\002V\000\000\001\197\002B\000\000\000\000\000\000\000\000\000\000\002S\000\000\002:\002;\000\000\000\000\002S\000\000\000\000\000\000\000\000\003\159\002D\000\000\000\000\000W\003\140\002;\002D\002S\003\162\000W\000\000\002<\003\157\000\000\002>\002?\000\000\004\138\000\000\002D\002:\002;\000W\000\000\000\000\003\164\002K\000\000\002>\002?\000\000\000\000\000\000\000\000\002|\000\000\000\000\002:\002;\000\000\000\000\002<\002K\000\000\002>\002?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\185\000\000\002<\002K\000\000\002>\002?\000\000\000\000\002U\000\000\000\000\003\169\003\181\003\182\002U\000\000\002V\000\000\001\197\002B\000\000\000\000\002V\000\000\001\197\002B\000\000\002U\002L\002C\002M\002yi\000\000\001\197\002B\000\000\000\000\002U\000\000\000\000\000\000\003\169\003\181\003\182\000\000\002V\000\000\001\197\002B\000\000\006@\000\000\000\000\002U\000\000\000\000\000\000\000\000\000\000\000\000\006A\002V\006B\001\197\002B\000\225\000\000\000\000\000\226\000\000\002U\001\030\000\000\002S\000\000\001\007\000\000\000\000\002V\000\000\001\197\002B\002:\002;\000\000\002D\000\000\000\000\000W\006d\000\000\004\223\001 \000\233\000\000\000\000\000\000\000\000\005\239\002C\000\000\000\000\000\000\002<\003\157\000\000\002>\002?\000\000\000\000\000\000\002D\006D\007B\000W\006F\000\000\000\000\006K\006U\000\000\000\000\004\205\000\000\000\000\004\226\004\227\000\000\000\000\006`\000\000\003\140\002;\000\000\000\000\000\225\000\000\000\246\000\226\000\000\000\000\000\000\000\000\000\000\000\000\001\007\000\000\000\000\006a\004\228\002U\000\000\003\164\002K\001\r\002>\002?\000\000\002V\000\000\001\197\002B\000\000\000\233\000\000\001N\000\000\000\211\000\000\000\000\000\000\000\000\000\000\000\217\000\235\000\000\002U\000\000\002C\000\000\000\000\000\000\000\000\000\000\002i\000\000\001\197\002B\003\140\002;\002D\000\000\000\000\000W\000\000\003\169\003\181\003\182\000\000\000\000\000\000\000\000\000\000\000\000\004\226\004\229\000\000\000\246\000\000\003\164\002K\000\000\002>\002?\000\000\000\000\000\000\000\000\006\205\000\000\000\000\000\000\000\000\000\000\001\019\000\000\000\000\002S\004\228\000\000\000\000\000\236\000\000\007\141\000\000\006$\007\142\000\211\000\000\002D\006\208\000\000\000W\000\217\000\235\000\000\000\000\000\000\000\000\006\209\000\000\000\000\003\169\003\181\003\182\002U\002:\002;\000\000\000\000\000\000\000\241\000\000\002i\001\029\001\197\002B\000\000\000\000\000\000\000\000\006\205\000\000\000\000\000\000\000\000\006~\002<\002K\006\210\002>\002?\000\000\000\000\002S\000\000\007\141\000\000\000\000\007\142\000\000\000\000\000\000\006\208\001\019\000\000\002D\000\000\000\000\000W\000\000\000\236\006\209\000\000\002U\001U\000\000\000\000\000\000\000\000\000\000\000\000\002V\006\211\001\197\002B\000\000\000\000\000\000\000\000\000\000\002L\006\212\002M\007n\000\000\007pr\002<\002K\000\000\002>\002?\002:\002;\002L\001\019\002M\005\b\000\000\000\211\006\215\000\000\000\236\006\213\003O\000\217\000\235\000\000\007\152\006\216\000\000\000\000\006\218\002<\002K\006\223\002>\002?\000\000\000\000\000\000\000\000\002:\002;\000\000\002S\006\225\006\215\000\000\000\000\000\000\002L\000\241\002M\002jtr\002;\000\000\000\000\000\211\000\000\002V\000\000\001\197\002B\000\217\000\235\002S\002:\002;\000\000\002<\002K\006\205\002>\002?\000\000\000\000\004\151\002D\000\000\006<\000W\000\000\000\000\000\000\002U\003\158\000\000\002<\002K\006\206\002>\002?\002V\006\208\001\197\002B\000\000\000\000\000\000\000\000\000\000\000\000\006\209\002:\002;\000\000\000\000\000\000\006=\007\018\006>\000\000\002U\002L\001\019\002M\003\177\000\000\000\000\000\000\002id\000\000\000W\007\132\000\000\000\000\006\215\006\208\000\000\002U\002L\000\000\002M\005Z\003I\006\216\006\209\002V\006\218\001\197\002B\006\223\003J\006D\001\197\003K\006F\002U\000\000\006K\006U\000\000\006\225\000\000\000\000\002V\000\000\001\197\002B\000\000\006`\002S\000\000\000\000\002:\002;\006\210\000\000\000\000\000\000\000\000\006\226\000\000\002D\000\000\000\000\000W\002:\002;\006a\000\000\000\000\004\209\000\000\002U\002<\003\157\000\000\002>\002?\002:\002;\002V\000\000\001\197\002B\000\000\000\000\002<\003\157\006\211\002>\002?\000\000\000\000\000\000\000\000\000\000\000\000\006\212\000\000\002<\003\157\000\000\002>\002?\000\000\000\000\002:\002;\000\000\000\000\000\000\003\012\003\r{\000\000\000\000\002D\000\000\005S\000W\000\000\000\000\003\016\000\000\003H\000W\004{\002U\000\000\000\000\002C\000\000\000\000\000\000\004\129\002i\000\246\001\197\002B\000\000\002U\000\000\002D\000\000\002C\000W\000\000\004}\002i\000\000\001\197\002B\000\000\002U\004{\000\000\002D\000\000\000\000\000W\000\000\002i\000\000\001\197\002B\000\000\000\211\000\000\000\000\000\000\000\000\000\000\000\217\000\235\000\000\004|\000\000\000\000\002:\002;\004{\002U\000\000\000\225\000\000\000\000\000\226\003I\000\000\002i\000\000\001\197\002B\001\007\003\158\003J\005V\001\197\003K\002<\003\157\004\131\002>\002?\000\000\000\000\000\000\002U\000\000\000\000\000\000\000\233\000\000\000\000\000\000\002i\000\000\001\197\002B\002:\002;\002U\0057\001\019\002:\002;\000\000\000\000\000\000\002ii\000\000\001\197\002B\000\000\001b\006\192\002D\000\000\000\000\000W\006\139\000\225\002C\000\000\000\226\000\000\000\000\000\000\000\000\000\241\000\000\001\007\001\029\000\246\002D\000\000\000\000\000W\000\000\000\000\000\000\000\000\002U\000\000\000\000\000\000\000\000\002U\000\000\000\233\002i\000\000\001\197\002B\006\139\002i\000\000\001\197\002B\000\000\003\148\000\000\002C\000\211\000\000\000\000\000\000\006\194\002C\000\217\000\235\006\152\006\192\000\000\002D\000\000\000\225\000W\000\000\000\226\002D\002U\000\000\000W\000\000\000\000\001\007\000\000\000\000\002i\000\000\001\197\002B\000\246\000\000\000\000\000\000\000\000\000\225\002U\000\000\000\226\000\000\000\225\000\233\006\151\000\226\002i\001\007\001\197\002B\000\000\006\192\001\007\000\000\004\231\000\000\000\000\004\130\000\000\001\019\000\000\000\000\000\211\006\193\000\000\000\233\000\236\000\000\000\217\000\235\000\233\000\000\000\000\000\000\000\000\006\134\000\000\000\000\002U\000\000\000\225\000\000\000\000\000\226\002U\000\000\002i\000\246\001\197\002B\001\007\000\000\002ir\002;\000\000\000\000\000\000\000\211\000\000\000\000\000\000\001\019\000\000\000\217\000\235\002C\000\241\000\000\000\236\001\029\000\246\000\000\001\176\000\000\000\000\003'\000\000\002D\000\000\000\211\000W\000\000\000\000\000\000\000\000\000\217\000\235\000\225\000\000\000\000\000\226\000\000\000\246\000\000\000\000\000\000\000\000\001\007\000\241\000\225\000\211\001\029\000\226\000\000\000\000\000\000\000\217\000\235\002U\001\007\000\000\000\000\000\000\000\000\001\019\000\233\002i\000\000\001\197\002B\000\000\000\236\000\211\000\000\000\000\002\027\000\000\000\233\000\217\000\235\000\225\000\000\000\000\000\226\000\000\000\000\001\019\000\000\000\000\000\000\001\007\000\000\002U\000\236\000\000\000\000\000\225\002/\003\015\000\226\002i\000\241\001\197\002B\001\029\000\000\001\007\001\019\000\233\000\246\003\016\000\000\003H\000W\000\236\000\000\000\000\000\000\002{r\002;\000\241\000\246\000\000\001\029\000\000\000\241\000\000\000\000\001\029\000\233\003\012\003\rr\002;\000\000\000\000\000\000\000\236\000\211\000\000\000\000\005\205\000\000\001\019\000\217\000\235\000\000\000\000\000\000\003\015\000\236\000\000\000\000\000\000\005\217\003G\000\000\000\246\000\000\000\000\000\000\003\016\003\015\003H\000W\000\000\000\000\000\241\000\000\000\000\001\029\000\246\000\000\000\246\003\016\000\000\003H\000W\000\000\000\000\000\241\000\000\000\000\001\029\000\000\000\000\000\000\000\211\000\000\000\000\003\012\003\r\002;\000\217\000\235\001\019\000\000\003\012\003\r
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4035 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+" )
# 1530 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4036 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+." )
# 1555 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3559 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1580 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let tyvar : (string) = Obj.magic tyvar in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tyvar_ in
        let _v =
          let _1 =
            let _1 = 
# 3562 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_alias(ty, tyvar) )
# 1628 "src/ocaml/preprocess/parser_raw.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_tyvar_, _startpos_ty_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1637 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3564 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1643 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1693 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1702 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2799 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklb ~loc:_sloc false body attrs
    )
# 1714 "src/ocaml/preprocess/parser_raw.ml"
           : (Ast_helper.let_binding))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3917 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1740 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3918 "src/ocaml/preprocess/parser_raw.mly"
                                 ( Lident _1 )
# 1765 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 3645 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 1804 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 1872 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1882 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 1888 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3647 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
# 1897 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 3650 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_var _2 )
# 1932 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1941 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1947 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3652 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_any )
# 1975 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1983 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1989 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let tid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2022 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys = 
# 3697 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 2028 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3655 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2033 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2042 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2048 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let tid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2088 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys = 
# 3699 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 2094 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3655 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2099 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_ty_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2109 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2115 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let tid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2170 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys =
                let tys =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2178 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1158 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2183 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3701 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2189 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3655 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2195 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2205 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2211 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3657 "src/ocaml/preprocess/parser_raw.mly"
        ( let (f, c) = _2 in Ptyp_object (f, c) )
# 2253 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2262 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2268 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 3659 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_object ([], Closed) )
# 2303 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2312 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2318 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2358 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys = 
# 3697 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 2364 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3663 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2369 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2379 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2385 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2432 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys = 
# 3699 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 2438 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3663 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2443 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_ty_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2453 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2459 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2521 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys =
                let tys =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2529 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1158 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2534 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3701 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2540 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3663 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2546 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2556 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2562 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3666 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([_2], Closed, None) )
# 2604 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2613 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2619 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2671 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2676 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3711 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2682 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3668 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, None) )
# 2688 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2698 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2704 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2763 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2768 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3711 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2774 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3670 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_2 :: _4, Closed, None) )
# 2780 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2790 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2796 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2848 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2853 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3711 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2859 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3672 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Open, None) )
# 2865 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2875 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2881 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 3674 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([], Open, None) )
# 2916 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2925 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2931 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2983 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2988 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3711 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2994 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3676 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some []) )
# 3000 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3010 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3016 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let xs_inlined1 : (string list) = Obj.magic xs_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _1 =
              let _5 =
                let xs = xs_inlined1 in
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 3083 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1098 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3088 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3739 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3094 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 3102 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3107 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3711 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3113 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3678 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some _5) )
# 3119 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__6_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3129 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3135 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3680 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_extension _1 )
# 3163 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3171 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3682 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3177 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 4104 "src/ocaml/preprocess/parser_raw.mly"
                     ( _1 )
# 3205 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1026 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3213 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 4106 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3219 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string Location.loc) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 4105 "src/ocaml/preprocess/parser_raw.mly"
                                 ( _1 ^ "." ^ _3.txt )
# 3261 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1026 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3270 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 4106 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3276 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4110 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 3327 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.attribute))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = 
# 1973 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3353 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3395 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1975 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_class_attrs ~loc:_sloc _3 _2 )
# 3404 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1977 "src/ocaml/preprocess/parser_raw.mly"
      ( class_of_let_bindings ~loc:_sloc _1 _3 )
# 3448 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3515 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined2_ in
          let _4 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3524 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3530 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1979 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3540 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3614 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3623 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3629 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1979 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3639 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1983 "src/ocaml/preprocess/parser_raw.mly"
      ( Cl.attr _1 _2 )
# 3672 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 3708 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1098 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3713 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1986 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_apply(_1, _2) )
# 3719 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3729 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1989 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3735 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1988 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_extension _1 )
# 3763 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3771 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1989 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3777 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _6 =
            let _1 = _1_inlined2 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3834 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3843 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3849 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2044 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3858 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _6 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3922 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined3_ in
          let _3 =
            let _1 = _1_inlined2 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3931 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3937 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2044 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3946 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3990 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__3_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2047 "src/ocaml/preprocess/parser_raw.mly"
      ( let v, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
# 4002 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4046 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__3_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2051 "src/ocaml/preprocess/parser_raw.mly"
      ( let meth, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
# 4058 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4108 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4117 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2055 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
# 4127 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4177 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4186 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2058 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
# 4196 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4232 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2061 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
# 4243 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2064 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcf_attribute _1 )
# 4271 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcf ~loc:_sloc _1 )
# 4279 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2065 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4285 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1953 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4318 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 = 
# 1956 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_4, _2) )
# 4366 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4375 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1959 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4381 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 1958 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 4416 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4425 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1959 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4431 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v =
          let _1 =
            let _1 = 
# 2020 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4473 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos_e_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4482 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2021 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4488 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v =
          let _1 =
            let _1 = 
# 2020 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4523 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos_e_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4532 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2021 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4538 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3908 "src/ocaml/preprocess/parser_raw.mly"
                                       ( _1 )
# 4564 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2029 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 4607 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 = 
# 2031 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 4663 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 4672 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2032 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4678 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _endpos = _endpos__0_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2034 "src/ocaml/preprocess/parser_raw.mly"
      ( ghpat ~loc:_sloc Ppat_any )
# 4701 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 2161 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4741 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 =
            let _1 = 
# 2162 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ptyp_any )
# 4761 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__0_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _endpos in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 4770 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2163 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4776 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.class_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4826 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4835 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2171 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
# 4845 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = flags;
                  MenhirLib.EngineTypes.startp = _startpos_flags_;
                  MenhirLib.EngineTypes.endp = _endpos_flags_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4906 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) = Obj.magic flags in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _4 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4920 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined3_ in
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let label =
              let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 4930 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 4938 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2196 "src/ocaml/preprocess/parser_raw.mly"
  (
    let mut, virt = flags in
    label, mut, virt, ty
  )
# 4947 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4955 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2174 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
# 4965 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 5026 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _7 =
            let _1 = _1_inlined4 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5040 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__7_ = _endpos__1_inlined4_ in
          let _6 =
            let _1 = _1_inlined3 in
            
# 3525 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5049 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 5057 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5065 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5073 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2178 "src/ocaml/preprocess/parser_raw.mly"
      ( let (p, v) = _3 in
        let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
# 5084 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5134 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5143 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2182 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
# 5153 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5189 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2185 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
# 5200 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2188 "src/ocaml/preprocess/parser_raw.mly"
      ( Pctf_attribute _1 )
# 5228 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1045 "src/ocaml/preprocess/parser_raw.mly"
    ( mkctf ~loc:_sloc _1 )
# 5236 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2189 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5242 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5275 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys =
                let tys = 
# 2147 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5282 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 2153 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5287 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2128 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5293 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5302 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2131 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5308 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5363 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys =
                let tys =
                  let params =
                    let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 5372 "src/ocaml/preprocess/parser_raw.ml"
                     in
                    
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 5377 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 2149 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 5383 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2153 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5389 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2128 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5395 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5405 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2131 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5411 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2130 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_extension _1 )
# 5439 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5447 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2131 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5453 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_type_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 =
                let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 5512 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 2167 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5517 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 991 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5526 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2157 "src/ocaml/preprocess/parser_raw.mly"
      ( Csig.mk _1 _2 )
# 5532 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5540 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2133 "src/ocaml/preprocess/parser_raw.mly"
      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
# 5549 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type) = 
# 2139 "src/ocaml/preprocess/parser_raw.mly"
      ( Cty.attr _1 _2 )
# 5582 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5648 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined2_ in
          let _4 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5657 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 5663 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5673 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5747 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5756 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 5762 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5772 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = 
# 1993 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 5812 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5844 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys =
                let tys = 
# 2147 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5851 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 2153 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5856 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2000 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 5862 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5871 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2011 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5877 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5932 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let tys =
                let tys =
                  let params =
                    let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 5941 "src/ocaml/preprocess/parser_raw.ml"
                     in
                    
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 5946 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 2149 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 5952 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2153 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5958 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2000 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 5964 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5974 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2011 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5980 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.class_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 = 
# 2006 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_2, _4) )
# 6036 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1049 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6045 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2011 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6051 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.pattern) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 =
                let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 6110 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 2038 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6115 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 6124 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2025 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 6130 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6138 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2013 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
# 6147 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = 
# 2116 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6173 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let label = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 6222 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2122 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6227 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6237 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2123 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6243 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6293 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let label = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 6304 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2122 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6309 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6319 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2123 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6325 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_domain_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let label = 
# 3611 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 6368 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2122 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6373 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_domain_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6383 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2123 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6389 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_type_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _8 : unit = Obj.magic _8 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6475 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let a =
              let attrs2 =
                let _1 = _1_inlined3 in
                
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6494 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined3_ in
              let id =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 6506 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6514 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2263 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
    )
# 6529 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 6535 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2251 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6541 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc option * Parsetree.class_type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3905 "src/ocaml/preprocess/parser_raw.mly"
                                           ( _1 )
# 6567 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : (Asttypes.direction_flag) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6638 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 6644 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2564 "src/ocaml/preprocess/parser_raw.mly"
      ( Extensions.From_to(_2, _4, _6, _5) )
# 6650 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension_clause))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6708 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 6714 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2565 "src/ocaml/preprocess/parser_raw.mly"
                                  ( Extensions.In(_2, _4) )
# 6720 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension_clause))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 6762 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6767 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2570 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard=None} : Extensions.comprehension)] )
# 6773 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 6829 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6834 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2572 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard= Some _4} : Extensions.comprehension)] )
# 6840 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 6882 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6887 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2574 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard=None} : Extensions.comprehension) :: _3 )
# 6893 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Extensions.comprehension list) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 6949 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6954 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2576 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard= Some _4}: Extensions.comprehension) :: _5 )
# 6960 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7002 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7007 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2570 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard=None} : Extensions.comprehension)] )
# 7013 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7069 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7074 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2572 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard= Some _4} : Extensions.comprehension)] )
# 7080 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7122 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7127 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2574 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard=None} : Extensions.comprehension) :: _3 )
# 7133 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Extensions.comprehension list) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7189 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7194 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2576 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard= Some _4}: Extensions.comprehension) :: _5 )
# 7200 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 794 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 7222 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3785 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _1 in Pconst_integer (n, m) )
# 7230 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 752 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 7251 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3786 "src/ocaml/preprocess/parser_raw.mly"
                 ( Pconst_char _1 )
# 7259 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 848 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 7280 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3787 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (s, strloc, d) = _1 in Pconst_string (s, strloc, d) )
# 7288 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 772 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 7309 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3788 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _1 in Pconst_float (f, m) )
# 7317 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3860 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "[]" )
# 7349 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3861 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "()" )
# 7381 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "false" )
# 7406 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "true" )
# 7431 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 7452 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3866 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7460 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 3857 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 7500 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3867 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7505 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3868 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7531 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3871 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7556 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _3 = 
# 3857 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 7610 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3872 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1,_3) )
# 7615 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 3857 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 7656 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3873 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 7661 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3874 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 7687 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type) = 
# 2207 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3 )
# 7726 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let tys =
            let xs =
              let xs = 
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 7754 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 250 "<standard.mly>"
    ( List.rev xs )
# 7759 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1134 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7765 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3390 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 7771 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.constructor_arguments))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let tys =
            let xs =
              let xs = 
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 7814 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 250 "<standard.mly>"
    ( List.rev xs )
# 7819 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1134 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7825 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3390 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 7831 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.constructor_arguments))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_arguments) = 
# 3392 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_record _2 )
# 7871 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 3311 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 7896 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let cs = 
# 1219 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 7922 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3313 "src/ocaml/preprocess/parser_raw.mly"
      ( cs )
# 7927 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3550 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7954 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3540 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 7959 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 3542 "src/ocaml/preprocess/parser_raw.mly"
      ( Typ.attr _1 _2 )
# 7992 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3966 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Upto )
# 8017 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3967 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Downto )
# 8042 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4182 "src/ocaml/preprocess/parser_raw.mly"
    ( expr_of_lwt_bindings ~loc:_loc _1 (merloc _endpos__2_ _3) )
# 8085 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _5 =
            let xs =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 8149 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1191 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8154 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2854 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8160 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos_xs_ in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8171 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8177 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4184 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
          (Pexp_match(Fake.app Fake.Lwt.un_lwt _3, List.rev _5)) _2 in
      Fake.app Fake.Lwt.in_lwt expr )
# 8188 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8240 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8246 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4188 "src/ocaml/preprocess/parser_raw.mly"
    ( reloc_exp ~loc:_loc (Fake.app Fake.Lwt.in_lwt _3) )
# 8255 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _5 =
            let xs =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 8319 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1191 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8324 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2854 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8330 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos_xs_ in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8341 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8347 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4190 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
        (Pexp_try(Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 )
# 8357 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8423 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8429 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 4193 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.app (Fake.app Fake.Lwt.finally_ _3) _5 )
# 8435 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let xs =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 8513 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1191 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8518 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2854 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8524 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8534 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8540 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4195 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
        (Pexp_try (Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 in
      Fake.app (Fake.app Fake.Lwt.finally_ expr) _7 )
# 8551 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8624 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8630 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__6_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4199 "src/ocaml/preprocess/parser_raw.mly"
  ( let expr = Pexp_while (_3, Fake.(app Lwt.un_lwt _5)) in
    Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8640 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8741 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8747 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__10_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4202 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = Pexp_for (_3, _5, _7, _6, Fake.(app Lwt.un_lwt _9)) in
      Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8757 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8844 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8850 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__8_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4205 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
          (Pexp_let (Nonrecursive, [Vb.mk _3 (Fake.(app Lwt.un_stream _5))],
             Fake.(app Lwt.unit_lwt _7)))
          _2
    )
# 8863 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2358 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 8889 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _4 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8970 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8980 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8986 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2410 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letmodule(_4, _5, (merloc _endpos__6_ _7)), _3 )
# 8992 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9003 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined4;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _2_inlined1 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2_inlined1 in
        let _1_inlined3 : (string) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _4 =
              let (_endpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _2, _1) = (_endpos__1_inlined4_, _endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined4, _2_inlined1, _1_inlined3) in
              let _3 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9091 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__3_ = _endpos__1_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 9102 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3375 "src/ocaml/preprocess/parser_raw.mly"
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
# 9112 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9122 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9128 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2412 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letexception(_4, _6), _3 )
# 9134 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9145 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _4 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9219 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9225 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 9231 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2414 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 9238 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9249 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (string Location.loc option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _4 =
              let (_1_inlined1, _1) = (_1_inlined3, _1_inlined2) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9330 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9336 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 9342 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2414 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 9349 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9360 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _3 =
              let xs =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 9411 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1191 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9416 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2854 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9422 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9432 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9438 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2418 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_function _3, _2 )
# 9444 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9455 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9515 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9521 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2420 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _3 in
        Pexp_fun(l, o, p, _4), _2 )
# 9528 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9539 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _5 = 
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9616 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9625 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9631 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__7_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2423 "src/ocaml/preprocess/parser_raw.mly"
      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
# 9640 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9651 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _5 =
              let xs =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 9716 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1191 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9721 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2854 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9727 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9737 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9743 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2425 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_match(_3, _5), _2 )
# 9749 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9760 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _5 =
              let xs =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 9825 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1191 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9830 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2854 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9836 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9846 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9852 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2427 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_try(_3, _5), _2 )
# 9858 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9869 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9950 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9956 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2433 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), Some (merloc _endpos__6_ _7)), _2 )
# 9962 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9973 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10040 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10046 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2435 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), None), _2 )
# 10052 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10063 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10137 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10143 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_while(_3, (merloc _endpos__4_ _5)), _2 )
# 10149 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10160 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10262 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10268 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2440 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_for(_3, (merloc _endpos__4_ _5), (merloc _endpos__6_ _7), _6, (merloc _endpos__8_ _9)), _2 )
# 10274 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10285 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10338 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10344 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2442 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_assert _3, _2 )
# 10350 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10361 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10414 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10420 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2444 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_lazy _3, _2 )
# 10426 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10437 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined3 : (Parsetree.pattern) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _3 =
              let _1 = _1_inlined3 in
              let _2 =
                let _1 =
                  let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 10504 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 2038 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10509 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 10518 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2025 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 10524 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10534 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10540 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2446 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_object _3, _2 )
# 10546 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10557 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 10594 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1098 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 10599 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2454 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, _2) )
# 10605 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10615 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10621 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let es =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 10652 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1158 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 10657 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2882 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 10663 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2456 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_tuple(_1) )
# 10669 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10679 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10685 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 10725 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2458 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, Some _2) )
# 10731 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10741 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10747 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2460 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, Some _2) )
# 10782 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10791 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10797 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10832 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3831 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10845 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10854 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10860 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10870 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10876 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10911 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3832 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10924 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10933 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10939 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10949 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10955 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10990 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3833 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 11003 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11012 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11018 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11028 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11034 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 11069 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3834 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 11082 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11091 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11097 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11107 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11113 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 788 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 11148 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3835 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 11161 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11170 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11176 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11186 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11192 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3836 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 11236 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11244 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11250 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11260 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11266 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3837 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 11310 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11318 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11324 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11334 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11340 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3838 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 11384 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11392 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11398 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11408 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11414 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3839 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 11458 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11466 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11472 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11482 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11488 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3840 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 11532 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11540 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11546 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11556 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11562 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3841 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 11606 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11614 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11620 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11630 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11636 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 11680 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11688 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11694 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11704 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11710 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3843 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 11754 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11762 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11768 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11778 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11784 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3844 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 11828 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11836 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11842 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11852 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11858 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3845 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 11902 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11910 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11916 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11926 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11932 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3846 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 11976 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11984 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11990 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12000 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12006 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3847 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 12050 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12058 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12064 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12074 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12080 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3848 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 12124 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12132 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12138 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12148 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12154 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3849 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 12198 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12206 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12212 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12222 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12228 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3850 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 12272 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12280 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2462 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12286 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12296 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12302 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2464 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuminus ~oploc:_loc__1_ _1 _2 )
# 12339 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12349 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12355 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2466 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuplus ~oploc:_loc__1_ _1 _2 )
# 12392 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12402 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12408 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2365 "src/ocaml/preprocess/parser_raw.mly"
      ( expr_of_let_bindings ~loc:_sloc _1 (merloc _endpos__2_ _3) )
# 12452 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.expression) = Obj.magic body in
        let _3 : unit = Obj.magic _3 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _1 : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12495 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _v =
          let pbop_op =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12508 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_pbop_op_ = _startpos__1_ in
          let _endpos = _endpos_body_ in
          let _symbolstartpos = _startpos_pbop_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2367 "src/ocaml/preprocess/parser_raw.mly"
      ( let (pbop_pat, pbop_exp, rev_ands) = bindings in
        let ands = List.rev rev_ands in
        let pbop_loc = make_loc _sloc in
        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        mkexp ~loc:_sloc (Pexp_letop{ let_; ands; body}) )
# 12522 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2373 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;(merloc _endpos__2_ _3)])) )
# 12567 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12603 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 12613 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12621 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2375 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
# 12630 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12690 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2377 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
# 12699 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2379 "src/ocaml/preprocess/parser_raw.mly"
      ( array_set ~loc:_sloc _1 _4 _7 )
# 12771 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2381 "src/ocaml/preprocess/parser_raw.mly"
      ( string_set ~loc:_sloc _1 _4 _7 )
# 12843 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2383 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_set ~loc:_sloc _1 _4 _7 )
# 12915 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12978 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12988 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2385 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident bracket _2 _1 _4 _7 )
# 12996 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13059 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 13069 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2387 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident paren _2 _1 _4 _7 )
# 13077 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13140 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 13150 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2389 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident brace _2 _1 _4 _7 )
# 13158 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13233 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _6 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 13245 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__9_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2392 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) bracket _4 _1 _6 _9 )
# 13253 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13328 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _6 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 13340 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__9_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2395 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) paren _4 _1 _6 _9  )
# 13348 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13423 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _6 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 13435 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__9_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2398 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) brace _4 _1 _6 _9 )
# 13443 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2400 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.attr _1 _2 )
# 13476 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2406 "src/ocaml/preprocess/parser_raw.mly"
     ( mkexp_stack ~loc:_sloc _2 )
# 13512 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 4130 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 13531 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string Location.loc option) = 
# 4131 "src/ocaml/preprocess/parser_raw.mly"
                    ( Some _2 )
# 13563 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 4141 "src/ocaml/preprocess/parser_raw.mly"
                                             ( (_2, _3) )
# 13609 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 850 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 13630 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4143 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 13642 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs =
            let _1 = _1_inlined3 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13699 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined3_ in
          let lid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13711 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let cid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13722 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3464 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13732 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs =
            let _1 = _1_inlined2 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13782 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined2_ in
          let lid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13794 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let cid =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13804 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_cid_ = _startpos__1_ in
          let _1 = 
# 3942 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 13811 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos_cid_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3464 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13820 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4118 "src/ocaml/preprocess/parser_raw.mly"
    ( mark_symbol_docs _sloc;
      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 13872 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.attribute))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let params = 
# 2147 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 13892 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1964 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 13897 "src/ocaml/preprocess/parser_raw.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let params =
            let params =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 13940 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 13945 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2149 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 13951 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1964 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 13957 "src/ocaml/preprocess/parser_raw.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2826 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 13983 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2828 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _3 _1 )
# 14026 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2867 "src/ocaml/preprocess/parser_raw.mly"
      ( (merloc _endpos__1_ _2) )
# 14059 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 = 
# 2869 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint ((merloc _endpos__3_ _4), _2) )
# 14107 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 14116 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2870 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 14122 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2873 "src/ocaml/preprocess/parser_raw.mly"
      (
       let (l,o,p) = _1 in
       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
      )
# 14162 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14217 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2878 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 14225 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3576 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 14251 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3578 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 14276 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _startpos = _startpos__1_ in
          (
# 1370 "src/ocaml/preprocess/parser_raw.mly"
      ( _startpos, Unit )
# 14310 "src/ocaml/preprocess/parser_raw.ml"
           : (Lexing.position * Parsetree.functor_parameter))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let x =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14370 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos = _startpos__1_ in
          (
# 1373 "src/ocaml/preprocess/parser_raw.mly"
      ( _startpos, Named (x, mty) )
# 14377 "src/ocaml/preprocess/parser_raw.ml"
           : (Lexing.position * Parsetree.functor_parameter))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1362 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14403 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3379 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],None) )
# 14421 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3380 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,None) )
# 14453 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3382 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,Some _4) )
# 14499 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3384 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 14531 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs =
            let _1 = _1_inlined2 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14580 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined2_ in
          let cid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14592 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3327 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14606 "src/ocaml/preprocess/parser_raw.ml"
           : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14651 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined1_ in
          let cid =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14662 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_cid_ = _startpos__1_ in
          let _1 = 
# 3942 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 14669 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos_cid_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3327 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14682 "src/ocaml/preprocess/parser_raw.ml"
           : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14758 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14773 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 14782 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1080 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14787 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14793 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let kind_priv_manifest = 
# 3265 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 14799 "src/ocaml/preprocess/parser_raw.ml"
           in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14809 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let flag = 
# 3962 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 14815 "src/ocaml/preprocess/parser_raw.ml"
           in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14822 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3202 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14838 "src/ocaml/preprocess/parser_raw.ml"
           : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined4;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined4 : unit = Obj.magic _1_inlined4 in
        let _1_inlined3 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14919 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined5 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14935 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined5_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 14944 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1080 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14949 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14955 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let kind_priv_manifest = 
# 3265 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 14961 "src/ocaml/preprocess/parser_raw.ml"
           in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14971 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let flag =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 3963 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 14982 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14990 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3202 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15006 "src/ocaml/preprocess/parser_raw.ml"
           : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15074 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15089 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 15098 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1080 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 15103 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15109 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15120 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let flag = 
# 3958 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 15126 "src/ocaml/preprocess/parser_raw.ml"
           in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15133 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3202 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15149 "src/ocaml/preprocess/parser_raw.ml"
           : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined3 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15223 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15239 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 15248 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1080 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 15253 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15259 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15270 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let flag = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 15276 "src/ocaml/preprocess/parser_raw.ml"
           in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15283 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3202 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15299 "src/ocaml/preprocess/parser_raw.ml"
           : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15322 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3801 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 15330 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15351 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3802 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 15359 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure) = 
# 1251 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15391 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.attribute list) = 
# 1625 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 15416 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.attribute list) = 
# 1627 "src/ocaml/preprocess/parser_raw.mly"
      ( [include_functor_attr] )
# 15448 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string) = 
# 3853 "src/ocaml/preprocess/parser_raw.mly"
  ( "" )
# 15466 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3854 "src/ocaml/preprocess/parser_raw.mly"
              ( ";.." )
# 15498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.signature) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.signature) = 
# 1257 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15530 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 4146 "src/ocaml/preprocess/parser_raw.mly"
                                                    ( (_2, _3) )
# 15576 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 853 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 15597 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4148 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 15609 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15658 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag * Asttypes.global_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _5 =
            let _1 = _1_inlined3 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15670 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 3529 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15679 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 15687 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15695 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3401 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let mut, gbl = _1 in
        mkld_global_maybe gbl
          (Type.field _2 _4 ~mut ~attrs:_5 ~loc:(make_loc _sloc) ~info) )
# 15711 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.label_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15774 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag * Asttypes.global_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _7 =
            let _1 = _1_inlined4 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15786 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__7_ = _endpos__1_inlined4_ in
          let _5 =
            let _1 = _1_inlined3 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15795 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 3529 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15804 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 15812 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15820 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3409 "src/ocaml/preprocess/parser_raw.mly"
      ( let info =
          match rhs_info _endpos__5_ with
          | Some _ as info_before_semi -> info_before_semi
          | None -> symbol_info _endpos
       in
       let mut, gbl = _1 in
       mkld_global_maybe gbl
         (Type.field _2 _4 ~mut ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info) )
# 15840 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.label_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3395 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 15866 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3396 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 15891 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.label_declaration list) = 
# 3397 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 :: _2 )
# 15923 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15944 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15958 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15967 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2338 "src/ocaml/preprocess/parser_raw.mly"
      ( x )
# 15973 "src/ocaml/preprocess/parser_raw.ml"
           : (string * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cty;
          MenhirLib.EngineTypes.startp = _startpos_cty_;
          MenhirLib.EngineTypes.endp = _endpos_cty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cty : (Parsetree.core_type) = Obj.magic cty in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16009 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cty_ in
        let _v =
          let x =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16023 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16032 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_x_ = _startpos__1_ in
          let _endpos = _endpos_cty_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2340 "src/ocaml/preprocess/parser_raw.mly"
      ( let lab, pat = x in
        lab,
        mkpat ~loc:_sloc (Ppat_constraint (pat, cty)) )
# 16044 "src/ocaml/preprocess/parser_raw.ml"
           : (string * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3884 "src/ocaml/preprocess/parser_raw.mly"
                                        ( _1 )
# 16070 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2706 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, _1) )
# 16095 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 795 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16123 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, _2) )
# 16131 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16158 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v =
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          (
# 2710 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Labelled label, mkexpvar ~loc label) )
# 16170 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = label;
              MenhirLib.EngineTypes.startp = _startpos_label_;
              MenhirLib.EngineTypes.endp = _endpos_label_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ty : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic ty in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16218 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          (
# 2713 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled label, mkexp_constraint ~loc:(_startpos__2_, _endpos)
                           (mkexpvar ~loc:_loc_label_ label) ty) )
# 16232 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16260 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v =
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          (
# 2716 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Optional label, mkexpvar ~loc label) )
# 16272 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16301 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2719 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _2) )
# 16309 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined1 in
            
# 2334 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16365 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 16371 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2304 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _4), _5, mkpat_local_if _3 (snd _4)) )
# 16376 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2334 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16440 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 16446 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2304 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _4), _5, mkpat_local_if _3 (snd _4)) )
# 16451 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16479 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16495 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16504 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2306 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _2), None, snd _2) )
# 16510 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16560 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined1 in
            
# 2334 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16571 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 16577 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2308 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _5, mkpat_local_if _3 _4) )
# 16582 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16639 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2334 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16650 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 16656 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2308 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _5, mkpat_local_if _3 _4) )
# 16661 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16690 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2310 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, None, _2) )
# 16698 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 16745 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2312 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _4), None, mkpat_local_if _3 (snd _4)) )
# 16750 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 16805 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2312 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _4), None, mkpat_local_if _3 (snd _4)) )
# 16810 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16838 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16854 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16863 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2314 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 16869 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 795 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16898 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2316 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, None, _2) )
# 16906 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 795 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16955 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2318 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, None, mkpat_stack _4) )
# 16963 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2320 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, None, _1) )
# 16988 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2322 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, None, mkpat_stack _3) )
# 17034 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17071 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2730 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _2) )
# 17077 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17129 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__2_ = _startpos__1_ in
          let _1 = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 17136 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2732 "src/ocaml/preprocess/parser_raw.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_local_if _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_local_if _1 ~loc:_sloc
            (wrap_exp_local_if _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 17165 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17225 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 17232 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2732 "src/ocaml/preprocess/parser_raw.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_local_if _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_local_if _1 ~loc:_sloc
            (wrap_exp_local_if _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 17260 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 17331 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1098 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 17336 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3511 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17342 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__4_ = _startpos_xs_ in
          let _2 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17353 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__2_ = _startpos__1_ in
          let _1 = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 17360 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2754 "src/ocaml/preprocess/parser_raw.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_local_if _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_local_if _1 ~loc:_sloc _8 in
        (pat, exp) )
# 17380 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 17458 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1098 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 17463 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3511 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17469 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__4_ = _startpos_xs_ in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17481 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 17488 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2754 "src/ocaml/preprocess/parser_raw.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_local_if _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_local_if _1 ~loc:_sloc _8 in
        (pat, exp) )
# 17507 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 = 
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 17583 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17592 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2764 "src/ocaml/preprocess/parser_raw.mly"
      ( let exp, poly =
          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
        let loc = (_startpos__1_, _endpos__6_) in
        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
# 17604 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2769 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _3) )
# 17644 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2771 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__1_, _endpos__3_) in
        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
# 17698 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17743 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2774 "src/ocaml/preprocess/parser_raw.mly"
      ( (_2, mkexp_stack ~loc:_sloc _3) )
# 17752 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined2 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17817 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined2_ in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17826 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2789 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17838 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17844 "src/ocaml/preprocess/parser_raw.ml"
           : (Ast_helper.let_bindings))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2780 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 17877 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined2 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17934 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined2_ in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17943 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let ext = 
# 4134 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 17949 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2789 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17960 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17966 "src/ocaml/preprocess/parser_raw.ml"
           : (Ast_helper.let_bindings))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18038 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let attrs1 =
              let _1 = _1_inlined2 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18047 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let ext =
              let _startpos__1_ = _startpos__1_inlined1_ in
              let _endpos = _endpos__2_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 4135 "src/ocaml/preprocess/parser_raw.mly"
                    ( not_expecting _loc "extension"; None )
# 18058 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2789 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 18070 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 18076 "src/ocaml/preprocess/parser_raw.ml"
           : (Ast_helper.let_bindings))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2780 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 18109 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2350 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18134 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 2352 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_1, _3) )
# 18175 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 18184 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2353 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18190 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_exp_ in
        let _v =
          let pat =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2726 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18228 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2806 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 18234 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pat;
                  MenhirLib.EngineTypes.startp = _startpos_pat_;
                  MenhirLib.EngineTypes.endp = _endpos_pat_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _4 : unit = Obj.magic _4 in
        let typ : (Parsetree.core_type) = Obj.magic typ in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2808 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos_pat_, _endpos_typ_) in
        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) )
# 18289 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pat;
              MenhirLib.EngineTypes.startp = _startpos_pat_;
              MenhirLib.EngineTypes.endp = _endpos_pat_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2811 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 18328 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_body_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = 
# 2815 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp = body in
        let_pat, let_exp, [] )
# 18354 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1 : (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18388 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_bindings_ in
        let _endpos = _endpos_body_ in
        let _v =
          let pbop_op =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18402 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_body_ in
          let _symbolstartpos = _startpos_bindings_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2818 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp, rev_ands = bindings in
        let pbop_pat, pbop_exp = body in
        let pbop_loc = make_loc _sloc in
        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        let_pat, let_exp, and_ :: rev_ands )
# 18415 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 18434 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18500 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18516 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18528 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18536 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1942 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
  )
# 18551 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 18557 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_description list) = 
# 208 "<standard.mly>"
    ( [] )
# 18576 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_description list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18649 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18665 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18677 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18685 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2241 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18700 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 18706 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_description list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 18725 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18798 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18814 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18826 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18834 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2280 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18849 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 18855 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_binding list) = 
# 208 "<standard.mly>"
    ( [] )
# 18874 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_binding list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18938 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let name =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18950 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18958 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1610 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Mb.mk name body ~attrs ~loc ~text ~docs
  )
# 18973 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 18979 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_binding list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 18998 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19069 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let name =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19081 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19089 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1900 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let loc = make_loc _sloc in
    let text = symbol_text _symbolstartpos in
    Md.mk name mty ~attrs ~loc ~text ~docs
  )
# 19104 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19110 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 208 "<standard.mly>"
    ( [] )
# 19129 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 210 "<standard.mly>"
    ( x :: xs )
# 19161 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 19179 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = kind_priv_manifest;
                MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 19246 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let xs = xs_inlined1 in
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19262 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let cstrs =
              let _1 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 19271 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1080 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 19276 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19282 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19293 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19301 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3219 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 19317 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19323 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 19342 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = params;
                      MenhirLib.EngineTypes.startp = _startpos_params_;
                      MenhirLib.EngineTypes.endp = _endpos_params_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 19416 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let xs = xs_inlined1 in
            let attrs2 =
              let _1 = _1_inlined4 in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19432 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined4_ in
            let cstrs =
              let _1 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 19441 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1080 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 19446 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19452 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let kind_priv_manifest = 
# 3265 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 19458 "src/ocaml/preprocess/parser_raw.ml"
             in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19468 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19476 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3219 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 19492 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19498 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 208 "<standard.mly>"
    ( [] )
# 19517 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 210 "<standard.mly>"
    ( x :: xs )
# 19549 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.signature_item list list) = 
# 208 "<standard.mly>"
    ( [] )
# 19567 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              
# 1006 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos )
# 19603 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1759 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19609 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19615 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : (Parsetree.signature_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              
# 1004 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos @ [_1] )
# 19652 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1759 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19658 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19664 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 208 "<standard.mly>"
    ( [] )
# 19683 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let ys =
                let items = 
# 1066 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 19719 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 19724 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let xs =
                let _startpos = _startpos__1_ in
                
# 1002 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 19732 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 19738 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1509 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19744 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19750 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let ys =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                let items =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19806 "src/ocaml/preprocess/parser_raw.ml"
                         in
                        
# 1500 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 19811 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      let _startpos__1_ = _startpos_e_ in
                      let _startpos = _startpos__1_ in
                      
# 1000 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19819 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    
# 1019 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 19829 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 19835 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 19841 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let xs =
                let _startpos = _startpos__1_ in
                
# 1002 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 19849 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 19855 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1509 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19861 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19867 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              
# 1000 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19904 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1509 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19910 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19916 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_field list list) = 
# 208 "<standard.mly>"
    ( [] )
# 19935 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_type_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _startpos = _startpos__1_ in
            
# 1014 "src/ocaml/preprocess/parser_raw.mly"
  ( text_csig _startpos @ [_1] )
# 19970 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 19976 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_type_field list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_field list list) = 
# 208 "<standard.mly>"
    ( [] )
# 19995 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _startpos = _startpos__1_ in
            
# 1012 "src/ocaml/preprocess/parser_raw.mly"
  ( text_cstr _startpos @ [_1] )
# 20030 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20036 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.class_field list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 208 "<standard.mly>"
    ( [] )
# 20055 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _startpos = _startpos__1_ in
            
# 1000 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 20090 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20096 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.toplevel_phrase list list) = 
# 208 "<standard.mly>"
    ( [] )
# 20115 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let x =
                let _1 = 
# 1066 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 20151 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1296 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20156 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 180 "<standard.mly>"
    ( x )
# 20162 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1308 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 20168 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20174 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let x =
                let _1 = _1_inlined1 in
                let _1 =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20230 "src/ocaml/preprocess/parser_raw.ml"
                         in
                        
# 1500 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 20235 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      
# 1010 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 20241 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 1008 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 20249 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 20255 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1296 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20261 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 180 "<standard.mly>"
    ( x )
# 20267 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1308 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 20273 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20279 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _1 = 
# 1010 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 20315 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _startpos = _startpos__1_ in
              
# 1008 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 20321 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1308 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 20327 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20333 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                
# 1019 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 20373 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _startpos = _startpos__1_ in
              
# 1008 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 20380 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1308 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 20386 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20392 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = opat;
          MenhirLib.EngineTypes.startp = _startpos_opat_;
          MenhirLib.EngineTypes.endp = _endpos_opat_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = octy;
            MenhirLib.EngineTypes.startp = _startpos_octy_;
            MenhirLib.EngineTypes.endp = _endpos_octy_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_opat_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 20433 "src/ocaml/preprocess/parser_raw.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20443 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3105 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20465 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1235 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 20471 "src/ocaml/preprocess/parser_raw.ml"
           : ((Longident.t Location.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = opat;
            MenhirLib.EngineTypes.startp = _startpos_opat_;
            MenhirLib.EngineTypes.endp = _endpos_opat_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = octy;
              MenhirLib.EngineTypes.startp = _startpos_octy_;
              MenhirLib.EngineTypes.endp = _endpos_octy_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 123 "<standard.mly>"
    ( Some x )
# 20519 "src/ocaml/preprocess/parser_raw.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20529 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3105 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20551 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1235 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 20557 "src/ocaml/preprocess/parser_raw.ml"
           : ((Longident.t Location.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = y;
            MenhirLib.EngineTypes.startp = _startpos_y_;
            MenhirLib.EngineTypes.endp = _endpos_y_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = opat;
                MenhirLib.EngineTypes.startp = _startpos_opat_;
                MenhirLib.EngineTypes.endp = _endpos_opat_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = octy;
                  MenhirLib.EngineTypes.startp = _startpos_octy_;
                  MenhirLib.EngineTypes.endp = _endpos_octy_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit option) = Obj.magic _4 in
        let y : unit = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20624 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3105 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20646 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1237 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], Some y )
# 20652 "src/ocaml/preprocess/parser_raw.ml"
           : ((Longident.t Location.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = opat;
              MenhirLib.EngineTypes.startp = _startpos_opat_;
              MenhirLib.EngineTypes.endp = _endpos_opat_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = octy;
                MenhirLib.EngineTypes.startp = _startpos_octy_;
                MenhirLib.EngineTypes.endp = _endpos_octy_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20712 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3105 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20734 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1241 "src/ocaml/preprocess/parser_raw.mly"
    ( let xs, y = tail in
      x :: xs, y )
# 20741 "src/ocaml/preprocess/parser_raw.ml"
           : ((Longident.t Location.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2840 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 20767 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2842 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_exp_stack (mkexp_constraint ~loc:_sloc _3 _1) )
# 20810 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2846 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 20843 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2848 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 20879 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 20934 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2850 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 20942 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _4 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _5 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21006 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21017 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 21023 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _startpos = _startpos__1_ in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc = (_startpos, _endpos) in
          (
# 4172 "src/ocaml/preprocess/parser_raw.mly"
      ( let (ext, attr) = _2 in
        mklbs ~loc:_loc ext _3 (mklb ~loc:_loc__4_ true _4 (attr@_5)) )
# 21034 "src/ocaml/preprocess/parser_raw.ml"
           : (Ast_helper.let_bindings))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast_helper.let_bindings) = 
# 4176 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21060 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 4177 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 21092 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = 
# 2858 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_ _3) )
# 21131 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.case) = 
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 ~guard:(merloc _endpos__2_ _3) (merloc _endpos__4_ _5) )
# 21184 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2862 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_
                       (Exp.unreachable ~loc:(make_loc _loc__3_) ())) )
# 21226 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.case))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21290 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v =
          let head =
            let _6 =
              let _1 = _1_inlined3 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21302 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__6_ = _endpos__1_inlined3_ in
            let _4 =
              let _1 = _1_inlined2 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21311 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              
# 3529 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21320 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _1 =
              let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21327 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21335 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3764 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21350 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3745 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 21356 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tail_ in
        let _v =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3775 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21401 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3745 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 21407 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21464 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let head =
            let _6 =
              let _1 = _1_inlined3 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21476 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__6_ = _endpos__1_inlined3_ in
            let _4 =
              let _1 = _1_inlined2 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21485 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              
# 3529 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21494 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _1 =
              let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21501 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21509 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3764 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21524 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3748 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21530 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__2_ in
        let _v =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3775 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21568 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3748 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21574 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21617 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let head =
            let _4 =
              let _1 = _1_inlined2 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21629 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              
# 3529 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21638 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _1 =
              let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21645 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21653 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__4_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3757 "src/ocaml/preprocess/parser_raw.mly"
    ( let info = symbol_info _endpos in
      let attrs = add_info_attrs info _4 in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21664 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3751 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21670 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3775 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21701 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3751 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21707 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 3753 "src/ocaml/preprocess/parser_raw.mly"
      ( [], Open )
# 21733 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = private_;
                MenhirLib.EngineTypes.startp = _startpos_private__;
                MenhirLib.EngineTypes.endp = _endpos_private__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21780 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let private_ : (Asttypes.private_flag) = Obj.magic private_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let ty =
            let _1 = _1_inlined2 in
            
# 3525 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21793 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let label =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21801 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21809 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21815 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _1 = 
# 4024 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21820 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2086 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, private_, Cfk_virtual ty), attrs )
# 21825 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21867 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21880 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21888 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21894 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _1 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21899 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2088 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21907 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21955 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21969 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21977 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21985 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 21991 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2088 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21999 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22062 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _6 =
            let _1 = _1_inlined2 in
            
# 3525 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22075 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__6_ = _startpos__1_inlined2_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 22084 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22092 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22098 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _1 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 22103 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2094 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 22111 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22180 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _6 =
            let _1 = _1_inlined3 in
            
# 3525 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22194 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__6_ = _startpos__1_inlined3_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 22203 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22211 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22219 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 22225 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2094 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 22233 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22317 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v =
          let _7 = 
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 22328 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _startpos__7_ = _startpos_xs_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 22336 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22344 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined1_ in
          let _2 = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22351 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
          let _1 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 22357 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__11_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2100 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 22384 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined2;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22474 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v =
          let _7 = 
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 22486 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _startpos__7_ = _startpos_xs_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 22494 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22502 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22511 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
          let _1 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 22518 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__11_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2100 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 22544 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22567 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22575 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22608 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22618 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22639 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22647 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22680 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22690 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3916 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22716 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22721 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3857 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 22763 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3916 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22768 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22774 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3916 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22801 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22806 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 3916 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22849 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22855 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _3 =
            let _1 = 
# 3857 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 22911 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3916 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22916 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22922 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 3916 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22965 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22971 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22997 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 23036 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23057 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 23065 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23098 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 23108 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23129 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 23137 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23170 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 23180 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3877 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 23205 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 23244 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3893 "src/ocaml/preprocess/parser_raw.mly"
                                            ( _1 )
# 23269 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3895 "src/ocaml/preprocess/parser_raw.mly"
      ( lapply ~loc:_sloc _1 _3 )
# 23319 "src/ocaml/preprocess/parser_raw.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3890 "src/ocaml/preprocess/parser_raw.mly"
                                        ( _1 )
# 23345 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1569 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 23377 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _3 : unit = Obj.magic _3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v =
          let _1 =
            let _1 = 
# 1572 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_constraint(me, mty) )
# 23425 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos_me_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23434 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1576 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23440 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg_and_pos;
            MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
            MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let arg_and_pos : (Lexing.position * Parsetree.functor_parameter) = Obj.magic arg_and_pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v =
          let _1 =
            let _1 = 
# 1574 "src/ocaml/preprocess/parser_raw.mly"
        ( let (_, arg) = arg_and_pos in
          Pmod_functor(arg, body) )
# 23476 "src/ocaml/preprocess/parser_raw.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_and_pos_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23485 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1576 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23491 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = 
# 1824 "src/ocaml/preprocess/parser_raw.mly"
      ( mty )
# 23524 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg_and_pos;
            MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
            MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_type) = Obj.magic body in
        let arg_and_pos : (Lexing.position * Parsetree.functor_parameter) = Obj.magic arg_and_pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v =
          let _1 =
            let _1 = 
# 1827 "src/ocaml/preprocess/parser_raw.mly"
        ( let (_, arg) = arg_and_pos in
          Pmty_functor(arg, body) )
# 23559 "src/ocaml/preprocess/parser_raw.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_and_pos_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1041 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23568 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1830 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23574 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.structure) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23624 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1396 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_structure s) )
# 23633 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _4 : unit = Obj.magic _4 in
        let args : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic args in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23690 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_me_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1402 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mod_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (startpos, arg) ->
            mkmod ~loc:(startpos, _endpos) (Pmod_functor (arg, acc))
          ) me args
        ) )
# 23703 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1408 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 23729 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = attr;
          MenhirLib.EngineTypes.startp = _startpos_attr_;
          MenhirLib.EngineTypes.endp = _endpos_attr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let attr : (Parsetree.attribute) = Obj.magic attr in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_attr_ in
        let _v : (Parsetree.module_expr) = 
# 1410 "src/ocaml/preprocess/parser_raw.mly"
      ( Mod.attr me attr )
# 23761 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let x =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23793 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1414 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_ident x )
# 23799 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23808 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1430 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23814 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me2;
          MenhirLib.EngineTypes.startp = _startpos_me2_;
          MenhirLib.EngineTypes.endp = _endpos_me2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me1;
            MenhirLib.EngineTypes.startp = _startpos_me1_;
            MenhirLib.EngineTypes.endp = _endpos_me1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me2 : (Parsetree.module_expr) = Obj.magic me2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos_me2_ in
        let _v =
          let _1 =
            let _1 = 
# 1417 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_apply(me1, me2) )
# 23849 "src/ocaml/preprocess/parser_raw.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_me2_, _startpos_me1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23858 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1430 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23864 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me1;
              MenhirLib.EngineTypes.startp = _startpos_me1_;
              MenhirLib.EngineTypes.endp = _endpos_me1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos_me1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1420 "src/ocaml/preprocess/parser_raw.mly"
        ( (* TODO review mkmod location *)
          Pmod_apply(me1, mkmod ~loc:_sloc (Pmod_structure [])) )
# 23911 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_me1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23921 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1430 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23927 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ex;
          MenhirLib.EngineTypes.startp = _startpos_ex_;
          MenhirLib.EngineTypes.endp = _endpos_ex_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ex : (Parsetree.extension) = Obj.magic ex in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ex_ in
        let _endpos = _endpos_ex_ in
        let _v =
          let _1 =
            let _1 = 
# 1424 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_extension ex )
# 23955 "src/ocaml/preprocess/parser_raw.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_ex_, _startpos_ex_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23964 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1430 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23970 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 1427 "src/ocaml/preprocess/parser_raw.mly"
        ( let id = mkrhs Ast_helper.hole_txt _loc in
          Pmod_extension (id, PStr []) )
# 24003 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 24012 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1430 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24018 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24040 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string option) = 
# 1379 "src/ocaml/preprocess/parser_raw.mly"
      ( Some x )
# 24048 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string option) = 
# 1382 "src/ocaml/preprocess/parser_raw.mly"
      ( None )
# 24073 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24133 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24147 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let body =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24159 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let uid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24170 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24178 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1860 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Ms.mk uid body ~attrs ~loc ~docs, ext
  )
# 24192 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_substitution * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.signature) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24242 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1708 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs (Pmty_signature s) )
# 24251 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let args : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic args in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24308 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_mty_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1716 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mty_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (startpos, arg) ->
            mkmty ~loc:(startpos, _endpos) (Pmty_functor (arg, acc))
          ) mty args
        ) )
# 24321 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24378 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1722 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
# 24387 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = 
# 1724 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 24427 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1730 "src/ocaml/preprocess/parser_raw.mly"
      ( Mty.attr _1 _2 )
# 24459 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24491 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1733 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_ident _1 )
# 24497 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1041 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 24506 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1744 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24512 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.module_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 1736 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_functor(Named (mknoloc None, _1), _3) )
# 24554 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1041 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 24563 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1744 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24569 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 24613 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 24618 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1738 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_with(_1, _3) )
# 24624 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1041 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 24634 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1744 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24640 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1742 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_extension _1 )
# 24668 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1041 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 24676 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1744 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24682 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = typ;
            MenhirLib.EngineTypes.startp = _startpos_typ_;
            MenhirLib.EngineTypes.endp = _endpos_typ_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let typ : (Parsetree.module_type option) = Obj.magic typ in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24753 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24765 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24773 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1654 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
  )
# 24787 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type_declaration * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3902 "src/ocaml/preprocess/parser_raw.mly"
                                          ( _1 )
# 24813 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag) = 
# 3978 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable )
# 24831 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3979 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Mutable )
# 24856 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3982 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable, Nothing )
# 24874 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3983 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Mutable, Nothing )
# 24899 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3984 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable, Global )
# 24924 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3985 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable, Nonlocal )
# 24949 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3993 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Concrete )
# 24967 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3995 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Concrete )
# 24992 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3997 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Virtual )
# 25017 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 4000 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 25049 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 4000 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 25081 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3951 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 25113 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25134 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25147 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 218 "<standard.mly>"
    ( [ x ] )
# 25153 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25182 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25195 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 220 "<standard.mly>"
    ( x :: xs )
# 25201 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 848 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 25223 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v =
          let x = 
# 3947 "src/ocaml/preprocess/parser_raw.mly"
    ( let body, _, _ = s in body )
# 25232 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 218 "<standard.mly>"
    ( [ x ] )
# 25237 "src/ocaml/preprocess/parser_raw.ml"
           : (string list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string list) = Obj.magic xs in
        let s : (
# 848 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 25266 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x = 
# 3947 "src/ocaml/preprocess/parser_raw.mly"
    ( let body, _, _ = s in body )
# 25275 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 220 "<standard.mly>"
    ( x :: xs )
# 25280 "src/ocaml/preprocess/parser_raw.ml"
           : (string list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let priv = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25307 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3239 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 25312 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let priv = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25346 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3239 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 25351 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25378 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 25384 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25389 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3243 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 25395 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25429 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 25435 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25440 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3243 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 25446 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25487 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 25494 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 25499 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25505 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3243 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 25511 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25559 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 25566 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 25571 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25577 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3243 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 25583 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25610 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 25616 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25621 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3247 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25627 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25661 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 25667 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25672 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3247 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25678 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25719 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 25726 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 25731 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25737 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3247 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25743 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25791 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 25798 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 25803 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25809 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3247 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25815 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25856 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 25862 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25867 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3251 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25873 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25921 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 25927 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25932 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3251 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25938 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25993 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 26000 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 26005 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26011 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3251 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 26017 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 26079 "src/ocaml/preprocess/parser_raw.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 26086 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 26091 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26097 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3251 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 26103 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26160 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26169 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let override = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 26175 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1673 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 26188 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.open_declaration * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26252 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let attrs1 =
            let _1 = _1_inlined2 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26261 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let override = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 26267 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1673 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 26280 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.open_declaration * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26337 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 26349 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26357 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let override = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 26363 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1688 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 26376 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.open_description * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26440 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 26452 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined2 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26460 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let override = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 26466 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1688 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 26479 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.open_description * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 834 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26501 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26509 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26530 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3818 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26538 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26559 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3819 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26567 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26609 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3820 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"(" ^ _3 ^ ")" )
# 26617 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26666 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3821 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "(" ^ _3 ^ ")<-" )
# 26674 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26716 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3822 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"[" ^ _3 ^ "]" )
# 26724 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26773 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3823 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "[" ^ _3 ^ "]<-" )
# 26781 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26823 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3824 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"{" ^ _3 ^ "}" )
# 26831 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26880 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3825 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "{" ^ _3 ^ "}<-" )
# 26888 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 845 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26909 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3826 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26917 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3827 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "!" )
# 26942 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26963 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3831 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 26972 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26977 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26999 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3832 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 27008 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27013 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27035 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3833 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 27044 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27049 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27071 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3834 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 27080 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27085 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 788 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27107 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3835 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 27116 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27121 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3836 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 27148 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27153 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3837 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 27180 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27185 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3838 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 27212 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27217 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3839 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 27244 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27249 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3840 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 27276 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27281 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3841 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 27308 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27313 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 27340 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27345 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3843 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 27372 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27377 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3844 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 27404 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27409 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3845 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 27436 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27441 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3846 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 27468 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27473 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3847 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 27500 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27505 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3848 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 27532 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27537 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3849 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 27564 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27569 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3850 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 27596 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27601 "src/ocaml/preprocess/parser_raw.ml"
           : (string))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (bool) = 
# 3730 "src/ocaml/preprocess/parser_raw.mly"
                                                ( true )
# 27627 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (bool) = 
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                                                ( false )
# 27645 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 111 "<standard.mly>"
    ( None )
# 27663 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 113 "<standard.mly>"
    ( Some x )
# 27688 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 111 "<standard.mly>"
    ( None )
# 27706 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 113 "<standard.mly>"
    ( Some x )
# 27731 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 111 "<standard.mly>"
    ( None )
# 27749 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27776 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let x =
            let x =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 27792 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 180 "<standard.mly>"
    ( x )
# 27798 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 113 "<standard.mly>"
    ( Some x )
# 27804 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type option) = 
# 111 "<standard.mly>"
    ( None )
# 27823 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 27856 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 27861 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 111 "<standard.mly>"
    ( None )
# 27880 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 27913 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 27918 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_type option) = 
# 111 "<standard.mly>"
    ( None )
# 27937 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.module_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 27970 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 27975 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern option) = 
# 111 "<standard.mly>"
    ( None )
# 27994 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 28027 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 28032 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 111 "<standard.mly>"
    ( None )
# 28051 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 28084 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 28089 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 111 "<standard.mly>"
    ( None )
# 28108 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 113 "<standard.mly>"
    ( Some x )
# 28133 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 28154 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4039 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 28162 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 28196 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 4040 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 28205 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = me;
                MenhirLib.EngineTypes.startp = _startpos_me_;
                MenhirLib.EngineTypes.endp = _endpos_me_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1439 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc (Pmod_constraint(me, mty)) )
# 28262 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = 
# 1446 "src/ocaml/preprocess/parser_raw.mly"
      ( me (* TODO consider reloc *) )
# 28302 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e = 
# 1469 "src/ocaml/preprocess/parser_raw.mly"
      ( e )
# 28356 "src/ocaml/preprocess/parser_raw.ml"
           in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28363 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1454 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 28372 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let ty =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 28449 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_ty_ = _endpos__1_ in
            let _endpos = _endpos_ty_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            
# 1471 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_constraint (e, ty)) )
# 28459 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28467 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1454 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 28476 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e =
            let (_endpos__1_inlined1_, _startpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined3, _1_inlined2) in
            let ty2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 28568 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_ty2_ = _endpos__1_inlined1_ in
            let ty1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 28581 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_ty2_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            
# 1473 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2)) )
# 28590 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28598 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1454 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 28607 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let ty2 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 28684 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_ty2_ = _endpos__1_ in
            let _endpos = _endpos_ty2_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            
# 1475 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, None, ty2)) )
# 28694 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28702 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1454 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 28711 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1353 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28744 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1338 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28776 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 1313 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28808 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1318 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28840 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1343 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28872 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1348 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28904 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1328 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28936 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = 
# 1323 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28968 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1333 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29000 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _loc__2_ = (_startpos__2_, _endpos__2_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2967 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 29045 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2955 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29051 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 2969 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 29085 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2955 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29090 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 2971 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29117 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2955 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29122 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _3 =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29171 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2974 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 29177 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29187 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29193 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2955 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29199 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2978 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 29228 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29236 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29242 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2955 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29248 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2982 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 29291 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29300 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29306 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2955 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29312 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29364 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 29370 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2957 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
# 29379 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3085 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 29419 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3086 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 29458 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3085 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 29497 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3086 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 29536 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2990 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29561 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29600 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2993 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_construct(_1, Some _2) )
# 29606 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29616 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2996 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29622 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2995 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_variant(_1, Some _2) )
# 29657 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29666 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2996 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29672 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29724 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 29730 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2998 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
# 29739 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _loc__2_ = (_startpos__2_, _endpos__2_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2967 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 29785 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2962 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29791 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 2969 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 29825 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2962 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29830 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 2971 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29857 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2962 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29862 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _3 =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29911 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2974 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 29917 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29927 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29933 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2962 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29939 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2978 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 29968 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29976 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29982 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2962 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29988 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2982 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 30031 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 30040 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30046 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2962 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30052 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 30074 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30089 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2327 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_var _1 )
# 30095 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 30104 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2329 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30110 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2328 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_any )
# 30138 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 30146 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2329 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30152 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.payload) = 
# 4151 "src/ocaml/preprocess/parser_raw.mly"
              ( PStr _1 )
# 30178 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4152 "src/ocaml/preprocess/parser_raw.mly"
                    ( PSig _2 )
# 30210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4153 "src/ocaml/preprocess/parser_raw.mly"
                    ( PTyp _2 )
# 30242 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4154 "src/ocaml/preprocess/parser_raw.mly"
                     ( PPat (_2, None) )
# 30274 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.payload) = 
# 4155 "src/ocaml/preprocess/parser_raw.mly"
                                   ( PPat (_2, Some _4) )
# 30320 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3519 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30345 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 30389 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1098 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30394 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3511 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30400 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3515 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 30406 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 30416 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3521 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30422 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3550 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30449 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3519 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30454 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 = 
# 3550 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30497 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _1 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 30504 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1098 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30509 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3511 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30515 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3515 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 30521 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 30531 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3521 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30537 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4114 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 30588 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.attribute))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = prim;
            MenhirLib.EngineTypes.startp = _startpos_prim_;
            MenhirLib.EngineTypes.endp = _endpos_prim_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let prim : (string list) = Obj.magic prim in
        let _7 : unit = Obj.magic _7 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30673 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30685 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30693 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3149 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~prim ~attrs ~loc ~docs,
      ext )
# 30706 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.value_description * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 30726 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3971 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30731 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.private_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3975 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 30758 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 3971 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30763 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.private_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 4003 "src/ocaml/preprocess/parser_raw.mly"
                 ( Public, Concrete )
# 30782 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 4004 "src/ocaml/preprocess/parser_raw.mly"
            ( Private, Concrete )
# 30807 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 4005 "src/ocaml/preprocess/parser_raw.mly"
            ( Public, Virtual )
# 30832 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 4006 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 30864 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 4007 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 30896 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 3954 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 30914 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 3955 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 30939 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fields_ in
        let _endpos = _endpos_fields_ in
        let _v =
          let eo = 
# 121 "<standard.mly>"
    ( None )
# 30965 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2887 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 30970 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_fields_ in
        let _v =
          let eo =
            let x = 
# 188 "<standard.mly>"
    ( x )
# 31013 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 31018 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2887 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 31024 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3336 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 31057 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1208 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31062 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3336 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 31094 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1211 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31099 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3336 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 31138 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1215 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 31143 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x =
            let _1 = 
# 3453 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31176 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3447 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31181 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1208 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31187 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x = 
# 3449 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31214 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1208 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31219 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x =
            let _1 = 
# 3453 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31252 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3447 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31257 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1211 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31263 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x = 
# 3449 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31290 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1211 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31295 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x =
            let _1 = 
# 3453 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31335 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3447 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31340 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1215 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 31346 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x = 
# 3449 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31380 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1215 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 31385 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3453 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31417 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1208 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31422 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3453 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31454 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1211 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 31459 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3453 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31498 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1215 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 31503 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = 
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 31522 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v =
          let x =
            let x =
              let (_startpos__1_, _1) = (_startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2203 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3, make_loc _sloc )
# 31582 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 180 "<standard.mly>"
    ( x )
# 31588 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31594 "src/ocaml/preprocess/parser_raw.ml"
           : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Lexing.position * Parsetree.functor_parameter) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1088 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31620 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Lexing.position * Parsetree.functor_parameter) = Obj.magic x in
        let xs : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1090 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31652 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1088 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31677 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1090 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31709 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 1088 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31734 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let xs : (string list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 1090 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31766 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let x =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31805 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3507 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 31811 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1088 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31817 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let x =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31864 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3507 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 31870 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1090 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31876 "src/ocaml/preprocess/parser_raw.ml"
           : (string Location.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _1 = 
# 121 "<standard.mly>"
    ( None )
# 31903 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1179 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31908 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.case list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_inlined1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _1 =
            let x = x_inlined1 in
            
# 123 "<standard.mly>"
    ( Some x )
# 31944 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1179 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31950 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.case list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = 
# 1183 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31990 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let xs =
            let x = 
# 3550 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32017 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 32022 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32028 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v =
          let xs =
            let x = 
# 3550 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32070 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32075 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32081 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Extensions.comprehension_clause) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 32108 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32113 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension_clause list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Extensions.comprehension_clause) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32154 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32159 "src/ocaml/preprocess/parser_raw.ml"
           : (Extensions.comprehension_clause list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 32186 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32191 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.with_constraint list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32232 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32237 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.with_constraint list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 32264 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32269 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.row_field list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32310 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32315 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.row_field list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 32342 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32347 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32388 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32393 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 32420 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32425 "src/ocaml/preprocess/parser_raw.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32466 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32471 "src/ocaml/preprocess/parser_raw.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 32498 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32503 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32544 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 32549 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1145 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32589 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1149 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 32628 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = 
# 1145 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32667 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.expression) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.expression) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.expression list) = 
# 1149 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 32706 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1145 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32745 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1149 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 32784 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = 
# 3715 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 32809 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3717 "src/ocaml/preprocess/parser_raw.mly"
      ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
# 32838 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.row_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 32865 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32870 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let _2 =
            let x = x_inlined1 in
            
# 123 "<standard.mly>"
    ( Some x )
# 32906 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32912 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression list) = 
# 1170 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32952 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = oe;
          MenhirLib.EngineTypes.startp = _startpos_oe_;
          MenhirLib.EngineTypes.endp = _endpos_oe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 32980 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_oe_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 32989 "src/ocaml/preprocess/parser_raw.ml"
           in
          let x =
            let label =
              let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 32996 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33004 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_oe_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2910 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 33022 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 33028 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = oe;
            MenhirLib.EngineTypes.startp = _startpos_oe_;
            MenhirLib.EngineTypes.endp = _endpos_oe_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33064 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 123 "<standard.mly>"
    ( Some x )
# 33073 "src/ocaml/preprocess/parser_raw.ml"
           in
          let x =
            let label =
              let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 33080 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33088 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_oe_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2910 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 33106 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 33112 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = oe;
              MenhirLib.EngineTypes.startp = _startpos_oe_;
              MenhirLib.EngineTypes.endp = _endpos_oe_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33155 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let label =
              let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 33166 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33174 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_oe_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2910 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 33192 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1170 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 33198 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 33225 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 33230 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let _2 =
            let x = x_inlined1 in
            
# 123 "<standard.mly>"
    ( Some x )
# 33266 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 33272 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.pattern list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.pattern list) = 
# 1170 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 33312 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = eo;
          MenhirLib.EngineTypes.startp = _startpos_eo_;
          MenhirLib.EngineTypes.endp = _endpos_eo_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_eo_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 33352 "src/ocaml/preprocess/parser_raw.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33362 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2893 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 33380 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 33386 "src/ocaml/preprocess/parser_raw.ml"
           : ((Longident.t Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = eo;
            MenhirLib.EngineTypes.startp = _startpos_eo_;
            MenhirLib.EngineTypes.endp = _endpos_eo_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = c;
              MenhirLib.EngineTypes.startp = _startpos_c_;
              MenhirLib.EngineTypes.endp = _endpos_c_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 123 "<standard.mly>"
    ( Some x )
# 33434 "src/ocaml/preprocess/parser_raw.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33444 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2893 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 33462 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1166 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 33468 "src/ocaml/preprocess/parser_raw.ml"
           : ((Longident.t Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = eo;
              MenhirLib.EngineTypes.startp = _startpos_eo_;
              MenhirLib.EngineTypes.endp = _endpos_eo_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = c;
                MenhirLib.EngineTypes.startp = _startpos_c_;
                MenhirLib.EngineTypes.endp = _endpos_c_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33528 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2893 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 33546 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1170 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 33552 "src/ocaml/preprocess/parser_raw.ml"
           : ((Longident.t Location.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2292 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 33578 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2293 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 33610 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 2295 "src/ocaml/preprocess/parser_raw.mly"
    ( Pexp_sequence(_1, _3) )
# 33651 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 33660 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2296 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33666 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : (string Location.loc) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2298 "src/ocaml/preprocess/parser_raw.mly"
    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
      let payload = PStr [mkstrexp seq []] in
      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
# 33726 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args_res;
              MenhirLib.EngineTypes.startp = _startpos_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_args_res_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs =
            let _1 = _1_inlined4 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33797 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined4_ in
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33806 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33818 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33826 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _startpos = _startpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3366 "src/ocaml/preprocess/parser_raw.mly"
    ( let args, res = args_res in
      let loc = make_loc (_startpos, _endpos_attrs2_) in
      let docs = symbol_docs _sloc in
      Te.mk_exception ~attrs
        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
      , ext )
# 33841 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_exception * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.signature_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v =
          let _1 =
            let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 33869 "src/ocaml/preprocess/parser_raw.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 989 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_sig _startpos _endpos _1 )
# 33877 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1750 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33883 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33919 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1765 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
# 33930 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1769 "src/ocaml/preprocess/parser_raw.mly"
        ( Psig_attribute _1 )
# 33958 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1037 "src/ocaml/preprocess/parser_raw.mly"
    ( mksig ~loc:_sloc _1 )
# 33966 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1771 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33972 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1774 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 34000 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34008 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34014 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1776 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 34042 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34050 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34056 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 = 
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 34095 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 3185 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 34100 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3168 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34106 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1778 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_type _1 )
# 34112 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34122 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34128 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 = 
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 34167 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 3185 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 34172 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3173 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34178 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1780 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typesubst _1 )
# 34184 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34194 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34200 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34289 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let cs = 
# 1219 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 34296 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34306 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _4 = 
# 3962 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 34312 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34319 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3440 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 34331 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3427 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34337 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1782 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 34343 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34353 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34359 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined4 in
                    
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34455 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined4_ in
                  let cs = 
# 1219 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 34462 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34472 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _4 =
                    let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    let _loc = (_startpos, _endpos) in
                    
# 3963 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 34483 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34491 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3440 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 34503 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3427 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34509 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1782 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 34515 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34525 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34531 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1784 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_exception _1 )
# 34559 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34567 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34573 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_type) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34640 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let name =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34652 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34660 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1813 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 34674 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1786 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 34680 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34690 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34696 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined4 in
                  
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34770 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined4_ in
                let body =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                  let id =
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34783 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let (_endpos_id_, _startpos_id_) = (_endpos__1_, _startpos__1_) in
                  let _endpos = _endpos_id_ in
                  let _symbolstartpos = _startpos_id_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1850 "src/ocaml/preprocess/parser_raw.mly"
    ( Mty.alias ~loc:(make_loc _sloc) id )
# 34793 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let name =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34804 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34812 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1841 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 34826 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1788 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 34832 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34842 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34848 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_substitution * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1790 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modsubst body, ext) )
# 34876 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34884 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34890 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34980 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let name =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34992 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35000 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 1886 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext, Md.mk name mty ~attrs ~loc ~docs
  )
# 35014 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 35020 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1875 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35026 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1792 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_recmodule l, ext) )
# 35032 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35042 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35048 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1794 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modtype body, ext) )
# 35076 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35084 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35090 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1796 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_open body, ext) )
# 35118 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35126 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35132 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = attrs0;
                  MenhirLib.EngineTypes.startp = _startpos_attrs0_;
                  MenhirLib.EngineTypes.endp = _endpos_attrs0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let thing : (Parsetree.module_type) = Obj.magic thing in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let attrs0 : (Parsetree.attribute list) = Obj.magic attrs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_attrs0_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined1 in
                  
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35192 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined1_ in
                let attrs1 = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35199 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos_attrs0_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1638 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs0 @ attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 35212 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1798 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_include _1 )
# 35218 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos_attrs0_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35228 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35234 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_description list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35314 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35335 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let id =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35347 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35355 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 2224 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
    )
# 35370 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 35376 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2212 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35382 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1800 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class l, ext) )
# 35388 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35398 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35404 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1802 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class_type l, ext) )
# 35432 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1054 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35440 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1804 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35446 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3791 "src/ocaml/preprocess/parser_raw.mly"
                 ( _1 )
# 35472 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 794 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 35499 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3792 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 35508 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 772 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 35535 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3793 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 35544 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 794 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 35571 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3794 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer (n, m) )
# 35580 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 772 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 35607 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3795 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float(f, m) )
# 35616 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                
# 3097 "src/ocaml/preprocess/parser_raw.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 35662 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3068 "src/ocaml/preprocess/parser_raw.mly"
      ( let (fields, closed) = _2 in
        Ppat_record(fields, closed) )
# 35669 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 35679 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3082 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35685 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 3091 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 35728 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 3073 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailpat _loc__3_ _2) )
# 35734 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 35744 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3082 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35750 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 3091 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 35793 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3077 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array _2 )
# 35798 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 35808 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3082 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35814 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 3079 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array [] )
# 35849 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 35858 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3082 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35864 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          (
# 4160 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.code _startpos _endpos _2 )
# 35907 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _startpos = _startpos__1_ in
          (
# 4162 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.uncode _startpos _endpos _2 )
# 35943 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2471 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_exp ~loc:_sloc _2 )
# 35987 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2477 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _2 _3 )
# 36038 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2479 "src/ocaml/preprocess/parser_raw.mly"
      ( array_get ~loc:_sloc _1 _4 )
# 36096 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2485 "src/ocaml/preprocess/parser_raw.mly"
      ( string_get ~loc:_sloc _1 _4 )
# 36154 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36203 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36213 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2491 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident bracket _2 _1 _4 )
# 36221 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36270 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36280 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2497 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident paren _2 _1 _4  )
# 36288 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36337 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36347 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2503 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident brace _2 _1 _4 )
# 36355 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36416 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36428 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2509 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) bracket _4 _1 _6  )
# 36436 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36497 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36509 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2516 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) paren _4 _1 _6 )
# 36517 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36578 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36590 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2523 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) brace _4 _1 _6  )
# 36598 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2530 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_get ~loc:_sloc _1 _4 )
# 36656 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let attrs =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36714 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2543 "src/ocaml/preprocess/parser_raw.mly"
      ( e.pexp_desc, (ext, attrs @ e.pexp_attributes) )
# 36720 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2536 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 36731 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36784 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36790 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2545 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
# 36799 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2536 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 36810 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _3 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36864 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36874 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36880 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2551 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_new(_3), _2 )
# 36886 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2536 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 36897 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36964 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36970 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2553 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_pack _4, _3 )
# 36976 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2536 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 36987 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _6 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 37071 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 37081 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 37087 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__7_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2555 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
# 37096 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2536 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 37107 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37140 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2592 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ident (_1) )
# 37146 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37155 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37161 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2594 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constant _1 )
# 37189 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37197 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37203 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37236 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2596 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, None) )
# 37242 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37251 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37257 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2598 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, None) )
# 37285 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37293 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37299 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 834 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 37328 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 37343 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2600 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 37349 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37359 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37365 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 2601 "src/ocaml/preprocess/parser_raw.mly"
            ("!")
# 37402 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 37410 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2602 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 37416 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37426 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37432 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2905 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 37475 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2604 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override _2 )
# 37480 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37490 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37496 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2610 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override [] )
# 37531 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37540 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37546 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37594 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2612 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_field(_1, _3) )
# 37600 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37610 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37616 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37678 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37687 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2614 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, _4) )
# 37693 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37703 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37709 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2905 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 37766 "src/ocaml/preprocess/parser_raw.ml"
               in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37776 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37785 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _startpos_od_ = _startpos__1_ in
              let _endpos = _endpos__5_ in
              let _symbolstartpos = _startpos_od_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2616 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_override *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_override _4)) )
# 37796 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37806 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37812 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 37846 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 37861 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37869 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2623 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_send(_1, _3) )
# 37875 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37885 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37891 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (
# 845 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 37926 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1023 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 37943 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2625 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix _1 _2 _3 )
# 37949 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37959 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37965 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2627 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension _1 )
# 37993 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38001 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38007 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 2629 "src/ocaml/preprocess/parser_raw.mly"
      ( let id = mkrhs Ast_helper.hole_txt _loc in
        Pexp_extension (id, PStr []) )
# 38040 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38049 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38055 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 2631 "src/ocaml/preprocess/parser_raw.mly"
                                                    (Lident "()")
# 38107 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38116 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let (_endpos__3_, _startpos__3_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38128 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38137 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2632 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) (Pexp_construct(_3, None))) )
# 38144 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38154 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38160 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 2638 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _2 in
        Pexp_record(fields, exten) )
# 38204 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38213 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38219 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38282 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38291 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos__5_ in
              
# 2645 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _4 in
        Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos)
                        (Pexp_record(fields, exten))) )
# 38300 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38310 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38316 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 38359 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2653 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array(_2) )
# 38364 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38374 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38380 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2659 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array [] )
# 38415 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38424 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38430 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 38487 "src/ocaml/preprocess/parser_raw.ml"
               in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38497 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38506 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos__5_ in
              
# 2661 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array(_4))) )
# 38513 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38523 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38529 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38584 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38593 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos__4_ in
              
# 2663 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array [])) )
# 38601 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38611 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38617 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 38660 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2671 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailexp _loc__3_ _2) )
# 38666 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38676 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38682 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2581 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_list_comprehension(_2, _3))) )
# 38731 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2676 "src/ocaml/preprocess/parser_raw.mly"
                       ( _1 )
# 38737 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38747 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38753 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2585 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_arr_comprehension(_2, _3))) )
# 38802 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2676 "src/ocaml/preprocess/parser_raw.mly"
                       ( _1 )
# 38808 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38818 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38824 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2_inlined1 : (Parsetree.expression) = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_startpos__1_, _2) = (_startpos__1_inlined1_, _2_inlined1) in
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2581 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_list_comprehension(_2, _3))) )
# 38888 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _startpos__3_ = _startpos__1_inlined1_ in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38900 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38909 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2678 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) _3) )
# 38916 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38926 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38932 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2_inlined1 : (Parsetree.expression) = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_startpos__1_, _2) = (_startpos__1_inlined1_, _2_inlined1) in
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2585 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_arr_comprehension(_2, _3))) )
# 38996 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _startpos__3_ = _startpos__1_inlined1_ in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39008 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 39017 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2678 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) _3) )
# 39024 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39034 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39040 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2922 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 39097 "src/ocaml/preprocess/parser_raw.ml"
               in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39107 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 39116 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos__5_ in
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              
# 2680 "src/ocaml/preprocess/parser_raw.mly"
      ( let list_exp =
          (* TODO: review the location of list_exp *)
          let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
          mkexp ~loc:(_startpos__3_, _endpos) tail_exp in
        Pexp_open(od, list_exp) )
# 39128 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39138 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39144 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 2685 "src/ocaml/preprocess/parser_raw.mly"
                                                        (Lident "[]")
# 39196 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39205 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let (_endpos__3_, _startpos__3_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39217 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 39226 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2686 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:_loc__3_ (Pexp_construct(_3, None))) )
# 39233 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39243 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39249 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : unit = Obj.magic _9 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.module_expr) = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _1 =
            let _1 =
              let _8 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 39348 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _5 =
                let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
                let _2 =
                  let _1 = _1_inlined1 in
                  
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39358 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 39364 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39375 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1697 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 39384 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _startpos_od_ = _startpos__1_ in
              let _endpos = _endpos__9_ in
              let _symbolstartpos = _startpos_od_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2694 "src/ocaml/preprocess/parser_raw.mly"
      ( let modexp =
          mkexp_attrs ~loc:(_startpos__3_, _endpos)
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
        Pexp_open(od, modexp) )
# 39397 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__9_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39407 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39413 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39446 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3002 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_var (_1) )
# 39452 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39461 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3003 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39467 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 3004 "src/ocaml/preprocess/parser_raw.mly"
                             ( _1 )
# 39493 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3009 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 39536 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 3011 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39562 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39628 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39638 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 39644 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3013 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
# 39653 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined4 : (Parsetree.module_type) = Obj.magic _1_inlined4 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined4_, _startpos__1_inlined4_, _1_inlined4) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3705 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 39736 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39747 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__4_, _startpos__4_) = (_endpos__1_inlined3_, _startpos__1_inlined3_) in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39758 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 39764 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3015 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc
          (Ppat_constraint(mkpat ~loc:_loc__4_ (Ppat_unpack _4), _6))
          _3 )
# 39776 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3023 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_any )
# 39804 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39812 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39818 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3025 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constant _1 )
# 39846 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39854 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39860 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.constant) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3027 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_interval (_1, _3) )
# 39902 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39911 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39917 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39950 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3029 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_construct(_1, None) )
# 39956 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39965 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39971 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3031 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_variant(_1, None) )
# 39999 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40007 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40013 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40054 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3033 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_type (_2) )
# 40060 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40070 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40076 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40123 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3035 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open(_1, _3) )
# 40129 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40139 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40145 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 3036 "src/ocaml/preprocess/parser_raw.mly"
                                                     (Lident "[]")
# 40197 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40206 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__3_ = _endpos__2_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40217 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3037 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 40226 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40236 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40242 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 3038 "src/ocaml/preprocess/parser_raw.mly"
                                                 (Lident "()")
# 40294 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40303 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__3_ = _endpos__2_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40314 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3039 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 40323 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40333 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40339 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40400 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3041 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open (_1, _4) )
# 40406 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40416 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40422 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 = 
# 3051 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 40478 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40487 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40493 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3062 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_extension _1 )
# 40521 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 40529 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3019 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 40535 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 40557 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4046 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 40565 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 40586 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4047 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 40594 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4048 "src/ocaml/preprocess/parser_raw.mly"
        ( "and" )
# 40619 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4049 "src/ocaml/preprocess/parser_raw.mly"
       ( "as" )
# 40644 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4050 "src/ocaml/preprocess/parser_raw.mly"
           ( "assert" )
# 40669 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4051 "src/ocaml/preprocess/parser_raw.mly"
          ( "begin" )
# 40694 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4052 "src/ocaml/preprocess/parser_raw.mly"
          ( "class" )
# 40719 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4053 "src/ocaml/preprocess/parser_raw.mly"
               ( "constraint" )
# 40744 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4054 "src/ocaml/preprocess/parser_raw.mly"
       ( "do" )
# 40769 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4055 "src/ocaml/preprocess/parser_raw.mly"
         ( "done" )
# 40794 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4056 "src/ocaml/preprocess/parser_raw.mly"
           ( "downto" )
# 40819 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4057 "src/ocaml/preprocess/parser_raw.mly"
         ( "else" )
# 40844 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4058 "src/ocaml/preprocess/parser_raw.mly"
        ( "end" )
# 40869 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4059 "src/ocaml/preprocess/parser_raw.mly"
              ( "exception" )
# 40894 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4060 "src/ocaml/preprocess/parser_raw.mly"
             ( "external" )
# 40919 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4061 "src/ocaml/preprocess/parser_raw.mly"
          ( "false" )
# 40944 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4062 "src/ocaml/preprocess/parser_raw.mly"
        ( "for" )
# 40969 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4063 "src/ocaml/preprocess/parser_raw.mly"
        ( "fun" )
# 40994 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4064 "src/ocaml/preprocess/parser_raw.mly"
             ( "function" )
# 41019 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4065 "src/ocaml/preprocess/parser_raw.mly"
            ( "functor" )
# 41044 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4066 "src/ocaml/preprocess/parser_raw.mly"
             ( "nonlocal_" )
# 41069 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4067 "src/ocaml/preprocess/parser_raw.mly"
       ( "if" )
# 41094 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4068 "src/ocaml/preprocess/parser_raw.mly"
       ( "in" )
# 41119 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4069 "src/ocaml/preprocess/parser_raw.mly"
            ( "include" )
# 41144 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4070 "src/ocaml/preprocess/parser_raw.mly"
            ( "inherit" )
# 41169 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4071 "src/ocaml/preprocess/parser_raw.mly"
                ( "initializer" )
# 41194 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4072 "src/ocaml/preprocess/parser_raw.mly"
         ( "lazy" )
# 41219 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4073 "src/ocaml/preprocess/parser_raw.mly"
        ( "let" )
# 41244 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4074 "src/ocaml/preprocess/parser_raw.mly"
          ( "local_" )
# 41269 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4075 "src/ocaml/preprocess/parser_raw.mly"
          ( "match" )
# 41294 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4076 "src/ocaml/preprocess/parser_raw.mly"
           ( "method" )
# 41319 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4077 "src/ocaml/preprocess/parser_raw.mly"
           ( "module" )
# 41344 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4078 "src/ocaml/preprocess/parser_raw.mly"
            ( "mutable" )
# 41369 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4079 "src/ocaml/preprocess/parser_raw.mly"
        ( "new" )
# 41394 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4080 "src/ocaml/preprocess/parser_raw.mly"
           ( "nonrec" )
# 41419 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4081 "src/ocaml/preprocess/parser_raw.mly"
           ( "object" )
# 41444 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4082 "src/ocaml/preprocess/parser_raw.mly"
       ( "of" )
# 41469 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4083 "src/ocaml/preprocess/parser_raw.mly"
         ( "open" )
# 41494 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4084 "src/ocaml/preprocess/parser_raw.mly"
       ( "or" )
# 41519 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4085 "src/ocaml/preprocess/parser_raw.mly"
            ( "private" )
# 41544 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4086 "src/ocaml/preprocess/parser_raw.mly"
        ( "rec" )
# 41569 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4087 "src/ocaml/preprocess/parser_raw.mly"
        ( "sig" )
# 41594 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4088 "src/ocaml/preprocess/parser_raw.mly"
           ( "struct" )
# 41619 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4089 "src/ocaml/preprocess/parser_raw.mly"
         ( "then" )
# 41644 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4090 "src/ocaml/preprocess/parser_raw.mly"
       ( "to" )
# 41669 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4091 "src/ocaml/preprocess/parser_raw.mly"
         ( "true" )
# 41694 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4092 "src/ocaml/preprocess/parser_raw.mly"
        ( "try" )
# 41719 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4093 "src/ocaml/preprocess/parser_raw.mly"
         ( "type" )
# 41744 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4094 "src/ocaml/preprocess/parser_raw.mly"
        ( "val" )
# 41769 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4095 "src/ocaml/preprocess/parser_raw.mly"
            ( "virtual" )
# 41794 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4096 "src/ocaml/preprocess/parser_raw.mly"
         ( "when" )
# 41819 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4097 "src/ocaml/preprocess/parser_raw.mly"
          ( "while" )
# 41844 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4098 "src/ocaml/preprocess/parser_raw.mly"
         ( "with" )
# 41869 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = 
# 3343 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41894 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v =
          let attrs =
            let _1 = _1_inlined5 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41971 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined5_ in
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41980 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let lid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41991 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42002 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42010 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3352 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Te.mk_exception ~attrs
      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
    , ext )
# 42023 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.type_exception * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2832 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 42056 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2834 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 42092 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 42147 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2836 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 42155 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42205 "src/ocaml/preprocess/parser_raw.ml"
               in
              let local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42210 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 42215 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3588 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 42220 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42230 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3590 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42236 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42295 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42301 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 42306 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3588 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 42311 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42321 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3590 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42327 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42377 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42388 "src/ocaml/preprocess/parser_raw.ml"
               in
              let local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42393 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 42398 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3588 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 42403 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42413 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3590 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42419 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42476 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42489 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42495 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 42500 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3588 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 42505 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42515 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3590 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42521 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42564 "src/ocaml/preprocess/parser_raw.ml"
               in
              let local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42569 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3611 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 42574 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3588 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 42579 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42589 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3590 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42595 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42647 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42653 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3611 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 42658 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3588 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 42663 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42673 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3590 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42679 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42729 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42734 "src/ocaml/preprocess/parser_raw.ml"
               in
              let arg_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42739 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 42744 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42751 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42761 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42767 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42824 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42829 "src/ocaml/preprocess/parser_raw.ml"
               in
              let arg_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42834 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 42839 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42846 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42856 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42862 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42919 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42926 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let arg_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42932 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 42937 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42944 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42954 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42960 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43024 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43031 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let arg_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43037 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 43042 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43049 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43059 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43065 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43115 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43126 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43131 "src/ocaml/preprocess/parser_raw.ml"
               in
              let arg_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43136 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 43141 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43148 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43158 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43164 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43221 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43232 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43237 "src/ocaml/preprocess/parser_raw.ml"
               in
              let arg_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43242 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 43247 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43254 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43264 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43270 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43327 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43338 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43345 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let arg_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43351 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 43356 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43363 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43373 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43379 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43443 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43454 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43461 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let arg_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43467 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 43472 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43479 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43489 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43495 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43538 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43543 "src/ocaml/preprocess/parser_raw.ml"
               in
              let arg_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43548 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3611 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 43553 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43560 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43570 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43576 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43626 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43631 "src/ocaml/preprocess/parser_raw.ml"
               in
              let arg_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43636 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3611 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 43641 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43648 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43658 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43664 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 43714 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43721 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let arg_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43727 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3611 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 43732 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43739 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43749 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43755 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43812 "src/ocaml/preprocess/parser_raw.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 994 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 43819 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let arg_local = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 43825 "src/ocaml/preprocess/parser_raw.ml"
               in
              let label = 
# 3611 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 43830 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 3599 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 43837 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43847 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3603 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43853 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 43882 "src/ocaml/preprocess/parser_raw.ml"
               in
              let xs =
                let items = 
# 1066 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 43888 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 43893 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 43899 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 43908 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1486 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 43914 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_xss_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 43957 "src/ocaml/preprocess/parser_raw.ml"
               in
              let xs =
                let items =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43967 "src/ocaml/preprocess/parser_raw.ml"
                         in
                        
# 1500 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 43972 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      let _startpos__1_ = _startpos_e_ in
                      let _startpos = _startpos__1_ in
                      
# 1000 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 43980 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    
# 1019 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 43990 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 43996 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 44002 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 44008 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 44017 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1486 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 44023 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (
# 4168 "src/ocaml/preprocess/parser_raw.mly"
    ( val_of_lwt_bindings ~loc:_loc _1 )
# 44053 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1515 "src/ocaml/preprocess/parser_raw.mly"
      ( val_of_let_bindings ~loc:_sloc _1 )
# 44083 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44121 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__2_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1518 "src/ocaml/preprocess/parser_raw.mly"
        ( let docs = symbol_docs _sloc in
          Pstr_extension (_1, add_docs_attrs docs _2) )
# 44132 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 44142 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44148 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1521 "src/ocaml/preprocess/parser_raw.mly"
        ( Pstr_attribute _1 )
# 44176 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 44184 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44190 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1525 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 44218 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44226 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44232 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1527 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 44260 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44268 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44274 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 = 
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 44313 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 3185 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 44318 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3168 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44324 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1529 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_type _1 )
# 44330 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44340 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44346 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44435 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let cs = 
# 1219 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 44442 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44452 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _4 = 
# 3962 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 44458 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44465 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3440 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 44477 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3423 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44483 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1531 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 44489 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44499 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44505 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined4 in
                    
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44601 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined4_ in
                  let cs = 
# 1219 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 44608 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44618 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _4 =
                    let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    let _loc = (_startpos, _endpos) in
                    
# 3963 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 44629 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44637 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3440 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 44649 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 3423 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44655 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1531 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 44661 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44671 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44677 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1533 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_exception _1 )
# 44705 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44713 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44719 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44786 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let name =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44798 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44806 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1559 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let loc = make_loc _sloc in
      let attrs = attrs1 @ attrs2 in
      let body = Mb.mk name body ~attrs ~loc ~docs in
      Pstr_module body, ext )
# 44819 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1535 "src/ocaml/preprocess/parser_raw.mly"
        ( _1 )
# 44825 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44835 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44841 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_binding list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44924 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let name =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44936 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44944 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 1594 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    ext,
    Mb.mk name body ~attrs ~loc ~docs
  )
# 44959 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 44965 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1582 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44971 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1537 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_recmodule _1 )
# 44977 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44987 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44993 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1539 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
# 45021 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45029 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45035 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1541 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_open body, ext) )
# 45063 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45071 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45077 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45150 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45171 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let id =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45183 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45191 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 1926 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext,
    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
  )
# 45206 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1227 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 45212 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1915 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45218 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1543 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class l, ext) )
# 45224 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45234 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45240 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1545 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class_type l, ext) )
# 45268 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45276 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45282 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = attrs0;
                  MenhirLib.EngineTypes.startp = _startpos_attrs0_;
                  MenhirLib.EngineTypes.endp = _endpos_attrs0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let thing : (Parsetree.module_expr) = Obj.magic thing in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let attrs0 : (Parsetree.attribute list) = Obj.magic attrs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_attrs0_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined1 in
                  
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45342 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined1_ in
                let attrs1 = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45349 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos_attrs0_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1638 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs0 @ attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 45362 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1547 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_include _1 )
# 45368 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos_attrs0_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1052 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45378 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45384 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4031 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-" )
# 45410 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4032 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-." )
# 45435 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _3 : (bool) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _5 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45491 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined1_ in
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 45500 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 45505 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3735 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45511 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45521 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3721 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _5 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4 )
# 45532 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.row_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45568 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45579 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3725 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _2 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
# 45590 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.row_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let arg = 
# 121 "<standard.mly>"
    ( None )
# 45624 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos_arg_ = _endpos__1_inlined1_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45635 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3925 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 45644 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 848 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 45678 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3929 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (s, _, _) = _1 in Pdir_string s )
# 45692 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1057 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 45700 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 45706 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45718 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3925 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 45727 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 794 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 45761 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3930 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (n, m) = _1 in Pdir_int (n ,m) )
# 45775 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1057 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 45783 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 45789 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45801 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3925 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 45810 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3931 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 45854 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1057 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 45862 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 45868 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45880 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3925 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 45889 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3932 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 45933 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1057 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 45941 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 45947 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45959 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3925 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 45968 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
            let x =
              let _1 = 
# 3933 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool false )
# 46012 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1057 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 46020 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 46026 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46038 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3925 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 46047 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
            let x =
              let _1 = 
# 3934 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool true )
# 46091 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1057 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 46099 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 46105 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46117 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3925 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 46126 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs = 
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46170 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1500 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 46175 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _startpos__1_ = _startpos_e_ in
              let _startpos = _startpos__1_ in
              
# 1000 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 46183 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_e_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 46192 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1265 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 46198 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 46233 "src/ocaml/preprocess/parser_raw.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 46241 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1269 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 46247 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1273 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46280 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1276 "src/ocaml/preprocess/parser_raw.mly"
    ( raise End_of_file )
# 46305 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3627 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 46330 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let tys =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 46359 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1158 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 46364 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3630 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_tuple tys )
# 46370 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 46380 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3632 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46386 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2925 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, None) )
# 46419 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2926 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, Some _4) )
# 46465 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2927 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (None, Some _2) )
# 46497 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3259 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, Public, None) )
# 46515 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3261 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 46547 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3887 "src/ocaml/preprocess/parser_raw.mly"
                                            ( _1 )
# 46572 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance * Asttypes.injectivity) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = 
# 3276 "src/ocaml/preprocess/parser_raw.mly"
                                       ( _2, _1 )
# 46604 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = 
# 3269 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 46622 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = 
# 3271 "src/ocaml/preprocess/parser_raw.mly"
      ( [p] )
# 46647 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let ps =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 46688 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1130 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 46693 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3273 "src/ocaml/preprocess/parser_raw.mly"
      ( ps )
# 46699 "src/ocaml/preprocess/parser_raw.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let tyvar : (string) = Obj.magic tyvar in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tyvar_ in
        let _v =
          let _1 =
            let _1 = 
# 3281 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_var tyvar )
# 46734 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos_tyvar_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 46743 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3284 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46749 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3283 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_any )
# 46777 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 46785 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3284 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46791 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3288 "src/ocaml/preprocess/parser_raw.mly"
                                            ( NoVariance, NoInjectivity )
# 46810 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3289 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Covariant, NoInjectivity )
# 46835 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3290 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Contravariant, NoInjectivity )
# 46860 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3291 "src/ocaml/preprocess/parser_raw.mly"
                                            ( NoVariance, Injective )
# 46885 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3292 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Covariant, Injective )
# 46917 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3292 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Covariant, Injective )
# 46949 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3293 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Contravariant, Injective )
# 46981 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3293 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Contravariant, Injective )
# 47013 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47034 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 3295 "src/ocaml/preprocess/parser_raw.mly"
      ( if _1 = "+!" then Covariant, Injective else
        if _1 = "-!" then Contravariant, Injective else
        (expecting _loc__1_ "type_variance";
         NoVariance, NoInjectivity) )
# 47047 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.variance * Asttypes.injectivity))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 834 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47069 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 3300 "src/ocaml/preprocess/parser_raw.mly"
      ( if _1 = "!+" then Covariant, Injective else
        if _1 = "!-" then Contravariant, Injective else
        (expecting _loc__1_ "type_variance";
         NoVariance, NoInjectivity) )
# 47082 "src/ocaml/preprocess/parser_raw.ml"
           : (Asttypes.variance * Asttypes.injectivity))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 47118 "src/ocaml/preprocess/parser_raw.ml"
               in
              let xs =
                let _1 = 
# 1066 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 47124 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1296 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47129 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 47135 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 992 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 47144 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1289 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47150 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 47200 "src/ocaml/preprocess/parser_raw.ml"
               in
              let xs =
                let _1 =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47210 "src/ocaml/preprocess/parser_raw.ml"
                         in
                        
# 1500 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 47215 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      
# 1010 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 47221 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 1008 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 47229 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 47235 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1296 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47241 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 47247 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 992 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 47256 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 1289 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47262 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.toplevel_phrase list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3805 "src/ocaml/preprocess/parser_raw.mly"
                              ( _2 )
# 47302 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47323 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 47331 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3814 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 47356 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3881 "src/ocaml/preprocess/parser_raw.mly"
                                           ( _1 )
# 47381 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = mutable_;
                MenhirLib.EngineTypes.startp = _startpos_mutable__;
                MenhirLib.EngineTypes.endp = _endpos_mutable__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47428 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let mutable_ : (Asttypes.mutable_flag) = Obj.magic mutable_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let label =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 47441 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47449 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47455 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _1 = 
# 4024 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 47460 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2072 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, mutable_, Cfk_virtual ty), attrs )
# 47465 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47514 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 47527 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47535 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47541 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _1 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 47546 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2074 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 47551 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47606 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 47620 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47628 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47636 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 47642 "src/ocaml/preprocess/parser_raw.ml"
           in
          (
# 2074 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 47647 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined1 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47703 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 47716 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47724 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined1_ in
          let _2 = 
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47731 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
          let _1 = 
# 4027 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 47737 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2077 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 47757 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined2 : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47819 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 47833 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47841 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47850 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
          let _1 = 
# 4028 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 47857 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2077 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 47876 "src/ocaml/preprocess/parser_raw.ml"
           : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47948 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47960 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4127 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47968 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3130 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~attrs ~loc ~docs,
      ext )
# 47981 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.value_description * string Location.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.virtual_flag) = 
# 3988 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Concrete )
# 48000 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.virtual_flag) = 
# 3989 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Virtual )
# 48025 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
            ( Immutable )
# 48050 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 48082 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 4014 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 48114 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 4019 "src/ocaml/preprocess/parser_raw.mly"
            ( Public )
# 48139 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 4020 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 48171 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 4021 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 48203 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _6 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 48266 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1080 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 48271 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 48277 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos_xs_ in
          let _5 =
            let _1 = _1_inlined2 in
            
# 3550 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 48286 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 48297 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3473 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_type
          (_3,
           (Type.mk lident
              ~params:_2
              ~cstrs:_6
              ~manifest:_5
              ~priv:_4
              ~loc:(make_loc _sloc))) )
# 48314 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 3550 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 48371 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined2_ in
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 48383 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3486 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_typesubst
         (_3,
           (Type.mk lident
              ~params:_2
              ~manifest:_5
              ~loc:(make_loc _sloc))) )
# 48398 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 48451 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 48462 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3494 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_module (_2, _4) )
# 48468 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 48521 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 996 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 48532 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          (
# 3496 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_modsubst (_2, _4) )
# 48538 "src/ocaml/preprocess/parser_raw.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3499 "src/ocaml/preprocess/parser_raw.mly"
                   ( Public )
# 48564 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3500 "src/ocaml/preprocess/parser_raw.mly"
                   ( Private )
# 48596 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
  module Symbols = struct
    
    type _ terminal = 
      | T_error : unit terminal
      | T_WITH : unit terminal
      | T_WHILE_LWT : unit terminal
      | T_WHILE : unit terminal
      | T_WHEN : unit terminal
      | T_VIRTUAL : unit terminal
      | T_VAL : unit terminal
      | T_UNDERSCORE : unit terminal
      | T_UIDENT : (
# 862 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48634 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_TYPE : unit terminal
      | T_TRY_LWT : unit terminal
      | T_TRY : unit terminal
      | T_TRUE : unit terminal
      | T_TO : unit terminal
      | T_TILDE : unit terminal
      | T_THEN : unit terminal
      | T_STRUCT : unit terminal
      | T_STRING : (
# 848 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 48647 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_STAR : unit terminal
      | T_SIG : unit terminal
      | T_SEMISEMI : unit terminal
      | T_SEMI : unit terminal
      | T_RPAREN : unit terminal
      | T_REC : unit terminal
      | T_RBRACKET : unit terminal
      | T_RBRACE : unit terminal
      | T_QUOTED_STRING_ITEM : (
# 853 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 48660 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_QUOTED_STRING_EXPR : (
# 850 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 48665 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_QUOTE : unit terminal
      | T_QUESTIONQUESTION : unit terminal
      | T_QUESTION : unit terminal
      | T_PRIVATE : unit terminal
      | T_PREFIXOP : (
# 834 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48674 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_PLUSEQ : unit terminal
      | T_PLUSDOT : unit terminal
      | T_PLUS : unit terminal
      | T_PERCENT : unit terminal
      | T_OR : unit terminal
      | T_OPTLABEL : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48684 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_OPEN : unit terminal
      | T_OF : unit terminal
      | T_OBJECT : unit terminal
      | T_NONREC : unit terminal
      | T_NONLOCAL : unit terminal
      | T_NEW : unit terminal
      | T_MUTABLE : unit terminal
      | T_MODULE : unit terminal
      | T_MINUSGREATER : unit terminal
      | T_MINUSDOT : unit terminal
      | T_MINUS : unit terminal
      | T_METHOD : unit terminal
      | T_MATCH_LWT : unit terminal
      | T_MATCH : unit terminal
      | T_LPAREN : unit terminal
      | T_LOCAL : unit terminal
      | T_LIDENT : (
# 808 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48705 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET_LWT : unit terminal
      | T_LETOP : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48711 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET : unit terminal
      | T_LESSMINUS : unit terminal
      | T_LESS : unit terminal
      | T_LBRACKETPERCENTPERCENT : unit terminal
      | T_LBRACKETPERCENT : unit terminal
      | T_LBRACKETLESS : unit terminal
      | T_LBRACKETGREATER : unit terminal
      | T_LBRACKETBAR : unit terminal
      | T_LBRACKETATATAT : unit terminal
      | T_LBRACKETATAT : unit terminal
      | T_LBRACKETAT : unit terminal
      | T_LBRACKET : unit terminal
      | T_LBRACELESS : unit terminal
      | T_LBRACE : unit terminal
      | T_LAZY : unit terminal
      | T_LABEL : (
# 795 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48731 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INT : (
# 794 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 48736 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INITIALIZER : unit terminal
      | T_INHERIT : unit terminal
      | T_INFIXOP4 : (
# 788 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48743 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP3 : (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48748 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP2 : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48753 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP1 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48758 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP0 : (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48763 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INCLUDE : unit terminal
      | T_IN : unit terminal
      | T_IF : unit terminal
      | T_HASHOP : (
# 845 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48771 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_HASH : unit terminal
      | T_GREATERRBRACKET : unit terminal
      | T_GREATERRBRACE : unit terminal
      | T_GREATERDOT : unit terminal
      | T_GREATER : unit terminal
      | T_GLOBAL : unit terminal
      | T_FUNCTOR : unit terminal
      | T_FUNCTION : unit terminal
      | T_FUN : unit terminal
      | T_FOR_LWT : unit terminal
      | T_FOR : unit terminal
      | T_FLOAT : (
# 772 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 48787 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_FINALLY_LWT : unit terminal
      | T_FALSE : unit terminal
      | T_EXTERNAL : unit terminal
      | T_EXCEPTION : unit terminal
      | T_EQUAL : unit terminal
      | T_EOL : unit terminal
      | T_EOF : unit terminal
      | T_END : unit terminal
      | T_ELSE : unit terminal
      | T_DOWNTO : unit terminal
      | T_DOTTILDE : unit terminal
      | T_DOTOP : (
# 789 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48803 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DOTLESS : unit terminal
      | T_DOTDOT : unit terminal
      | T_DOT : unit terminal
      | T_DONE : unit terminal
      | T_DOCSTRING : (
# 870 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 48812 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DO : unit terminal
      | T_CONSTRAINT : unit terminal
      | T_COMMENT : (
# 869 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 48819 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_COMMA : unit terminal
      | T_COLONGREATER : unit terminal
      | T_COLONEQUAL : unit terminal
      | T_COLONCOLON : unit terminal
      | T_COLON : unit terminal
      | T_CLASS : unit terminal
      | T_CHAR : (
# 752 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 48830 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_BEGIN : unit terminal
      | T_BARRBRACKET : unit terminal
      | T_BARBAR : unit terminal
      | T_BAR : unit terminal
      | T_BANG : unit terminal
      | T_BACKQUOTE : unit terminal
      | T_ASSERT : unit terminal
      | T_AS : unit terminal
      | T_ANDOP : (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 48843 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_AND : unit terminal
      | T_AMPERSAND : unit terminal
      | T_AMPERAMPER : unit terminal
    
    type _ nonterminal = 
      | N_with_type_binder : (Asttypes.private_flag) nonterminal
      | N_with_constraint : (Parsetree.with_constraint) nonterminal
      | N_virtual_with_private_flag : (Asttypes.private_flag) nonterminal
      | N_virtual_with_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_virtual_flag : (Asttypes.virtual_flag) nonterminal
      | N_value_description : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_value : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_val_longident : (Longident.t) nonterminal
      | N_val_ident : (string) nonterminal
      | N_val_extra_ident : (string) nonterminal
      | N_use_file : (Parsetree.toplevel_phrase list) nonterminal
      | N_type_variance : (Asttypes.variance * Asttypes.injectivity) nonterminal
      | N_type_variable : (Parsetree.core_type) nonterminal
      | N_type_parameters : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) nonterminal
      | N_type_parameter : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) nonterminal
      | N_type_longident : (Longident.t) nonterminal
      | N_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_type_constraint : (Parsetree.core_type option * Parsetree.core_type option) nonterminal
      | N_tuple_type : (Parsetree.core_type) nonterminal
      | N_toplevel_phrase : (Parsetree.toplevel_phrase) nonterminal
      | N_toplevel_directive : (Parsetree.toplevel_phrase) nonterminal
      | N_tag_field : (Parsetree.row_field) nonterminal
      | N_subtractive : (string) nonterminal
      | N_structure_item : (Parsetree.structure_item) nonterminal
      | N_structure : (Parsetree.structure) nonterminal
      | N_strict_function_type : (Parsetree.core_type) nonterminal
      | N_strict_binding : (Parsetree.expression) nonterminal
      | N_str_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_single_attr_id : (string) nonterminal
      | N_simple_pattern_not_ident : (Parsetree.pattern) nonterminal
      | N_simple_pattern : (Parsetree.pattern) nonterminal
      | N_simple_expr : (Parsetree.expression) nonterminal
      | N_simple_delimited_pattern : (Parsetree.pattern) nonterminal
      | N_signed_constant : (Parsetree.constant) nonterminal
      | N_signature_item : (Parsetree.signature_item) nonterminal
      | N_signature : (Parsetree.signature) nonterminal
      | N_sig_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_seq_expr : (Parsetree.expression) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ : ((Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_pattern_ : (Parsetree.pattern list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ : ((string Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_expr_ : (Parsetree.expression list) nonterminal
      | N_row_field : (Parsetree.row_field) nonterminal
      | N_reversed_separated_nontrivial_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_expr_ : (Parsetree.expression list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_type_parameter_ : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_BAR_row_field_ : (Parsetree.row_field list) nonterminal
      | N_reversed_separated_nonempty_llist_AND_with_constraint_ : (Parsetree.with_constraint list) nonterminal
      | N_reversed_separated_nonempty_llist_AND_comprehension_clause_ : (Extensions.comprehension_clause list) nonterminal
      | N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ : (Parsetree.core_type list) nonterminal
      | N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ : (Parsetree.case list) nonterminal
      | N_reversed_nonempty_llist_typevar_ : (string Location.loc list) nonterminal
      | N_reversed_nonempty_llist_name_tag_ : (string list) nonterminal
      | N_reversed_nonempty_llist_labeled_simple_expr_ : ((Asttypes.arg_label * Parsetree.expression) list) nonterminal
      | N_reversed_nonempty_llist_functor_arg_ : ((Lexing.position * Parsetree.functor_parameter) list) nonterminal
      | N_reversed_llist_preceded_CONSTRAINT_constrain__ : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) nonterminal
      | N_reversed_bar_llist_extension_constructor_declaration_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_extension_constructor_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_constructor_declaration_ : (Parsetree.constructor_declaration list) nonterminal
      | N_record_expr_content : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_rec_flag : (Asttypes.rec_flag) nonterminal
      | N_private_virtual_flags : (Asttypes.private_flag * Asttypes.virtual_flag) nonterminal
      | N_private_flag : (Asttypes.private_flag) nonterminal
      | N_primitive_declaration : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_post_item_attribute : (Parsetree.attribute) nonterminal
      | N_possibly_poly_core_type_no_attr_ : (Parsetree.core_type) nonterminal
      | N_possibly_poly_core_type_ : (Parsetree.core_type) nonterminal
      | N_payload : (Parsetree.payload) nonterminal
      | N_pattern_var : (Parsetree.pattern) nonterminal
      | N_pattern_no_exn : (Parsetree.pattern) nonterminal
      | N_pattern_gen : (Parsetree.pattern) nonterminal
      | N_pattern_comma_list_pattern_no_exn_ : (Parsetree.pattern list) nonterminal
      | N_pattern_comma_list_pattern_ : (Parsetree.pattern list) nonterminal
      | N_pattern : (Parsetree.pattern) nonterminal
      | N_parse_val_longident : (Longident.t) nonterminal
      | N_parse_pattern : (Parsetree.pattern) nonterminal
      | N_parse_mty_longident : (Longident.t) nonterminal
      | N_parse_mod_longident : (Longident.t) nonterminal
      | N_parse_mod_ext_longident : (Longident.t) nonterminal
      | N_parse_expression : (Parsetree.expression) nonterminal
      | N_parse_core_type : (Parsetree.core_type) nonterminal
      | N_parse_constr_longident : (Longident.t) nonterminal
      | N_parse_any_longident : (Longident.t) nonterminal
      | N_paren_module_expr : (Parsetree.module_expr) nonterminal
      | N_optlabel : (string) nonterminal
      | N_option_type_constraint_ : ((Parsetree.core_type option * Parsetree.core_type option) option) nonterminal
      | N_option_preceded_EQUAL_seq_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_EQUAL_pattern__ : (Parsetree.pattern option) nonterminal
      | N_option_preceded_EQUAL_module_type__ : (Parsetree.module_type option) nonterminal
      | N_option_preceded_EQUAL_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_COLON_core_type__ : (Parsetree.core_type option) nonterminal
      | N_option_preceded_AS_mkrhs_LIDENT___ : (string Location.loc option) nonterminal
      | N_option_SEMI_ : (unit option) nonterminal
      | N_option_BAR_ : (unit option) nonterminal
      | N_opt_ampersand : (bool) nonterminal
      | N_operator : (string) nonterminal
      | N_open_description : (Parsetree.open_description * string Location.loc option) nonterminal
      | N_open_declaration : (Parsetree.open_declaration * string Location.loc option) nonterminal
      | N_nonempty_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_nonempty_list_raw_string_ : (string list) nonterminal
      | N_nonempty_list_mkrhs_LIDENT__ : (string Location.loc list) nonterminal
      | N_name_tag : (string) nonterminal
      | N_mutable_virtual_flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) nonterminal
      | N_mutable_or_global_flag : (Asttypes.mutable_flag * Asttypes.global_flag) nonterminal
      | N_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_mty_longident : (Longident.t) nonterminal
      | N_module_type_declaration : (Parsetree.module_type_declaration * string Location.loc option) nonterminal
      | N_module_type : (Parsetree.module_type) nonterminal
      | N_module_subst : (Parsetree.module_substitution * string Location.loc option) nonterminal
      | N_module_name : (string option) nonterminal
      | N_module_expr : (Parsetree.module_expr) nonterminal
      | N_module_declaration_body : (Parsetree.module_type) nonterminal
      | N_module_binding_body : (Parsetree.module_expr) nonterminal
      | N_mod_longident : (Longident.t) nonterminal
      | N_mod_ext_longident : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_val_ident_ : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_UIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_LIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_ident_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident___anonymous_37_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_UIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_LIDENT_ : (Longident.t) nonterminal
      | N_method_ : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_meth_list : (Parsetree.object_field list * Asttypes.closed_flag) nonterminal
      | N_match_case : (Parsetree.case) nonterminal
      | N_lwt_bindings : (Ast_helper.let_bindings) nonterminal
      | N_lwt_binding : (Ast_helper.let_bindings) nonterminal
      | N_local_strict_binding : (Parsetree.expression) nonterminal
      | N_local_fun_binding : (Parsetree.expression) nonterminal
      | N_listx_SEMI_record_pat_field_UNDERSCORE_ : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) nonterminal
      | N_list_use_file_element_ : (Parsetree.toplevel_phrase list list) nonterminal
      | N_list_text_str_structure_item__ : (Parsetree.structure_item list list) nonterminal
      | N_list_text_cstr_class_field__ : (Parsetree.class_field list list) nonterminal
      | N_list_text_csig_class_sig_field__ : (Parsetree.class_type_field list list) nonterminal
      | N_list_structure_element_ : (Parsetree.structure_item list list) nonterminal
      | N_list_signature_element_ : (Parsetree.signature_item list list) nonterminal
      | N_list_post_item_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_generic_and_type_declaration_type_subst_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_generic_and_type_declaration_type_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_and_module_declaration_ : (Parsetree.module_declaration list) nonterminal
      | N_list_and_module_binding_ : (Parsetree.module_binding list) nonterminal
      | N_list_and_class_type_declaration_ : (Parsetree.class_type_declaration list) nonterminal
      | N_list_and_class_description_ : (Parsetree.class_description list) nonterminal
      | N_list_and_class_declaration_ : (Parsetree.class_declaration list) nonterminal
      | N_letop_bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) nonterminal
      | N_letop_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_let_pattern : (Parsetree.pattern) nonterminal
      | N_let_bindings_no_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_bindings_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_labeled_simple_pattern : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) nonterminal
      | N_labeled_simple_expr : (Asttypes.arg_label * Parsetree.expression) nonterminal
      | N_label_longident : (Longident.t) nonterminal
      | N_label_let_pattern : (string * Parsetree.pattern) nonterminal
      | N_label_declarations : (Parsetree.label_declaration list) nonterminal
      | N_label_declaration_semi : (Parsetree.label_declaration) nonterminal
      | N_label_declaration : (Parsetree.label_declaration) nonterminal
      | N_item_extension : (Parsetree.extension) nonterminal
      | N_interface : (Parsetree.signature) nonterminal
      | N_index_mod : (string) nonterminal
      | N_include_and_functor_attr : (Parsetree.attribute list) nonterminal
      | N_implementation : (Parsetree.structure) nonterminal
      | N_ident : (string) nonterminal
      | N_generic_type_declaration_nonrec_flag_type_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_constructor_declaration_epsilon_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generic_constructor_declaration_BAR_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generalized_constructor_arguments : (Parsetree.constructor_arguments * Parsetree.core_type option) nonterminal
      | N_functor_args : ((Lexing.position * Parsetree.functor_parameter) list) nonterminal
      | N_functor_arg : (Lexing.position * Parsetree.functor_parameter) nonterminal
      | N_function_type : (Parsetree.core_type) nonterminal
      | N_fun_def : (Parsetree.expression) nonterminal
      | N_fun_binding : (Parsetree.expression) nonterminal
      | N_formal_class_parameters : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) nonterminal
      | N_floating_attribute : (Parsetree.attribute) nonterminal
      | N_extension_constructor_rebind_epsilon_ : (Parsetree.extension_constructor) nonterminal
      | N_extension_constructor_rebind_BAR_ : (Parsetree.extension_constructor) nonterminal
      | N_extension : (Parsetree.extension) nonterminal
      | N_ext : (string Location.loc option) nonterminal
      | N_expr : (Parsetree.expression) nonterminal
      | N_direction_flag : (Asttypes.direction_flag) nonterminal
      | N_core_type : (Parsetree.core_type) nonterminal
      | N_constructor_declarations : (Parsetree.constructor_declaration list) nonterminal
      | N_constructor_arguments : (Parsetree.constructor_arguments) nonterminal
      | N_constrain_field : (Parsetree.core_type * Parsetree.core_type) nonterminal
      | N_constr_longident : (Longident.t) nonterminal
      | N_constr_ident : (string) nonterminal
      | N_constr_extra_nonprefix_ident : (string) nonterminal
      | N_constant : (Parsetree.constant) nonterminal
      | N_comprehension_tail_RBRACKET_ : (Extensions.comprehension list) nonterminal
      | N_comprehension_tail_BARRBRACKET_ : (Extensions.comprehension list) nonterminal
      | N_comprehension_clause : (Extensions.comprehension_clause) nonterminal
      | N_clty_longident : (Longident.t) nonterminal
      | N_class_type_declarations : (string Location.loc option * Parsetree.class_type_declaration list) nonterminal
      | N_class_type : (Parsetree.class_type) nonterminal
      | N_class_simple_expr : (Parsetree.class_expr) nonterminal
      | N_class_signature : (Parsetree.class_type) nonterminal
      | N_class_sig_field : (Parsetree.class_type_field) nonterminal
      | N_class_self_type : (Parsetree.core_type) nonterminal
      | N_class_self_pattern : (Parsetree.pattern) nonterminal
      | N_class_longident : (Longident.t) nonterminal
      | N_class_fun_def : (Parsetree.class_expr) nonterminal
      | N_class_fun_binding : (Parsetree.class_expr) nonterminal
      | N_class_field : (Parsetree.class_field) nonterminal
      | N_class_expr : (Parsetree.class_expr) nonterminal
      | N_attribute : (Parsetree.attribute) nonterminal
      | N_attr_id : (string Location.loc) nonterminal
      | N_atomic_type : (Parsetree.core_type) nonterminal
      | N_any_longident : (Longident.t) nonterminal
      | N_and_let_binding : (Ast_helper.let_binding) nonterminal
      | N_alias_type : (Parsetree.core_type) nonterminal
      | N_additive : (string) nonterminal
    
  end
  
  include Symbols
  
  include MenhirLib.InspectionTableInterpreter.Make (Tables) (struct
    
    include TI
    
    include Symbols
    
    include MenhirLib.InspectionTableInterpreter.Symbols (Symbols)
    
    let terminal =
      fun t ->
        match t with
        | 0 ->
            X (T T_error)
        | 1 ->
            X (T T_WITH)
        | 2 ->
            X (T T_WHILE_LWT)
        | 3 ->
            X (T T_WHILE)
        | 4 ->
            X (T T_WHEN)
        | 5 ->
            X (T T_VIRTUAL)
        | 6 ->
            X (T T_VAL)
        | 7 ->
            X (T T_UNDERSCORE)
        | 8 ->
            X (T T_UIDENT)
        | 9 ->
            X (T T_TYPE)
        | 10 ->
            X (T T_TRY_LWT)
        | 11 ->
            X (T T_TRY)
        | 12 ->
            X (T T_TRUE)
        | 13 ->
            X (T T_TO)
        | 14 ->
            X (T T_TILDE)
        | 15 ->
            X (T T_THEN)
        | 16 ->
            X (T T_STRUCT)
        | 17 ->
            X (T T_STRING)
        | 18 ->
            X (T T_STAR)
        | 19 ->
            X (T T_SIG)
        | 20 ->
            X (T T_SEMISEMI)
        | 21 ->
            X (T T_SEMI)
        | 22 ->
            X (T T_RPAREN)
        | 23 ->
            X (T T_REC)
        | 24 ->
            X (T T_RBRACKET)
        | 25 ->
            X (T T_RBRACE)
        | 26 ->
            X (T T_QUOTED_STRING_ITEM)
        | 27 ->
            X (T T_QUOTED_STRING_EXPR)
        | 28 ->
            X (T T_QUOTE)
        | 29 ->
            X (T T_QUESTIONQUESTION)
        | 30 ->
            X (T T_QUESTION)
        | 31 ->
            X (T T_PRIVATE)
        | 32 ->
            X (T T_PREFIXOP)
        | 33 ->
            X (T T_PLUSEQ)
        | 34 ->
            X (T T_PLUSDOT)
        | 35 ->
            X (T T_PLUS)
        | 36 ->
            X (T T_PERCENT)
        | 37 ->
            X (T T_OR)
        | 38 ->
            X (T T_OPTLABEL)
        | 39 ->
            X (T T_OPEN)
        | 40 ->
            X (T T_OF)
        | 41 ->
            X (T T_OBJECT)
        | 42 ->
            X (T T_NONREC)
        | 43 ->
            X (T T_NONLOCAL)
        | 44 ->
            X (T T_NEW)
        | 45 ->
            X (T T_MUTABLE)
        | 46 ->
            X (T T_MODULE)
        | 47 ->
            X (T T_MINUSGREATER)
        | 48 ->
            X (T T_MINUSDOT)
        | 49 ->
            X (T T_MINUS)
        | 50 ->
            X (T T_METHOD)
        | 51 ->
            X (T T_MATCH_LWT)
        | 52 ->
            X (T T_MATCH)
        | 53 ->
            X (T T_LPAREN)
        | 54 ->
            X (T T_LOCAL)
        | 55 ->
            X (T T_LIDENT)
        | 56 ->
            X (T T_LET_LWT)
        | 57 ->
            X (T T_LETOP)
        | 58 ->
            X (T T_LET)
        | 59 ->
            X (T T_LESSMINUS)
        | 60 ->
            X (T T_LESS)
        | 61 ->
            X (T T_LBRACKETPERCENTPERCENT)
        | 62 ->
            X (T T_LBRACKETPERCENT)
        | 63 ->
            X (T T_LBRACKETLESS)
        | 64 ->
            X (T T_LBRACKETGREATER)
        | 65 ->
            X (T T_LBRACKETBAR)
        | 66 ->
            X (T T_LBRACKETATATAT)
        | 67 ->
            X (T T_LBRACKETATAT)
        | 68 ->
            X (T T_LBRACKETAT)
        | 69 ->
            X (T T_LBRACKET)
        | 70 ->
            X (T T_LBRACELESS)
        | 71 ->
            X (T T_LBRACE)
        | 72 ->
            X (T T_LAZY)
        | 73 ->
            X (T T_LABEL)
        | 74 ->
            X (T T_INT)
        | 75 ->
            X (T T_INITIALIZER)
        | 76 ->
            X (T T_INHERIT)
        | 77 ->
            X (T T_INFIXOP4)
        | 78 ->
            X (T T_INFIXOP3)
        | 79 ->
            X (T T_INFIXOP2)
        | 80 ->
            X (T T_INFIXOP1)
        | 81 ->
            X (T T_INFIXOP0)
        | 82 ->
            X (T T_INCLUDE)
        | 83 ->
            X (T T_IN)
        | 84 ->
            X (T T_IF)
        | 85 ->
            X (T T_HASHOP)
        | 86 ->
            X (T T_HASH)
        | 87 ->
            X (T T_GREATERRBRACKET)
        | 88 ->
            X (T T_GREATERRBRACE)
        | 89 ->
            X (T T_GREATERDOT)
        | 90 ->
            X (T T_GREATER)
        | 91 ->
            X (T T_GLOBAL)
        | 92 ->
            X (T T_FUNCTOR)
        | 93 ->
            X (T T_FUNCTION)
        | 94 ->
            X (T T_FUN)
        | 95 ->
            X (T T_FOR_LWT)
        | 96 ->
            X (T T_FOR)
        | 97 ->
            X (T T_FLOAT)
        | 98 ->
            X (T T_FINALLY_LWT)
        | 99 ->
            X (T T_FALSE)
        | 100 ->
            X (T T_EXTERNAL)
        | 101 ->
            X (T T_EXCEPTION)
        | 102 ->
            X (T T_EQUAL)
        | 103 ->
            X (T T_EOL)
        | 104 ->
            X (T T_EOF)
        | 105 ->
            X (T T_END)
        | 106 ->
            X (T T_ELSE)
        | 107 ->
            X (T T_DOWNTO)
        | 108 ->
            X (T T_DOTTILDE)
        | 109 ->
            X (T T_DOTOP)
        | 110 ->
            X (T T_DOTLESS)
        | 111 ->
            X (T T_DOTDOT)
        | 112 ->
            X (T T_DOT)
        | 113 ->
            X (T T_DONE)
        | 114 ->
            X (T T_DOCSTRING)
        | 115 ->
            X (T T_DO)
        | 116 ->
            X (T T_CONSTRAINT)
        | 117 ->
            X (T T_COMMENT)
        | 118 ->
            X (T T_COMMA)
        | 119 ->
            X (T T_COLONGREATER)
        | 120 ->
            X (T T_COLONEQUAL)
        | 121 ->
            X (T T_COLONCOLON)
        | 122 ->
            X (T T_COLON)
        | 123 ->
            X (T T_CLASS)
        | 124 ->
            X (T T_CHAR)
        | 125 ->
            X (T T_BEGIN)
        | 126 ->
            X (T T_BARRBRACKET)
        | 127 ->
            X (T T_BARBAR)
        | 128 ->
            X (T T_BAR)
        | 129 ->
            X (T T_BANG)
        | 130 ->
            X (T T_BACKQUOTE)
        | 131 ->
            X (T T_ASSERT)
        | 132 ->
            X (T T_AS)
        | 133 ->
            X (T T_ANDOP)
        | 134 ->
            X (T T_AND)
        | 135 ->
            X (T T_AMPERSAND)
        | 136 ->
            X (T T_AMPERAMPER)
        | _ ->
            assert false
    
    and nonterminal =
      fun nt ->
        match nt with
        | 228 ->
            X (N N_additive)
        | 227 ->
            X (N N_alias_type)
        | 226 ->
            X (N N_and_let_binding)
        | 225 ->
            X (N N_any_longident)
        | 224 ->
            X (N N_atomic_type)
        | 223 ->
            X (N N_attr_id)
        | 222 ->
            X (N N_attribute)
        | 221 ->
            X (N N_class_expr)
        | 220 ->
            X (N N_class_field)
        | 219 ->
            X (N N_class_fun_binding)
        | 218 ->
            X (N N_class_fun_def)
        | 217 ->
            X (N N_class_longident)
        | 216 ->
            X (N N_class_self_pattern)
        | 215 ->
            X (N N_class_self_type)
        | 214 ->
            X (N N_class_sig_field)
        | 213 ->
            X (N N_class_signature)
        | 212 ->
            X (N N_class_simple_expr)
        | 211 ->
            X (N N_class_type)
        | 210 ->
            X (N N_class_type_declarations)
        | 209 ->
            X (N N_clty_longident)
        | 208 ->
            X (N N_comprehension_clause)
        | 207 ->
            X (N N_comprehension_tail_BARRBRACKET_)
        | 206 ->
            X (N N_comprehension_tail_RBRACKET_)
        | 205 ->
            X (N N_constant)
        | 204 ->
            X (N N_constr_extra_nonprefix_ident)
        | 203 ->
            X (N N_constr_ident)
        | 202 ->
            X (N N_constr_longident)
        | 201 ->
            X (N N_constrain_field)
        | 200 ->
            X (N N_constructor_arguments)
        | 199 ->
            X (N N_constructor_declarations)
        | 198 ->
            X (N N_core_type)
        | 197 ->
            X (N N_direction_flag)
        | 196 ->
            X (N N_expr)
        | 195 ->
            X (N N_ext)
        | 194 ->
            X (N N_extension)
        | 193 ->
            X (N N_extension_constructor_rebind_BAR_)
        | 192 ->
            X (N N_extension_constructor_rebind_epsilon_)
        | 191 ->
            X (N N_floating_attribute)
        | 190 ->
            X (N N_formal_class_parameters)
        | 189 ->
            X (N N_fun_binding)
        | 188 ->
            X (N N_fun_def)
        | 187 ->
            X (N N_function_type)
        | 186 ->
            X (N N_functor_arg)
        | 185 ->
            X (N N_functor_args)
        | 184 ->
            X (N N_generalized_constructor_arguments)
        | 183 ->
            X (N N_generic_constructor_declaration_BAR_)
        | 182 ->
            X (N N_generic_constructor_declaration_epsilon_)
        | 181 ->
            X (N N_generic_type_declaration_no_nonrec_flag_type_subst_kind_)
        | 180 ->
            X (N N_generic_type_declaration_nonrec_flag_type_kind_)
        | 179 ->
            X (N N_ident)
        | 178 ->
            X (N N_implementation)
        | 177 ->
            X (N N_include_and_functor_attr)
        | 176 ->
            X (N N_index_mod)
        | 175 ->
            X (N N_interface)
        | 174 ->
            X (N N_item_extension)
        | 173 ->
            X (N N_label_declaration)
        | 172 ->
            X (N N_label_declaration_semi)
        | 171 ->
            X (N N_label_declarations)
        | 170 ->
            X (N N_label_let_pattern)
        | 169 ->
            X (N N_label_longident)
        | 168 ->
            X (N N_labeled_simple_expr)
        | 167 ->
            X (N N_labeled_simple_pattern)
        | 166 ->
            X (N N_let_binding_body)
        | 165 ->
            X (N N_let_bindings_ext_)
        | 164 ->
            X (N N_let_bindings_no_ext_)
        | 163 ->
            X (N N_let_pattern)
        | 162 ->
            X (N N_letop_binding_body)
        | 161 ->
            X (N N_letop_bindings)
        | 160 ->
            X (N N_list_and_class_declaration_)
        | 159 ->
            X (N N_list_and_class_description_)
        | 158 ->
            X (N N_list_and_class_type_declaration_)
        | 157 ->
            X (N N_list_and_module_binding_)
        | 156 ->
            X (N N_list_and_module_declaration_)
        | 155 ->
            X (N N_list_attribute_)
        | 154 ->
            X (N N_list_generic_and_type_declaration_type_kind__)
        | 153 ->
            X (N N_list_generic_and_type_declaration_type_subst_kind__)
        | 152 ->
            X (N N_list_post_item_attribute_)
        | 151 ->
            X (N N_list_signature_element_)
        | 150 ->
            X (N N_list_structure_element_)
        | 149 ->
            X (N N_list_text_csig_class_sig_field__)
        | 148 ->
            X (N N_list_text_cstr_class_field__)
        | 147 ->
            X (N N_list_text_str_structure_item__)
        | 146 ->
            X (N N_list_use_file_element_)
        | 145 ->
            X (N N_listx_SEMI_record_pat_field_UNDERSCORE_)
        | 144 ->
            X (N N_local_fun_binding)
        | 143 ->
            X (N N_local_strict_binding)
        | 142 ->
            X (N N_lwt_binding)
        | 141 ->
            X (N N_lwt_bindings)
        | 140 ->
            X (N N_match_case)
        | 139 ->
            X (N N_meth_list)
        | 138 ->
            X (N N_method_)
        | 137 ->
            X (N N_mk_longident_mod_ext_longident_LIDENT_)
        | 136 ->
            X (N N_mk_longident_mod_ext_longident_UIDENT_)
        | 135 ->
            X (N N_mk_longident_mod_ext_longident___anonymous_37_)
        | 134 ->
            X (N N_mk_longident_mod_ext_longident_ident_)
        | 133 ->
            X (N N_mk_longident_mod_longident_LIDENT_)
        | 132 ->
            X (N N_mk_longident_mod_longident_UIDENT_)
        | 131 ->
            X (N N_mk_longident_mod_longident_val_ident_)
        | 130 ->
            X (N N_mod_ext_longident)
        | 129 ->
            X (N N_mod_longident)
        | 128 ->
            X (N N_module_binding_body)
        | 127 ->
            X (N N_module_declaration_body)
        | 126 ->
            X (N N_module_expr)
        | 125 ->
            X (N N_module_name)
        | 124 ->
            X (N N_module_subst)
        | 123 ->
            X (N N_module_type)
        | 122 ->
            X (N N_module_type_declaration)
        | 121 ->
            X (N N_mty_longident)
        | 120 ->
            X (N N_mutable_flag)
        | 119 ->
            X (N N_mutable_or_global_flag)
        | 118 ->
            X (N N_mutable_virtual_flags)
        | 117 ->
            X (N N_name_tag)
        | 116 ->
            X (N N_nonempty_list_mkrhs_LIDENT__)
        | 115 ->
            X (N N_nonempty_list_raw_string_)
        | 114 ->
            X (N N_nonempty_type_kind)
        | 113 ->
            X (N N_open_declaration)
        | 112 ->
            X (N N_open_description)
        | 111 ->
            X (N N_operator)
        | 110 ->
            X (N N_opt_ampersand)
        | 109 ->
            X (N N_option_BAR_)
        | 108 ->
            X (N N_option_SEMI_)
        | 107 ->
            X (N N_option_preceded_AS_mkrhs_LIDENT___)
        | 106 ->
            X (N N_option_preceded_COLON_core_type__)
        | 105 ->
            X (N N_option_preceded_EQUAL_expr__)
        | 104 ->
            X (N N_option_preceded_EQUAL_module_type__)
        | 103 ->
            X (N N_option_preceded_EQUAL_pattern__)
        | 102 ->
            X (N N_option_preceded_EQUAL_seq_expr__)
        | 101 ->
            X (N N_option_type_constraint_)
        | 100 ->
            X (N N_optlabel)
        | 99 ->
            X (N N_paren_module_expr)
        | 98 ->
            X (N N_parse_any_longident)
        | 97 ->
            X (N N_parse_constr_longident)
        | 96 ->
            X (N N_parse_core_type)
        | 95 ->
            X (N N_parse_expression)
        | 94 ->
            X (N N_parse_mod_ext_longident)
        | 93 ->
            X (N N_parse_mod_longident)
        | 92 ->
            X (N N_parse_mty_longident)
        | 91 ->
            X (N N_parse_pattern)
        | 90 ->
            X (N N_parse_val_longident)
        | 89 ->
            X (N N_pattern)
        | 88 ->
            X (N N_pattern_comma_list_pattern_)
        | 87 ->
            X (N N_pattern_comma_list_pattern_no_exn_)
        | 86 ->
            X (N N_pattern_gen)
        | 85 ->
            X (N N_pattern_no_exn)
        | 84 ->
            X (N N_pattern_var)
        | 83 ->
            X (N N_payload)
        | 82 ->
            X (N N_possibly_poly_core_type_)
        | 81 ->
            X (N N_possibly_poly_core_type_no_attr_)
        | 80 ->
            X (N N_post_item_attribute)
        | 79 ->
            X (N N_primitive_declaration)
        | 78 ->
            X (N N_private_flag)
        | 77 ->
            X (N N_private_virtual_flags)
        | 76 ->
            X (N N_rec_flag)
        | 75 ->
            X (N N_record_expr_content)
        | 74 ->
            X (N N_reversed_bar_llist_constructor_declaration_)
        | 73 ->
            X (N N_reversed_bar_llist_extension_constructor_)
        | 72 ->
            X (N N_reversed_bar_llist_extension_constructor_declaration_)
        | 71 ->
            X (N N_reversed_llist_preceded_CONSTRAINT_constrain__)
        | 70 ->
            X (N N_reversed_nonempty_llist_functor_arg_)
        | 69 ->
            X (N N_reversed_nonempty_llist_labeled_simple_expr_)
        | 68 ->
            X (N N_reversed_nonempty_llist_name_tag_)
        | 67 ->
            X (N N_reversed_nonempty_llist_typevar_)
        | 66 ->
            X (N N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_)
        | 65 ->
            X (N N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_)
        | 64 ->
            X (N N_reversed_separated_nonempty_llist_AND_comprehension_clause_)
        | 63 ->
            X (N N_reversed_separated_nonempty_llist_AND_with_constraint_)
        | 62 ->
            X (N N_reversed_separated_nonempty_llist_BAR_row_field_)
        | 61 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_core_type_)
        | 60 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_type_parameter_)
        | 59 ->
            X (N N_reversed_separated_nonempty_llist_STAR_atomic_type_)
        | 58 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_core_type_)
        | 57 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_expr_)
        | 56 ->
            X (N N_reversed_separated_nontrivial_llist_STAR_atomic_type_)
        | 55 ->
            X (N N_row_field)
        | 54 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_expr_)
        | 53 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_)
        | 52 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_pattern_)
        | 51 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_)
        | 50 ->
            X (N N_seq_expr)
        | 49 ->
            X (N N_sig_exception_declaration)
        | 48 ->
            X (N N_signature)
        | 47 ->
            X (N N_signature_item)
        | 46 ->
            X (N N_signed_constant)
        | 45 ->
            X (N N_simple_delimited_pattern)
        | 44 ->
            X (N N_simple_expr)
        | 43 ->
            X (N N_simple_pattern)
        | 42 ->
            X (N N_simple_pattern_not_ident)
        | 41 ->
            X (N N_single_attr_id)
        | 40 ->
            X (N N_str_exception_declaration)
        | 39 ->
            X (N N_strict_binding)
        | 38 ->
            X (N N_strict_function_type)
        | 37 ->
            X (N N_structure)
        | 36 ->
            X (N N_structure_item)
        | 35 ->
            X (N N_subtractive)
        | 34 ->
            X (N N_tag_field)
        | 33 ->
            X (N N_toplevel_directive)
        | 32 ->
            X (N N_toplevel_phrase)
        | 31 ->
            X (N N_tuple_type)
        | 30 ->
            X (N N_type_constraint)
        | 29 ->
            X (N N_type_kind)
        | 28 ->
            X (N N_type_longident)
        | 27 ->
            X (N N_type_parameter)
        | 26 ->
            X (N N_type_parameters)
        | 25 ->
            X (N N_type_variable)
        | 24 ->
            X (N N_type_variance)
        | 23 ->
            X (N N_use_file)
        | 22 ->
            X (N N_val_extra_ident)
        | 21 ->
            X (N N_val_ident)
        | 20 ->
            X (N N_val_longident)
        | 19 ->
            X (N N_value)
        | 18 ->
            X (N N_value_description)
        | 17 ->
            X (N N_virtual_flag)
        | 16 ->
            X (N N_virtual_with_mutable_flag)
        | 15 ->
            X (N N_virtual_with_private_flag)
        | 14 ->
            X (N N_with_constraint)
        | 13 ->
            X (N N_with_type_binder)
        | _ ->
            assert false
    
    and lr0_incoming =
      (16, "\000\000\000\006\000J\000\004\000\b\000\n\000\012\000\014\000\018\000\020\000\024\000\026\000\028\000 \000\"\000(\0000\000@\000L\000P\000R\000T\000V\000X\000Z\000\\\000^\000f\000j\000n\000p\000v\000\146\000\152\000\154\000\166\000\168\000\170\000\186\000\188\000\190\000\194\000\200\000\202\000\204\000\212\000\214\000\216\000\228\000\232\000\234\000\248\000\252\001\b\001\n\001\014\000S\000\226\001\191\001\191\001\135\000\138\001\191\000\b\001\135\0017\000\016\000\018\000\022\001\135\0017\000\024\001\135\0017\000\026\000$\0008\000B\000Z\001\135\0017\000p\001\003\000\226\000\018\000p\001\t\001\011\001\179\001\189\0017\000l\000&\000.\000B\000p\000~\001\191\000\014\001\135\0017\000l\000B\000D\000F\000H\000J\000L\000b\000d\000t\000z\000\156\000\158\000\160\000\162\000\164\000\172\000\182\000\206\000\220\000l\000,\000\224\001a\000.\000x\000\140\001a\0002\000x\000\144\001a\0004\000x\000\242\001\000\001\004\001\012\001\016\001\018\000\223\000.\000+\000\246\000\016\000\018\000:\000\018\000p\001g\000>\000p\000\246\000N\000l\000^\001\135\0017\000\018\000(\0017\000\020\001\135\0017\000B\000H\001\004\000V\000d\001\004\000l\000\160\001\004\000H\000d\0001\000\016\000:\001g\0003\0007\000y\000.\000\238\0007\0005\000p\000\206\000\018\000@\000l\000n\000p\000z\000p\000\246\000:\001g\000p\000\246\000n\000\128\001\002\000\219\000\130\0002\000\219\000\140\000\174\001\005\000l\001\005\000.\000\226\000\018\001\017\000\226\000p\001\019\001\163\001\002\001\006\001g\0009\000?\000`\000n\000?\000`\000n\000?\000q\000&\001\019\001\133\001\193\000\174\001\163\0009\001\193\000&\001\193\000?\000M\000\201\000n\000?\000`\000n\000?\000?\000M\000?\000`\000n\000?\000?\000M\000?\000M\000E\000M\000o\000}\0002\001\002\000o\000\235\000R\001\016\000\221\000\131\001\016\001w\001\199\001\n\000:\001g\0017\001\199\0017\001\141\001\189\001\199\000E\0002\000o\001\002\000}\0002\000}\0002\000}\0002\000\182\000\137\0002\000\235\000\235\000?\000`\000n\000?\000?\000M\000?\000`\000n\000?\000?\000M\000\135\000:\001g\000\226\001\199\000\163\0017\000,\0017\000\224\001\023\001\193\000,\001\023\001\199\000\182\001\023\000\182\000?\000\244\000.\000u\000.\000\174\001\163\0009\000\238\001\141\001\141\000.\000\238\001\141\000\140\0002\000\144\000X\000\\\000\184\000\239\000p\000\246\000\163\0017\000,\0017\001W\0004\001Y\001W\001[\000\200\000\224\001\002\000\018\000l\000\140\001\151\000R\000\144\001W\0004\000w\000&\001\193\001\145\001\193\000\246\001\145\000`\001\193\001\193\001q\0017\001\153\000\149\001\002\001o\001m\001o\001\141\001\143\001\151\001q\0017\000\144\001W\0004\000\224\000\229\001\141\000\206\000@\000\144\001W\0004\000\224\001\143\000\144\001W\0004\000\224\001\143\001\143\000\242\000\229\000\143\000\136\001\191\000\020\001\135\0017\000V\0005\000p\000;\000\143\000\234\001\141\000\206\001\141\000\161\0011\0011\0009\000D\000@\000\157\001\002\001\151\000\206\000l\000\244\000.\001\003\000\226\000l\000\244\000.\001\149\0017\001\153\000\147\0011\001o\001\131\001m\001o\001\129\001\131\001\151\000\206\001\149\0017\0007\0005\000p\000;\000\143\0011\0009\000D\000\157\000\147\0011\000*\0006\000F\000H\000P\001\004\001\135\0017\000\016\000\"\0017\000T\001\135\0017\000l\000\016\000H\000\150\000\196\000d\000\150\000\196\000l\000H\000^\001\135\0017\000\016\000\018\000\251\000.\000\246\000^\000\020\000R\0017\000l\000\014\0017\000b\000d\000h\001\135\0017\000j\001\135\0017\000n\000p\000x\000r\001\135\0017\0000\000\153\000n\000+\000\030\000l\000n\000p\000\246\001\141\001U\000.\001U\000.\000p\000>\000l\000n\001U\000\206\000t\000\132\000\140\000\144\001\011\001#\0004\001S\000\246\001\141\000\213\000\206\000\146\001\135\0017\000\150\000\174\0009\000\196\000\250\000+\000-\000U\000W\000[\000]\000\224\000]\001\155\000\235\001\003\000\226\000l\000.\000\204\001\135\0017\000W\000\173\000\177\000\238\000\179\000\238\000\179\000\244\000\179\001\002\000\179\001\n\000+\001\189\000\235\000\179\001\133\001\149\000\179\000\179\000\179\000.\000\140\0002\000i\0002\000\179\000,\000i\000[\001\149\000\179\000\207\000,\000\016\000,\000\217\001#\000\254\000i\000\254\000+\000N\000\016\000l\000n\000\179\000\246\001\141\001G\000\205\000.\001G\000\205\000.\000p\000\169\000l\000\020\000p\000\233\000\233\000.\000\148\000l\000d\000n\000\179\000.\000\179\000.\000\246\001\141\000.\000W\000\206\000v\000P\001\004\001\135\0017\000\186\0017\000l\000.\000\251\000\246\000l\000\186\0017\000\141\001u\001s\000`\000\243\000\247\000\004\000\020\0005\001S\000\206\000@\000\242\001\199\000\027\001\199\000\143\000^\001\003\000\206\001\005\000\226\000\242\001\005\000\029\000\127\001\014\000\029\000`\000\247\001\189\001\005\000\226\000\018\001g\001\r\001g\001\133\001u\000\247\000.\000\247\000.\001s\000`\000\199\000\253\000l\000.\000\253\000.\000\246\000\247\000.\000\199\001\189\001\003\001\133\000\253\000\168\000\132\000\140\000\142\000p\000\206\000\144\000p\000\218\000\222\000\146\001\135\0017\000\252\001\135\0017\000\170\001\135\0017\000\188\001\135\0017\001\002\000\179\000\n\000\190\001\135\0017\000l\000\020\000\233\000.\000`\000\192\001\135\0017\000\179\000\168\000\194\001\135\0017\000\179\000\206\001\004\000)\000+\000Y\000\172\000Y\000\174\000p\000\220\000l\001\b\001\135\0017\000Y\000\226\000l\000G\000Y\000\030\000l\000p\000\240\001\141\000\246\001\141\000\240\001\141\000=\000.\000p\000>\000p\000N\000Y\000\235\001\003\000\226\000l\000.\000F\000H\000^\001\135\0017\000\253\000\246\000\247\000.\000b\000d\000t\000W\000\246\001\141\000\206\000e\000s\000\238\000\235\000Y\001\007\001\133\001\149\001\155\001\027\000\168\000e\001\029\001K\000\168\000e\001\137\000&\001\137\000D\001\137\000F\001\137\000H\001\137\000J\001\137\000L\001\137\000b\001\137\000d\001\137\000z\001\137\000\156\001\137\000\158\001\137\000\160\001\137\000\162\001\137\000\164\001\137\000\182\001\137\000\206\001\137\000\238\001\137\000\242\001\137\000\244\001\137\001\000\001\137\001\016\001\137\001\018\001\137\001\189\001\149\000Y\001\201\001\137\000,\000J\001\191\000e\000e\001\014\0017\000+\000\246\000\020\000\233\000\226\001\141\000\206\000e\000\135\000\226\001\141\000\206\000e\000=\000\206\000e\000O\000W\001O\000=\000\206\000e\000O\001{\000U\000\246\001\141\000\206\000e\000\171\000\206\000e\000\238\000\179\000\244\000\179\001\002\000\179\001\n\000+\001\189\000\173\000\175\000\238\000\179\001M\0011\001\197\001\197\001\137\000\171\000\206\000e\001C\000\168\000e\001\012\001M\001E\001\004\000e\000.\000\132\000\254\000m\000\254\001\137\000,\000m\001\137\000\194\000\129\000\n\001\137\000\254\001\159\000\254\001\014\001\135\0017\000\179\000\168\001\137\000\206\001\137\000\028\000\216\001\139\001\137\001\161\001\159\001\161\001\159\000\140\0002\000m\0002\001\137\000\194\000\129\000\n\001\137\0002\001\157\0002\001\157\001\157\000\142\000k\000\178\000\144\000Y\000\004\000g\001S\000=\000\203\000\211\000,\000g\000g\000\151\0004\001\003\000\226\000p\000+\000\148\000Y\000\220\000l\000m\000.\000x\001\137\000\140\000m\0002\000x\001\137\000\144\000m\0004\000x\001\137\000\226\000l\000e\000.\000x\001\137\000\140\000e\0002\000x\001\137\000\144\001\137\0004\000x\001\137\001\003\000\220\000l\000m\000.\000x\001\137\000\140\000m\0002\000x\001\137\000\144\000m\0004\000x\001\137\001S\000x\001\137\000Y\000\139\001Q\001Q\001\137\000e\000.\000\140\000e\0002\000\144\001\137\0004\001\003\000\220\000l\000m\000.\000\140\000m\0002\000\144\000m\0004\001S\000m\000.\000\140\000m\0002\000\144\000m\0004\000e\001\139\000e\000\232\000e\000\228\000e\000\232\000e\000\228\000\206\000e\001\139\000e\000\232\000e\000\228\000e\000l\000\020\000\233\000.\000\246\001\193\000`\000e\001O\001y\001y\000n\001G\000.\001y\001O\001y\000e\000`\000e\000`\000\226\000e\001\025\000\133\001\002\001\025\001\025\000e\000 \001\137\000\214\001\137\000\212\000e\000\212\000Y\001\137\000\180\000Y\000\151\0004\001\137\000\211\000,\000k\000\178\000k\000\178\000m\0002\001\137\001\157\000\254\000m\000\254\001\137\001\159\000e\001\135\0017\000\253\000\168\000e\000^\001\135\0017\000\251\000\206\000\253\000\246\000\247\000\206\000\253\001\001\000\168\000e\001u\001\001\000\204\001\135\0017\001\151\001q\0017\000\168\000e\001\135\0017\000\153\001M\0011\000e\001{\000O\000e\000\205\000.\001U\000\205\000.\000p\000l\000\020\000\233\000.\000\206\000e\000=\000\206\000e\001\031\001!\001O\001!\000\246\000\135\000\226\001\141\000\206\000e\000=\000\206\000e\001\031\001M\0011\001\137\000e\000e\000\004\000\133\000e\000\004\000\133\001\137\000.\000\240\000\247\000.\000\246\000\247\000.\000\240\000\247\000.\000\253\000\247\000.\000\179\000.\000\246\001\141\000.\001\177\000\014\001\004\0017\000\\\000\241\000p\000\206\000e\000=\000\206\000e\000'\0011\0017\000\012\000\\\000\\\000\012\000!\000p\000\246\001\141\000\241\000p\000\206\000e\000=\000\206\000e\000f\001\004\0017\000\157\000p\000\246\000\020\000\233\000\226\001\141\000\206\000e\000\135\000\226\001\141\000\165\000\206\000e\001\141\000O\001\021\0011\0017\000\012\000@\000@\000\012\000\031\000p\000\246\000\165\000\157\000p\000\246\000\020\000\233\000\226\001\141\000\206\000e\000\165\000\206\000e\000O\000|\001\191\000>\000\179\000\n\000e\000^\000\020\001\135\0017\001g\000\206\000\247\000\209\0011\001\135\0017\0000\000\251\001\001\0011\001\014\0017\000\251\001\001\0011\001;\001;\000\251\001\001\0011\000\134\001\191\000\166\000\186\000\202\001\135\0017\000+\000\246\001\141\000\206\000$\000\231\000\231\0011\000\204\001\135\0017\001\151\000\206\001\149\0017\0011\001q\0017\0011\000\246\000*\000P\001\004\001\135\0017\001\005\0011\001\135\0017\001\005\0011\000^\001\135\0017\000\018\000\242\001\005\0011\0000\000\251\000\246\000\247\0011\001\014\0017\000\251\000\246\000\247\0011\0019\0019\000\251\000\206\001\003\0011\000\246\000\247\000\255\0011\001u\000\255\000\204\001\135\0017\001\151\000\248\000\020\001\135\0017\000\012\000#\000\140\000y\0002\001}\000p\000\206\000T\0017\000l\001\141\000.\001\175\000\014\0017\000\012\000\\\000\\\000\012\000\237\000p\000\246\001\141\0011\000f\0017\000\012\000@\000@\000\012\000\155\000p\000\246\000\165\0011\000\154\0017\000v\000P\001\004\0017\001\003\000\168\000\140\000{\0002\001\163\000\238\001\141\001\141\001\133\001\163\001\171\001\189\0017\001\003\000\168\001\171\001\171\0011\000\234\0017\001\141\000\206\001\141\001\147\0011\001+\000\212\001]\0011\001\127\001\173\001+\001\171\0011\001\014\0017\000#\001}\000p\000\206\001\171\0011\001=\001=\001\135\0017\000#\001}\000p\000\246\000p\000\246\000?\000`\000\140\001\141\000?\000`\000\201\000?\000`\001\019\001\133\001\167\001\171\001\167\001\167\001\167\0011\001\014\0017\000#\001}\000p\000\246\001\167\0011\001?\001?\000%\000_\000c\000\159\000\225\000\245\000\249\001/\001]\0011\001c\001\135\0017\000\247\0011\001i\001\014\0017\0005\000p\000;\000\143\0011\0015\0015\001k\001\014\0017\0005\000p\000\242\000\229\000\143\0011\0013\0013\001\127\001\165\001/\000a\001/\001\141\000\248\001\135\0017\000#\001}\000p\000l\000\206\000T\0017\001\177\000\152\0017\000e\0011\000\154\001\004\0017\000l\000v\000J\001\191\0017\000\153\001M\0011\000P\001\004\0017\001\003\000\168\000\140\000{\0002\001\179\000\190\0017\001O\000`\001I\000\168\001\133\001\169\000\139\001\179\001\187\001\189\001\197\001\187\001\181\001\181\001\187\0017\001\003\000\168\001\187\0017\000\153\001M\0011\001\187\000.\000\246\001\167\000.\001\187\001\n\000p\000\215\0011\0017\001\187\000\215\0011\000\234\0017\001\147\0011\001)\000\212\001]\0011\001\127\001\185\001)\001\187\000\246\001\167\000\206\001\187\001O\001\183\001\183\0011\001\014\0017\000#\001}\000p\001\183\0011\001A\001A\000%\000I\000v\000Q\000c\000\159\000\227\000\245\001\027\001-\001K\001]\0011\001c\001\135\0017\000\253\0011\001i\0015\001\127\001\165\000K\000e\0011\001-\000\167\0002\001\027\001-\001K\000\167\0002\001)\000\212\000K\000\212\000\253\0011\001\135\0017\000\253\0011\000e\0011\001-\001-\000\167\0002\0011\0009\000D\000\157\000\145\0011\001o\001m\001o\0005\000p\000\242\000\229\000\143\0011\0009\000D\000\157\000\145\0011\000a\000\212\000\247\000.\001\141\0011\000\167\0002\000Y\000^\001\135\0017\000\253\000.\000\246\000\247\000.\000e\000.\000=\000.\000e\000\004\000\133\000e\000\004\000\133\000\198\000e\000\198\000e\000e\000\232\000e\000\228\000\167\0002\0017\000e\000\232\000e\000\228\000K\000\210\001e\000\000\000a\000\210\001_\000\000\000l\000\244\000.\000-\000\197\001\005\000\226\000l\000\244\000.\000-\001g\001\015\001g\001\153\001\195\000\210\000\000\000\195\001\149\000\210\000\000\000\193\001\141\000\210\000\000\000e\000\210\000\191\000\000\000\189\001\005\000\210\000\000\000\187\001\003\000\210\000\000\000\185\000\243\000\210\000\000\000\179\000\210\000\183\000\000\000)\000\210\000\181\001\003\000\226\000\000\000\174\001g\000\026\000$\000\150\000\200\000)\001\003\000\210\000A\000C\000*\000I\001'\000e\0011\000*\001'\000*\000\000\000*\000C\000I\001%\001%\000e\0011\001%\001%\000/\000e\0011\001%\000\210\001%\000\210")
    
    and rhs =
      ((16, "\001e\001_\000\197\000\195\000\193\000\191\000\189\000\187\000\185\000\183\000\181\000A\000/\000H\000F\001w\001\199\001\n\000:\001g\001\014\0017\001M\0011\001\015\001\153\000l\001\141\000.\000l\000^\001\135\0017\000\247\000.\000:\001g\000\016\0009\001\193\0009\000l\000u\000.\0009\000z\001\023\000\182\000z\000\182\000\174\001\163\001\193\000\174\001\163\000l\000u\000.\000\174\001\163\000\140\000E\0002\000\140\001\002\000}\0002\000\140\000o\001\002\000}\0002\000\130\000\219\000}\0002\000\130\0002\000\128\000\219\000}\0002\000\128\000\219\000}\000\182\000\137\0002\001\133\000S\000S\000\226\001\191\000\138\001\191\000\167\0002\001\169\000\190\0017\001\181\001I\000\168\001\187\000v\000P\0017\001\003\000\168\001\187\000v\000P\001\004\0017\001\003\000\168\001\187\001\187\001\189\001\169\000\139\001\133\000\154\0017\001\187\000\215\0011\000\154\001\004\0017\001\187\000\215\0011\000\014\000'\0011\000f\001\021\0011\000\234\0017\001\147\0011\000\152\0017\000e\0011\001]\0011\001\127\000\206\001\187\000\246\001\167\000\206\001\187\001O\001\183\001O\000`\001\187\001O\001\181\001\011\000l\000\179\000.\000l\000\179\000\246\001\141\000.\000l\001\141\000.\000\154\0017\001\171\0011\000\014\0017\000\237\000p\000\246\001\141\0011\000f\0017\000\155\000p\000\246\000\165\0011\000\234\0017\001\147\0011\001]\0011\001\127\001\163\000\140\000{\0002\001\163\001\133\000T\0017\001\175\001+\000\212\001\171\001\189\000v\000P\0017\001\003\000\168\001\171\000v\000P\001\004\0017\001\003\000\168\001\171\000l\001\187\000.\001\179\000\140\000{\0002\001\179\000l\001\187\000\246\001\167\000.\000T\0017\001\177\001)\000\212\001\171\000\201\000?\000`\001\167\000p\000\246\000?\000`\001\167\000?\000`\001\167\000\248\000\020\001\135\0017\000#\001}\000p\000\206\001\171\0011\001=\001\019\001\135\0017\000\179\000\206\001\137\001\139\001\137\001\135\0017\000\179\000\168\001\137\000\194\000\129\000\254\000\194\000\129\000\n\001\137\000\254\000\194\000\129\001\159\000\194\000\129\000\n\001\137\001\159\000\194\000\129\0002\000\194\000\129\000\n\001\137\0002\000\194\000\129\001\157\000\194\000\129\000\n\001\137\001\157\000\150\000\250\000$\000\196\000\140\0002\000l\000.\000\200\000\026\000\018\000l\000\244\000.\001\153\001\003\001\003\000\226\000l\000\244\000.\000l\000\244\000.\001\153\001\141\000\206\001\141\001\193\000w\000&\001\193\000\144\001W\0004\001\002\000\149\001\199\001\141\001\189\000\028\000\216\001\027\000\168\000e\000h\001\135\0017\000e\000\004\000\133\000\022\001\135\0017\000e\000\022\001\135\0017\000e\000\004\000\133\000\022\001\135\0017\000e\000\198\000e\000\022\001\135\0017\000e\000\004\000\133\000\198\000e\000\006\001\135\0017\000e\000\232\000e\000\228\000\192\001\135\0017\000\179\000\206\000e\001\139\000e\000\232\000e\000\228\000\192\001\135\0017\000\179\000\168\000e\000\232\000e\000\228\000Y\000v\000^\001\135\0017\000\251\001\001\000\168\000e\000v\000\204\001\135\0017\001\151\001q\0017\000\168\000e\000v\000P\001\135\0017\000\253\000\168\000e\000v\000P\001\004\001\135\0017\000\253\000\168\000e\000\188\001\135\0017\000\133\000\190\001\135\0017\001O\001y\000\190\001\135\0017\000l\000\020\000\233\000.\001y\000j\001\135\0017\000e\000\004\000\133\000\024\001\135\0017\000e\000\004\000\133\000\170\001\135\0017\000e\000 \001\137\000\214\001\137\000\170\001\135\0017\000e\000 \001\137\000\b\001\135\0017\000e\000\232\000e\000\228\000\194\001\135\0017\000\179\000\206\000e\001\139\000e\000\232\000e\000\228\001\b\001\135\0017\000Y\000\146\001\135\0017\000Y\000T\001\135\0017\001\177\001)\000\212\000Y\000\139\000s\001\149\000Y\000\235\000Y\001\137\000\164\001\137\001\137\000\162\001\137\001\137\000\160\001\137\001\137\000\158\001\137\001\137\000\156\001\137\001\137\000H\001\137\001\137\000F\001\137\001\137\000D\001\137\001\137\000d\001\137\001\137\000b\001\137\001\137\000&\001\137\001\137\000J\001\137\001\137\000\206\001\137\001\137\000z\001\137\001\137\000\182\001\137\001\137\000L\001\137\001\137\001\000\001\137\001\137\001\016\001\137\001\137\001\018\001\137\001\137\000\242\001\137\000G\001\137\001\201\001\137\001K\000\168\000e\000t\001C\000\168\000e\001\137\000\244\001\137\000p\000x\001\137\000Y\000\226\001S\000x\001\137\000Y\000\226\000l\000e\000.\000x\001\137\000Y\000\226\000\140\000e\0002\000x\001\137\000Y\000\226\000\144\001\137\0004\000x\001\137\000Y\000\220\000\140\000m\0002\000x\001\137\000Y\000\220\000l\000m\000.\000x\001\137\000Y\000\220\000\144\000m\0004\000x\001\137\000Y\000\226\001\003\000\220\000\140\000m\0002\000x\001\137\000Y\000\226\001\003\000\220\000l\000m\000.\000x\001\137\000Y\000\226\001\003\000\220\000\144\000m\0004\000x\001\137\001\137\001\189\000n\000e\000J\001\191\000~\001\191\000\167\0002\0008\001\002\001\151\000\206\001\149\0017\001\151\000\206\001\149\0017\000\134\001\191\000\167\0002\000\140\000y\0002\000O\000=\000\206\000e\000`\000e\000\246\001\193\000`\000e\001O\001y\000l\000\020\000\233\000.\001y\000?\000M\000l\000.\000l\000\251\000\246\000\247\000.\000\141\000R\001\145\000\246\001\145\000`\001\193\000\246\001\193\001\002\001\151\001q\0017\001\151\001q\0017\000\020\001\135\0017\0005\000p\000\242\000\229\000\143\0011\000\020\001\135\0017\000V\0005\000p\000\242\000\229\000\143\0011\000\020\001\135\0017\0005\000p\000;\000\143\0011\000\020\001\135\0017\000V\0005\000p\000;\000\143\0011\000\018\000p\000K\000\210\000\166\000\166\000\186\000,\000\224\000a\000\210\000|\001\191\000\167\0002\0006\000\239\000p\000\246\000\163\0017\000\239\000p\000\246\000\163\0017\000,\0017\001[\001Y\001Y\001W\000p\000p\000\246\001\141\001\011\000Y\000\148\000Y\000\030\000p\000\030\000l\000p\000=\000.\000>\000p\000N\000Y\000>\000l\001U\000\205\000.\000>\000l\000n\001U\000\205\000.\000>\000p\000N\000l\001G\000\205\000.\000N\000l\000n\001G\000\205\000.\000N\000\169\000\030\000l\001U\000.\000\030\000l\000n\001U\000.\000\030\000p\000\148\000W\000\148\000l\000n\000\179\000.\000W\000l\000n\001G\000.\000+\000O\000+\000=\000\206\000e\000n\000+\000=\000\206\000e\000+\000\246\000\135\000\226\001\141\000\206\000e\000n\000+\000\246\000\135\000\226\001\141\000\206\000e\000+\000\246\000\020\000\233\000\226\001\141\000\206\000e\000\171\000\206\000e\000U\000\246\001\141\000\206\000e\000n\000+\001\031\000v\001\135\0017\000\153\001M\0011\001K\001\197\000v\0017\000\153\001M\0011\000v\000J\001\191\0017\000\153\001M\0011\001I\001\197\000\179\000\179\000\246\001\141\000+\000O\000W\000\246\001\141\000\206\000e\000\171\000\206\000e\001E\001C\001\012\001M\001\014\0017\000#\001}\000p\001\183\0011\001A\001\014\0017\000#\001}\000p\000\246\001\167\0011\001?\001\014\0017\000#\001}\000p\000\206\001\171\0011\001=\001\014\0017\000\251\001\001\0011\001;\001\014\0017\000\251\000\246\000\247\0011\0019\001\189\0017\001\014\0017\0005\000p\000;\000\143\0011\0015\001\014\0017\0005\000p\000\242\000\229\000\143\0011\0013\000\161\0011\000*\001/\000_\001/\000*\001-\000*\000e\0011\001-\000I\001-\001\173\001+\001\185\001)\000I\001'\000*\001%\000*\000e\0011\001%\000I\001%\000C\001%\001S\000\213\000\207\001S\000\213\000\207\000,\001S\000\213\000\207\000,\000\016\000\217\001S\000\213\000\207\000,\001#\001\031\000=\000\206\000e\000\206\000e\001O\001!\000l\000\020\000\233\000.\001!\000r\001\135\0017\000\153\001M\0011\001\029\001\027\001\197\000\179\000`\000e\000\179\000\n\000e\000`\000e\000\179\000`\000\226\000p\000\246\000\163\0017\000,\0017\001\023\001\193\000,\001\023\000p\000\246\000\163\0017\000,\0017\001\193\000,\000p\000\246\000\163\0017\001\193\000\224\0017\000\031\000p\000\246\000\165\0017\000\157\000p\000O\001\004\0017\000\157\000p\000O\0017\000\157\000p\000\246\000\165\000\206\000e\001\004\0017\000\157\000p\000\246\000\165\000\206\000e\0017\000\157\000p\000\246\000\020\000\233\000\226\001\141\000\206\000e\001\004\0017\000\157\000p\000\246\000\020\000\233\000\226\001\141\000\206\000e\000p\001\005\000\226\000p\000\018\001\005\000\226\000\018\001g\000l\000\244\000.\000-\001\005\000\226\001g\001\005\000\226\000l\000\244\000.\001\005\000\226\000-\001g\001\005\000\226\001g\000p\001\003\000\226\000p\000\018\001\003\000\226\000\018\000+\001\003\000\226\000+\001\017\001\005\000l\001\005\000.\001\t\000\206\000\253\000\246\000\247\000\206\000\253\001u\001\001\000\246\000\247\001u\000\255\000\"\0017\000K\000\212\000\186\0017\001s\000`\000\253\000\199\000\253\001\189\001\003\000\253\000\199\000\253\000l\000.\001\133\000\016\000\018\000\016\000^\001\135\0017\000\018\000\242\001\005\0011\000(\0017\000a\000\212\000\186\0017\001s\000`\000\247\000^\000\020\000R\0017\000\253\000l\000\247\000.\000\247\001\189\000\243\000\247\000`\000\247\000\247\000\004\000\127\001\133\000^\000\020\001\135\0017\001g\000\209\0011\001\r\000\\\000\\\000\184\000X\000\\\000\012\000\\\000\012\000\012\000\\\001\006\001g\000p\000p\000\233\000$\000$\000\231\001\141\000@\001\141\001\143\000@\001\143\001\141\000\206\001\143\001\141\000\206\000@\001\143\000\224\000@\000\224\001\141\000\206\000\224\001\141\000\206\000@\000\224\000\144\001W\0004\000@\000\144\001W\0004\001\141\000\206\000\144\001W\0004\001\141\000\206\000@\000\144\001W\0004\000P\001\135\0017\000\253\0011\000P\001\004\001\135\0017\000\253\0011\000P\001\135\0017\001\005\0011\000P\001\004\001\135\0017\001\005\0011\000B\000t\001\012\000\220\000l\001a\000.\000\220\000l\001a\000.\000x\000\220\000\140\001a\0002\000\220\000\140\001a\0002\000x\000\220\000\144\001a\0004\000\220\000\144\001a\0004\000x\000\172\001\004\000\164\000\162\000\160\000\158\000\156\000H\000F\000D\000d\000b\000&\000J\000\206\000z\000\182\000L\001\000\001\016\001\018\000\242\001\016\001\002\000,\001\n\000p\000\246\001\141\000\206\001\137\000\206\000\247\000\206\000\179\000\206\000e\000=\000N\000>\000p\000\246\000l\000\253\000\246\000\247\000.\000l\000\253\000.\000l\000\014\0017\001\137\000.\000l\000\014\0017\001\137\000\246\000\247\000.\000l\000\014\0017\001\137\000\246\000\247\000\240\000\247\000.\000l\000\014\0017\001\137\000\240\000\247\000.\001\195\000\210\001\149\000\210\001\141\000\210\000e\000\210\001\005\000\210\001\003\000\210\000\243\000\210\000\179\000\210\000)\000\210\000\179\000\244\000\179\000\179\001\189\000\173\000\179\001\n\000+\000\177\000\179\001\002\000\179\000\204\001\135\0017\000\179\000\177\000\238\000\179\000\179\000\238\000\179\000\175\000\238\000\179\000\171\000\238\000\179\000W\001\149\000\179\000\235\000\179\000\146\001\135\0017\000W\000\171\000\244\000\179\000\171\001\189\000\173\000\171\001\n\000+\000\175\000\171\001\002\000\179\000p\000\016\000K\000\246\000a\000\246\001\141\000>\000\179\000>\000\179\000\n\000e\001\141\000\135\000\226\001\141\001\199\000\135\000\226\001\199\000\136\001\191\000\167\0002\000\202\001\135\0017\000+\000\246\001\141\000\206\000\231\0011\000@\000@\000\012\000@\000\012\000\012\000@\0000\000g\000Y\000\004\000g\001m\001o\000\149\001o\001m\001\129\001o\001\131\000\147\001o\000\147\001\131\001m\001o\000\145\001o\000\143\000\234\001\141\000\206\001\141\001u\000\141\001u\001Q\000\139\001Q\000\235\000\137\000\235\000:\001g\000\135\000:\001g\001\025\001\002\001\025\000\133\001\002\001\025\001\199\000\131\001\016\001\199\001\161\000\129\001\014\001\161\000\029\000\127\001\014\000\029\000o\000}\001\002\000o\001\141\000{\000\238\001\141\0007\000y\000\238\0007\001\193\000w\000&\001\193\000u\000\238\001\141\001\141\000\238\001\141\000s\000\238\001\137\001\137\000\238\001\137\000q\000&\001\193\001\193\000&\001\193\000E\001\141\001\137\001\137\000,\001\137\000,\000m\000p\000\211\000p\000\211\000,\000p\000\211\000,\000k\000\179\000\179\000,\000\179\000,\000i\001S\000\203\000\211\001S\000\203\000\211\000,\001S\000\203\000\211\000,\000g\001\137\001\137\000,\001\137\000,\000e\001\137\000,\000J\001\191\000e\000\204\001\135\0017\001\151\001q\0017\0011\001/\001]\0011\001\127\000%\000\159\001i\0015\001k\0013\000\020\001\135\0017\0005\0009\000D\000\157\000\145\0011\000\020\001\135\0017\000V\0005\0009\000D\000\157\000\145\0011\000c\000^\001\135\0017\000\251\000\255\0011\000^\001\135\0017\000\251\000\206\001\003\0011\000\249\000^\001\135\0017\0000\000\251\000\246\000\247\0011\0019\000\245\000\225\001c\001\135\0017\000\247\0011\000\248\001\135\0017\000#\001}\000p\000\246\001\167\0011\001?\001\165\001\155\000d\000\150\000d\000\196\000H\000\150\000H\000\196\000\144\001#\0004\000\140\000i\0002\000\132\000i\000\254\000\132\000\254\000\222\001\137\000\180\000\218\000Y\000l\000e\000.\000l\000e\000=\000.\000Y\000\226\000l\000e\000.\000Y\000\226\000\140\000e\0002\000Y\000\220\000\140\000m\0002\000Y\000\220\000l\000m\000.\000Y\000\220\000\144\000m\0004\000Y\000\226\001\003\000\220\000\140\000m\0002\000Y\000\226\001\003\000\220\000l\000m\000.\000Y\000\226\001\003\000\220\000\144\000m\0004\000Y\000\226\000\144\001\137\0004\000\252\001\135\0017\000e\000\212\000\252\001\135\0017\000\212\000Z\001\135\0017\001\179\000l\000^\001\135\0017\000\253\000.\000l\000^\001\135\0017\000\253\000\246\000\247\000.\000)\001\155\001\149\000\235\000B\000Y\001\004\000Y\000\142\000k\000\178\000\142\000\178\000Y\000\226\001S\001\003\000\226\000l\000e\000.\001\003\000\226\000\142\000k\000\178\000Y\000\174\000p\000Y\000\172\000Y\001\133\000\016\001\003\000\226\000l\000.\000\144\000\151\0004\001\003\000\226\000\144\000\151\0004\000\132\000m\000\254\000\132\000\254\001\003\000\226\000\132\000m\000\254\001\003\000\226\000\132\000\254\000\140\000m\0002\000\140\001\137\001\157\000\132\001\137\001\159\001\003\000\226\000\140\001\137\001\157\001\003\000\226\000\132\001\137\001\159\001\003\000\226\000\140\000m\0002\001\003\000\226\000\140\0002\001\003\000\226\000l\000^\001\135\0017\000\253\000\246\000\247\000.\000+\000U\000l\000\179\000.\000[\000l\000^\001\135\0017\000\251\000.\000l\000^\001\135\0017\000\251\000\246\000\247\000.\000\016\000]\000]\000\224\000]\001\149\000\235\000\174\0009\001\003\000\226\000[\001\003\000\226\000\140\0002\001\003\000\226\000l\000.\001\003\000\226\000l\000\179\000.\000l\000\179\000\246\001\141\000.\001\133\000p\000\018\001\014\001\n\001\b\000\252\000\248\000\234\000\232\000\228\000\216\000\214\000\212\000\204\000\202\000\200\000\194\000\190\000\188\000\186\000X\000\170\000\168\000\166\000\154\000\152\000\146\000v\000n\000j\000f\000^\000\\\000Z\000V\000T\000R\000P\000L\000@\0000\000(\000\"\000 \000\028\000\026\000\024\000\020\000\014\000\012\000\n\000\b\000\004\000c\000\204\001\135\0017\001\151\000\206\001\149\0017\0011\000\206\000e\001O\001{\000l\000\020\000\233\000.\001{\000\201\000?\000`\000M\000\201\000n\000?\000`\000M\000p\000\246\000?\000`\000M\000p\000\246\000n\000?\000`\000M\000?\000`\000M\000n\000?\000`\000M\000\201\000?\000`\000?\000\201\000?\000`\000n\000?\000\201\000n\000?\000`\000?\000\201\000n\000?\000`\000n\000?\000p\000\246\000?\000`\000?\000p\000\246\000?\000`\000n\000?\000p\000\246\000n\000?\000`\000?\000p\000\246\000n\000?\000`\000n\000?\000?\000`\000?\000?\000`\000n\000?\000n\000?\000`\000?\000n\000?\000`\000n\000?\001-\000e\0011\001-\001\027\001K\001]\0011\001\127\000\159\000%\001i\0015\000\020\001\135\0017\0005\0009\000D\000\157\000\147\0011\000\020\001\135\0017\000V\0005\0009\000D\000\157\000\147\0011\000Q\000^\001\135\0017\000\251\001\001\0011\000^\001\135\0017\0000\000\251\001\001\0011\001;\000\245\000\227\000\248\001\135\0017\000#\001}\000p\001\183\0011\001A\001\165\001c\001\135\0017\000\253\0011\000d\000b\000\235\000R\000\221\000\131\0017\000\235\0017\000\174\001g\000\174\001g\000$\000\174\001g\000\150\000\174\001g\000)\000\174\001g\001\003\000\174\001g\000\200\000\174\001g\000\026\000e\0011\000*\001'\000*\000C\000*\000\210\001\193\000q\000\246\001\141\000\246\001\141\000\240\001\141\000\240\001\141\000\206\000\229\001\019\0001\0003\0007\000l\000y\000.\000:\001g\000\016\000H\000d\001\004\000H\001\004\001\004\000H\000d\001\004\001\004\000d\000\160\000B\001%\000\210\000e\0011\001%\000\210\000l\000\223\000.\000p\000-\001\007\0017\000!\000p\000\246\001\141\0017\000\241\000p\000\206\000e\001\004\0017\000\241\000p\000\206\000e\0017\000\241\000p\000=\000\206\000e\001\004\0017\000\241\000p\000=\000\206\000e\000\014\001\135\0017\000+\000\246\001\141\0011\000\012\000\012\000\\\000\012\000\012\000\\\000\012\000@\000\012\000\012\000@\000\020\0005\001S\000\027\001\199\000\143\000\020\0005\001S\000\242\001\199\000^\001\003\000\206\001\005\000^\001\003\000\242\001\005\000\206\000\206\000@"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\020\000\024\000\025\000\026\000\029\000#\000%\000&\000'\000)\000-\0000\0002\0004\0007\000<\000?\000C\000H\000L\000N\000R\000X\000Y\000Z\000]\000a\000b\000e\000h\000n\000u\000w\000y\000z\000\127\000\133\000\136\000\139\000\143\000\147\000\149\000\150\000\152\000\156\000\158\000\161\000\163\000\164\000\167\000\172\000\172\000\175\000\175\000\179\000\186\000\193\000\197\000\199\000\200\000\201\000\205\000\206\000\211\000\213\000\219\000\226\000\229\000\230\000\234\000\239\000\244\000\245\000\249\000\254\001\001\001\012\001\r\001\020\001\025\001\028\001!\001$\001)\001,\0011\0014\0019\001:\001;\001<\001=\001?\001A\001B\001C\001D\001G\001H\001I\001N\001Q\001R\001U\001V\001Y\001\\\001]\001^\001_\001a\001b\001c\001f\001l\001p\001v\001|\001\132\001\139\001\150\001\159\001\160\001\168\001\177\001\184\001\192\001\196\001\201\001\209\001\215\001\221\001\229\001\235\001\242\001\253\002\001\002\005\002\011\002\r\002\014\002\016\002\018\002\021\002\024\002\027\002\030\002!\002$\002'\002*\002-\0020\0023\0026\0029\002<\002?\002B\002E\002H\002K\002N\002P\002R\002U\002Y\002\\\002_\002d\002k\002r\002y\002\128\002\135\002\142\002\151\002\160\002\169\002\171\002\173\002\173\002\175\002\179\002\180\002\185\002\189\002\193\002\193\002\196\002\197\002\200\002\202\002\206\002\208\002\213\002\214\002\215\002\217\002\222\002\223\002\223\002\225\002\229\002\231\002\235\002\238\002\247\003\001\003\t\003\018\003\019\003\020\003\022\003\023\003\025\003\025\003\027\003\029\003!\003\"\003'\003.\003/\0030\0032\0033\0036\0037\0038\003:\003<\003A\003C\003E\003J\003P\003R\003W\003]\003_\003c\003h\003j\003l\003q\003r\003v\003x\003|\003\129\003\136\003\144\003\152\003\155\003\160\003\163\003\169\003\171\003\176\003\183\003\185\003\186\003\189\003\191\003\196\003\199\003\200\003\203\003\203\003\211\003\211\003\220\003\220\003\229\003\229\003\235\003\235\003\242\003\242\003\244\003\244\003\252\003\252\004\005\004\005\004\007\004\007\004\t\004\011\004\011\004\r\004\017\004\019\004\019\004\021\004\021\004\023\004\023\004\025\004\025\004\027\004\031\004!\004#\004&\004*\0040\0045\0046\0049\004;\004=\004B\004H\004I\004K\004N\004S\004V\004]\004`\004f\004h\004l\004m\004n\004s\004w\004|\004\131\004\139\004\149\004\160\004\161\004\164\004\165\004\168\004\169\004\172\004\173\004\176\004\181\004\184\004\185\004\188\004\189\004\192\004\193\004\196\004\197\004\200\004\201\004\205\004\206\004\208\004\212\004\214\004\216\004\218\004\222\004\227\004\228\004\230\004\231\004\233\004\236\004\237\004\238\004\239\004\240\004\247\004\251\005\000\005\005\005\b\005\n\005\011\005\014\005\017\005\018\005\025\005\026\005\026\005\027\005\027\005\028\005\029\005\030\005\030\005\031\005 \005\"\005$\005&\005'\005)\005*\005,\005-\005/\0050\0052\0055\0059\005:\005<\005?\005C\005F\005J\005O\005U\005Z\005`\005e\005k\005l\005m\005n\005r\005w\005{t\006\011\006\015\006\018\006\020\006\021\006\024\006\025\006\028\006\029\006\030\006\031\006!\006#\006%\006)\006*\006-\006.\0061\0065\006>\006>\006?\006?\006@\006A\006C\006E\006E\006F\006G\006J\006K\006L\006N\006O\006P\006Q\006R\006T\006V\006W\006X\006Z\006Z\006_\006`\006b\006c\006e\006f\006h\006j\006m\006n\006p\006s\006t\006w\006x\006{\006|\006\127\006\128\006\131\006\132\006\135\006\136\006\139\006\140\006\143\006\146\006\149\006\152\006\155\006\158\006\161\006\162\006\163\006\164\006\166\006\169\006\171\006\174\006\178\006\179\006\181\006\184\006\187\006\191\006\196\006\197\006\199\006\202\006\207\006\214\006\215\006\217\006\218\006\219\006\220\006\222\006\224\006\233\006\243\006\244\006\250\007\001\007\002\007\011\007\012\007\r\007\018\007\028\007\029\007\030\007 \007\"\007$\007&\007)\007,\007/\0071\0074\0076\0079\007=\007B\007G\007L\007Q\007V\007]\007d\007k\007p\007u\007y\007}\007\131\007\139\007\140\007\141\007\142\007\143\007\145\007\147\007\150\007\152\007\155\007\160\007\165\007\168\007\171\007\172\007\173\007\177\007\180\007\185\007\188\007\190\007\195\007\199\007\202\007\205\007\208\007\213\007\218\007\223\007\227\007\237\007\238\007\239\007\242\007\243\007\249\b\001\b\002\b\003\b\006\b\007\b\b\b\n\b\r\b\017\b\021\b\026\b\031\b \b!\b\"\b#\b$\b%\b&\b'\b(\b)\b*\b+\b,\b-\b.\b/\b0\b1\b2\b3\b4\b5\b6\b7\b8\b9\b:\b;\b<\b=\b>\b?\b@\bA\bB\bC\bD\bE\bF\bG\bH\bI\bJ\bK\bL\bM\bN\bO\bP\bQ\bR\bS\bT\bU\bV\b^\b`\bb\bg\bk\bp\bu\b{\b~\b\130\b\134\b\139\b\144\b\150\b\155\b\161\b\167\b\174\b\177\b\181\b\185\b\190\b\191\b\194\b\195\b\196\b\198\b\199\b\200\b\201\b\203\b\212\b\222\b\223\b\229\b\237\b\238\b\239\b\248\b\249\b\254\b\255\t\000\t\005\t\007\t\t\t\012\t\015\t\018\t\021\t\024\t\027\t\030\t \t\"\t#\t$\t%\t'\t+\t-\t-\t/\t0\t2\t2\t3\t6\t8\t9\t9\t:\t;\t<\t>\t@\tB\tD\tE\tF\tH\tL\tO\tP\tQ\tR\tW\t\\\tb\th\to\tv\tv\tw\tx\tz\t|\t}\t\127\t\129\t\135\t\140\t\144\t\148\t\149\t\151"))
    
    and lr0_core =
      (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000F\000G\000H\000I\000J\000K\000L\000M\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000]\000^\000_\000`\000a\000b\000c\000d\000e\000f\000g\000h\000i\000j\000k\000l\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\t\001\n\001\011\001\012\001\r\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001 \001!\001\"\001#\001$\001%\001&\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001:\001;\001<\001=\001>\001?\001@\001A\001B\001C\001D\001E\001F\001G\001H\001I\001J\001K\001L\001M\001N\001O\001P\001Q\001R\001S\001T\001U\001V\001W\001X\001Y\001Z\001[\001\\\001]\001^\001_\001`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001p\001q\001r\001s\001t\001u\001v\001w\001x\001y\001z\001{\001|\001}\001~b\002\t\002\n\002\011\002\012\002\r\002\014\002\015\002\016\002\017\002\018\002\019\002\020\002\021\002\022\002\023\002\024\002\025\002\026\002\027\002\028\002\029\002\030\002\031\002 \002!\002\"\002#\002$\002%\002&\002'\002(\002)\002*\002+\002,\002-\002.\002/\0020\0021\0022\0023\0024\0025\0026\0027\0028\0029\002:\002;\002<\002=\002>\002?\002@\002A\002B\002C\002D\002E\002F\002G\002H\002I\002J\002K\002L\002M\002N\002Q\002R\002W\002X\002Y\002Z\002[\002\\\002]\002^\002_\002O\002P\002S\002T\002U\002V\002`\002a\002b\002c\002d\002e\002f\002g\002h\002i\002j\002k\002l\002m\002n\002o\002p\002q\002r\002s\002t\002u\002v\002w\002x\002y\002z\002{\002|\002}\002~\002\127\002\128\002\129\002\130\002\131\002\132\002\133\002\134\002\135\002\136\002\137\002\138\002\139\002\140\002\141\002\142\002\143\002\144\002\145\002\146\002\147\002\148\002\149\002\150\002\151\002\152\002\153\002\154\002\155\002\156\002\157\002\158\002\159\002\160\002\161\002\162\002\163\002\164\002\165\002\166\002\167\002\168\002\169\002\170\002\171\002\172\002\173\002\174\002\175\002\176\002\177\002\178\002\179\002\180\002\181\002\182\002\183\002\184\002\185\002\186\002\187\002\188\002\189\002\190\002\191\002\192\002\193\002\194\002\195\002\196\002\197\002\198\002\199\002\200\002\201\002\202\002\203\002\204\002\205\002\206\002\207\002\208\002\209\002\210\002\211\002\212\002\213\002\214\002\215\002\216\002\217\002\218\002\219\002\220\002\221\002\222\002\223\002\224\002\225\002\226\002\227\002\228\002\229\002\230\002\231\002\232\002\233\002\234\002\235\002\236\002\237\002\238\002\239\002\240\002\241\002\242\002\243\002\244\002\245\002\246\002\247\002\248\002\249\002\250\002\251\002\252\002\253\002\254\002\255\003\000\003\001\003\002\003\003\003\004\003\005\003\006\003\007\003\b\003\t\003\n\003\011\003\012\003\r\003,\003-\003.\003/\0030\0031\0032\0033\0034\0035\0036\0037\0038\0039\003:\003;\003<\003=\003>\003?\003@\003\020\003\021\003\022\003\023\003\014\003\015\003\018\003\019\003\026\003\027\003\028\003\029\003\030\003\031\003 \003!\003\"\003#\003$\003%\003&\003'\003(\003)\003*\003+\003\016\003\017\003\024\003\025\004D\004E\003B\003C\003D\003E\003F\003G\003H\003I\003J\003K\003L\003M\003N\003O\003P\003Q\003R\003S\003d\003e\003~\003\127\003\128\003\129\003\130\003\131\003\132\003\133\003\134\003\135\003T\003U\003Z\003[\003f\003g\003V\003W\003X\003Y\003\\\003]\003^\003_\003`\003a\003b\003c\003h\003i\003j\003k\003v\003w\003l\003m\003n\003o\003p\003q\003x\003y\003z\003{\003|\003}\003r\003s\003t\003u\003\136\003\137\003\138\003\139\003\140\003\141\003\142\003\143\003\144\003\145\003\146\003\147\003\148\003\149\003\150\003\151\003\152\003\153\003\154\003\155\003\156\003\157\003\158\003\159\003\160\003\161\003\162\003\163\003\164\003\165\003\166\003\167\003\168\003\169\003\170\003\171\003\172\003\173\003\174\003\175\003\176\003\177\003\178\003\179\003\180\003\181\003\182\003\183\003\184\003\185\003\186\003\187\004F\004G\004H\004I\004J\004K\004L\004M\004N\004O\004P\003\207\003\205\003\206\004Q\004R\004S\004T\004U\004V\004W\004\t\004\n\004\011\004\012\004\rb\004`\004a\004b\004c\004d\004e\004f\004g\004h\004i\004j\004k\004l\004m\004n\004o\004p\004q\004r\004s\004t\004u\004v\004w\004x\004y\004z\004{\004|\004}\004~b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\005\017\005\018\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\005\030\005\031\005 \005!\005\"\005#\005$\005%\005&\005'\005(\005)\005*\005+\005,\005-\005.\005/\0050\0051\0052\0053\0054\0055\0056\0057\0058\0059\005:\005;\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005K\005L\005M\005N\005O\005P\005Q\005R\005S\005T\005U\005V\005W\005X\005Y\005Z\005[\005\\\005]\005^\005_\005`\005a\005b\005c\005d\005e\005f\005g\005h\005i\005j\005k\005l\005m\005n\005o\005p\005q\005r\005s\005t\005u\005v\005w\005x\005y\005z\005{\005|\005}\005~b\006\t\006\n\006\011\006\012\006\r\006\014\006\015\006\016\006\017\006\018\006\019\006\020\006\021\006\022\006\023\006\024\006\025\006\026\006\027\006\028\006\029\006\030\006\031\006 \006!\006\"\006#\006$\006%\006&\006'\006(\006)\006*\006+\006,\006-\006.\006/\0060\0061\0062\0063\0064\0065\0066\0067\0068\0069\006:\006;\006<\006=\006>\006?\006@\006A\006B\006C\006D\006E\006F\006G\006H\006I\006J\006K\006L\006M\006N\006O\006P\006Q\006R\006S\006T\006U\006V\006W\006X\006Y\006Z\006[\006\\\006]\006^\006_\006`\006a\006b\006c\006d\006e\006f\006g\006h\006i\006j\006k\006l\006m\006n\006o\006p\006q\006r\006s\006t\006u\006v\006w\006x\006y\006z\006{\006|\006}\006~b\007\t\007\n\007\011\007\012\007\r\007\014\007\015\007\016\007\017\007\018\007\019\007\020\007\021\007\022\007\023\007\024\007\025\007\026\007\027\007\028\007\029\007\030\007\031\007 \007!\007\"\007#\007$\007%\007&\007'\007(\007)\007*\007+\007,\007-\007.\007/\0070\0071\0072\0073\0074\0075\0076\0077\0078\0079\007:\007;\007<\007=\007>\007?\007@\007A\007B\007C\007D\007E\007F\007G\007H\007I\007J\007K\007L\007M\007N\007O\007P\007Q\007R\007S\007T\007U\007V\007W\007X\007Y\007Z\007[\007\\\007]\007^\007_\007`\007a\007b\007c\007d\007e\007f\007g\007h\007i\007j\007k\007l\007m\007n\007o\007p\007q\007r\007s\007t\007u\007v\007w\007x\007y\007z\007{\007|\007}\007~\007\127\007\128\007\129\007\130\007\131\007\132\007\133\007\134\007\135\007\136\007\137\007\138\007\139\007\140\007\141\007\142\007\143\007\144\007\145\007\146\007\147\007\148\007\149\007\150\007\151\007\152\007\153\007\154")
    
    and lr0_items =
      ((32, "\000\000\000\000\000\002\028\001\000\003\024\001\000\011\208\001\000\011\204\001\000\011\200\001\000\011\196\001\000\011\192\001\000\011\004\001\000\011\188\001\000\011\184\001\000\011\180\001\000\011\176\001\000\011\172\001\000\011\168\001\000\011\164\001\000\011\160\001\000\011\156\001\000\011\152\001\000\011\148\001\000\011\144\001\000\011\140\001\000\011\136\001\000\011P\001\000\011\132\001\000\011\128\001\000\011|\001\000\011x\001\000\011t\001\000\011p\001\000\011\000\001\000\011l\001\000\011h\001\000\011d\001\000\011`\001\000\011\\\001\000\011X\001\000\011T\001\000\011L\001\000\011H\001\000\011D\001\000\011@\001\000\011<\001\000\0118\001\000\0114\001\000\0110\001\000\011,\001\000\011(\001\000\011$\001\000\011 \001\000\011\028\001\000\011\024\001\000\011\020\001\000\011\016\001\000\011\012\001\000\011\b\001\000\000\164\001\000\000\160\001\000\000\164\002\000\000\164\003\000\003\024\002\000\002\028\002\000\000\168\001\000\000\168\002\000\002X\001\000\002X\002\000\002X\003\000\nx\001\000\005\176\001\000\002\024\001\000\002\020\001\000\002\016\001\000\002\012\001\000\002\024\002\000\002\020\002\000\002\016\002\000\002\012\002\000\002\024\003\000\002\020\003\000\002\016\003\000\002\012\003\000\002L\001\000\002L\002\000\002L\003\000\001\188\001\000\001\168\001\000\003 \001\000\nP\001\000\n4\001\000\n4\002\000\n4\003\000\005\168\001\000\005\180\001\000\005\172\001\000\005\180\002\000\005\172\002\000\005\180\003\000\005\172\003\000\005\200\001\000\001\000\001\000\n4\004\000\004\160\001\000\004\160\002\000\r \001\000\n<\001\000\n8\001\000\n\004\001\000\n\000\001\000\001\212\001\000\001\180\001\000\007\024\001\000\001\180\002\000\nP\001\000\006\196\001\000\r$\001\000\003\028\001\000\003\028\002\000\rD\001\000\rD\002\000\rD\003\000\r \001\000\006\196\001\000\007\012\001\000\007\br \002\000\r \003\000\rD\004\000\rD\005\000\000\\\001\000\005\128\001\000\000X\001\000\003\140\001\000\003\144\001\000\000X\002\000\007\148\001\000\007\148\002\000\007\148\003\000\007\144\001\000\000|\001\000\000h\001\000\000T\001\000\000P\001\000\000T\002\000\000T\003\000\000T\004\000\005\128\001\000\003\140\001\000\006\016\001\000\006\016\002\000\t\168\001\000\t\164\001\000\003\136\001\000\003\132\001\000\003\128\001\000\003|\001\000\t\168\002\000\t\164\002\000\003\136\002\000\003\132\002\000\003\128\002\000\003|\002\000\t\168\003\000\t\164\003\000\003\136\003\000\003\132\003\000\003\128\003\000\003|\003\000\r\020\001\000\r\000\001\000\012\244\001\000\r\000\002\000\t\168\004\000\003\136\004\000\003\128\004\000\r\b\001\000\012\248\001\000\r\b\002\000\012\228\001\000\r\016\001\000\r\012\001\000\r\004\001\000\012\252\001\000\r\004\002\000\r\012\002\000\012\216\001\000\012\236\001\000\012\232\001\000\012\232\002\000\012\216\002\000\t\020\001\000\012\228\002\000\t\024\001\000\012\228\003\000\t\024\002\000\t\024\003\000\t\168\005\000\003\136\005\000\003\128\005\000\005x\001\000\003\136\006\000\003\128\006\000\012\208\001\000\005\128\001\000\001\192\001\000\006\168\001\000\006\152\001\000\006\136\001\000\006\128\001\000\001\196\001\000\001\180\001\000\000|\001\000\000h\001\000\000T\001\000\000P\001\000\012,\001\000\012(\001\000\011\252\001\000\005x\001\000\000p\001\000\000l\001\000\005x\001\000\005P\001\000\005H\001\000\005@\001\000\005P\002\000\005H\002\000\005@\002\000\b\216\001\000\000X\001\000\b\216\002\000\000X\002\000\012\028\001\000\012\024\001\000\012\020\001\000\012\016\001\000\011\244\001\000\011\240\001\000\005x\001\000\012\028\002\000\012\024\002\000\012\020\002\000\012\016\002\000\011\244\002\000\011\240\002\000\012\028\003\000\012\024\003\000\011\244\003\000\000\152\001\000\000\148\001\000\007L\001\000\000\152\002\000\000\148\002\000\000\144\001\000\000\140\001\000\000\144\002\000\000\140\002\000\000\136\001\000\000\132\001\000\000\128\001\000\000t\001\000\005\196\001\000\005\132\001\000\005|\001\000\005\196\002\000\005\196\003\000\005\196\001\000\005\132\001\000\005\196\004\000\005\132\002\000\005\132\003\000\005\192\001\000\005\132\002\000\005|\002\000\005|\003\000\001t\001\000\000t\002\000\000\132\002\000\006h\001\000\006h\002\000\000`\001\000\012$\001\000\012 \001\000\011\248\001\000\003P\001\000\012$\002\000\012 \002\000\011\248\002\000\012,\001\000\012(\001\000\012$\003\000\011\252\001\000\012,\002\000\012(\002\000\012$\004\000\011\252\002\000\012,\003\000\012(\003\000\011\252\003\000\012,\004\000\012,\001\000\012(\001\000\011\252\001\000\012,\005\000\012,\002\000\012(\002\000\011\252\002\000\012\188\001\000\t4\001\000\t4\002\000\012\212\001\000\000\156\001\000\t4\003\000\000x\001\000\000d\001\000\000x\002\000\000x\003\000\000d\002\000\012\184\001\000\t8\001\000\000x\001\000\000d\001\000\t8\002\000\t8\003\000\000x\001\000\000d\001\000\012(\004\000\012$\001\000\012 \001\000\011\248\001\000\011\252\004\000\012\012\001\000\012\b\001\000\012\004\001\000\012\000\001\000\011\236\001\000\011\232\001\000\012\012\002\000\012\b\002\000\011\236\002\000\012\012\003\000\012\b\003\000\011\236\003\000\012\012\004\000\012\b\004\000\011\236\004\000\012,\001\000\012(\001\000\012\012\005\000\011\252\001\000\012,\002\000\012(\002\000\012\012\006\000\011\252\002\000\012$\001\000\012 \001\000\012\b\005\000\011\248\001\000\011\236\005\000\012\004\002\000\012\000\002\000\011\232\002\000\012\004\003\000\012\000\003\000\011\232\003\000\012,\001\000\012(\001\000\012\004\004\000\011\252\001\000\012,\002\000\012(\002\000\012\004\005\000\011\252\002\000\012$\001\000\012 \001\000\012\000\004\000\011\248\001\000\011\232\004\000\012$\001\000\012 \003\000\012 \001\000\011\248\001\000\011\248\003\000\t<\001\000\003T\001\000\t\004\001\000\t\b\001\000\000\132\003\000\000\132\004\000\t\b\002\000\t\b\003\000\012\136\001\000\012\132\001\000\012\132\002\000\007@\001\000\012\132\003\000\012\132\004\000\b\240\001\000\b\240\002\000\000<\001\000\b\240\003\000\000@\001\000\000@\002\000\000@\003\000\000@\004\000\012\132\005\000\b\236\001\000\000@\001\000\012\136\002\000\t@\001\000\001\248\001\000\001\248\002\000\001\244\001\000\000@\001\000\t<\001\000\000\128\002\000\000\128\003\000\000\136\002\000\000\136\003\000\t\b\001\000\000\136\004\000\000\136\005\000\t\b\001\000\000\140\003\000\000\140\004\000\t\b\001\000\000\152\003\000\000\148\003\000\000\148\004\000\000\152\004\000\b\212\001\000\000\152\005\000\000\152\006\000\b\212\002\000\bb\220\001\000\bP\001\000\b\220\002\000\b\220\003\000\bP\002\000\bP\003\000\000@\001\000\005P\003\000\005H\003\000\005@\003\000\005P\004\000\005H\004\000\005@\004\000\005H\005\000\005@\005\000\005H\006\000\005@\006\000\005X\001\000\005@\007\000\005T\001\000\005L\001\000\005D\001\000\000x\001\000\000d\001\000\005L\002\000\005D\002\000\005D\003\000\bL\001\000\000@\001\000\000p\002\000\000l\002\000\000l\003\000\012,\002\000\012(\002\000\011\252\002\000\001\196\002\000\001\196\003\000\t$\001\000\000|\002\000\000h\002\000\000|\003\000\000h\003\000\000|\004\000\000|\005\000\000h\004\000\t$\002\000\t$\003\000\001\248\001\000\t(\001\000\001\248\001\000\000P\002\000\000P\003\000\t(\002\000\t(\003\000\001\248\001\000\001\176\001\000\000\136\001\000\000\132\001\000\000\128\001\000\001\176\002\000\006\168\002\000\006P\001\000\006H\001\000\006L\001\000\003\184\001\000\003\180\001\000\003\184\002\000\003\180\002\000\003\184\003\000\003\180\003\000\003\184\004\000\003\180\004\000\003\184\005\000\003\180\005\000\003\184\006\000\003\184\007\000\006\168\003\000\006\168\004\000\003\196\001\000\003\192\001\000\003\196\002\000\003\188\001\000\001\184\001\000\006\152\002\000\003t\001\000\001\236\001\000\001\192\001\000\001\196\001\000\001\180\001\000\001\176\001\000\003t\002\000\003h\001\000\001\232\001\000\001\232\002\000\001\232\003\000\t \001\000\001\228\001\000\t \002\000\001\228\002\000\t \003\000\001\228\003\000\000x\001\000\000d\001\000\003h\002\000\t\028\001\000\001\224\001\000\000x\001\000\000d\001\000\003p\001\000\003l\001\000\003l\002\000\003l\003\000\003l\004\000\000x\001\000\000d\001\000\t\028\001\000\003p\002\000\001\224\001\000\000x\001\000\000d\001\000\003t\003\000\003t\004\000\001\200\001\000\b\144\001\000\001\240\001\000\003t\001\000\b\144\002\000\b\136\001\000\b\140\001\000\006\128\002\000\001\248\001\000\006\136\002\000\003x\001\000\003x\002\000\003x\003\000\006\164\001\000\006\164\002\000\006\164\003\000\006\148\001\000\012\208\002\000\006\176\001\000\006\172\001\000\006\160\001\000\006\156\001\000\006\144\001\000\006\140\001\000\006|\001\000\001\248\001\000\006\176\002\000\006\172\002\000\006\160\002\000\006\156\002\000\006\144\002\000\006\140\002\000\006\176\003\000\006\160\003\000\006\144\003\000\006\176\004\000\006\176\005\000\006\176\006\000\006\160\004\000\006\144\004\000\006\172\003\000\006\172\004\000\006\172\005\000\006\156\003\000\006\140\003\000\006\132\001\000\003\128\007\000\003\128\b\000\b\188\001\000\003\128\t\000\bT\001\000\bT\002\000\012X\001\000\012T\001\000\003\136\001\000\003\132\001\000\012X\002\000\012T\002\000\003\136\002\000\003\132\002\000\012X\003\000\012T\003\000\003\136\003\000\003\132\003\000\012X\004\000\003\136\004\000\012X\005\000\003\136\005\000\005x\001\000\003\136\006\000\003\136\007\000\b\188\001\000\003\136\b\000\b\188\002\000\b\188\003\000\001\248\001\000\b\188\004\000\b\188\005\000\001\248\001\000\004\184\001\000\004\184\002\000\003\136\t\000\012X\006\000\012X\007\000\b`\001\000\012X\b\000\003t\001\000\003$\001\000\003t\002\000\003$\002\000\003$\003\000\001\212\001\000\001\180\001\000\001\212\002\000\001\212\003\000\005\180\001\000\001\208\001\000\001\204\001\000\005\180\002\000\001\208\002\000\001\208\003\000\001\208\004\000\001\208\005\000\003$\004\000\003$\005\000\001\216\001\000\012X\t\000\b\168\001\000\b\164\001\000\012X\n\000\b\164\002\000\b\168\002\000\b\148\001\000\b\156\001\000\b\152\001\000\b\160\001\000\003x\001\000\003(\001\000\003(\002\000\003(\003\000\003(\004\000\012\224\001\000\012T\004\000\003\132\004\000\005x\001\000\003\132\005\000\003\132\006\000\b\188\001\000\003\132\007\000\003\132\b\000\012T\005\000\012T\006\000\012T\007\000\012T\b\000\b\168\001\000\b\164\001\000\012T\t\000\004\208\001\000\004\204\001\000\003\176\001\000\0008\001\000\0004\001\000\006\184\001\000\006\180\001\000\006\184\002\000\006\184\003\000\006\184\004\000\006\000\001\000\005\224\001\000\005\224\002\000\002h\001\000\002h\002\000\002h\003\000\001\b\001\000\001\004\001\000\n\208\001\000\t\228\001\000\t\224\001\000\t\224\002\000\t\228\002\000\t\220\001\000\t\216\001\000\t\216\002\000\t\220\002\000\r \001\000\n\248\001\000\n\204\001\000\n\200\001\000\n\192\001\000\001\212\001\000\001\180\001\000\t\228\001\000\t\224\001\000\007\004\001\000\n\204\002\000\n\200\002\000\n\204\003\000\n\200\003\000\n\204\004\000\n\200\004\000\006\b\001\000\006\004\001\000\n\204\005\000\n\200\005\000\n\200\006\000\n\204\006\000\006\024\001\000\006\024\002\000\006\024\003\000\006\024\004\000\007\172\001\000\007\168\001\000\007\164\001\000\007\160\001\000\007\156\001\000\007\152\001\000\007\172\002\000\007\168\002\000\007\164\002\000\007\160\002\000\007\172\003\000\007\168\003\000\007\164\003\000\007\160\003\000\012\128\001\000\012|\001\000\002\b\001\000\002\b\002\000\002\b\003\000\002H\001\000\002H\002\000\002H\003\000\003\016\001\000\r$\001\000\002\224\001\000\002\224\002\000\005(\001\000\005(\002\000\005(\003\000\b|\001\000\005(\004\000\004@\001\000\0040\001\000\004(\001\000\004@\002\000\0040\002\000\004(\002\000\004\012\001\000\004\b\001\000\004\004\001\000\004\b\002\000\004\004\002\000\004\b\003\000\003\204\001\000\003\200\001\000\003\204\002\000\003\204\003\000\001\248\001\000\004\b\004\000\004\b\005\000\004\004\003\000\004\004\004\000\004\012\002\000\003\244\001\000\003\240\001\000\003\236\001\000\003\240\002\000\003\236\002\000\003\240\003\000\003\240\004\000\007\132\001\000\002\216\001\000\t\244\001\000\t\240\001\000\t\236\001\000\001\176\001\000\t\232\001\000\003\208\001\000\t\232\002\000\t\232\003\000\005\016\001\000\005\012\001\000\005\b\001\000\005\004\001\000\007d\001\000\007d\002\000\001\248\001\000\005\016\002\000\005\012\002\000\005\b\002\000\005\004\002\000\007|\001\000\b\012\001\000\b\012\002\000\b\012\003\000\001\160\001\000\n\228\001\000\n\228\002\000\001\172\001\000\001\164\001\000\n\184\001\000\r(\001\000\n\188\001\000\b\012\004\000\n\196\001\000\n\216\001\000\n\212\001\000\n\216\002\000\n\216\003\000\t\212\001\000\n\224\001\000\n\244\001\000\n\240\001\000\n\236\001\000\n\232\001\000\005\180\001\000\001\208\001\000\001\204\001\000\n\244\002\000\n\240\002\000\n\236\002\000\n\232\002\000\005\180\002\000\001\208\002\000\n\244\003\000\n\240\003\000\001\208\003\000\n\240\004\000\007\236\001\000\007\236\002\000\007\236\003\000\bn\224\001\000\b\b\001\000\b\b\002\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\n\252\001\000\n\220\001\000\b\004\001\000\b\004\002\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\007\244\001\000\007\236\004\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\n\244\004\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\n\244\005\000\n\236\003\000\t\236\001\000\n\236\004\000\t\236\002\000\t\236\003\000\td\001\000\t`\001\000\t\\\001\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\td\002\000\t`\002\000\td\003\000\n\232\003\000\n\220\001\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\007|\002\000\005\016\003\000\005\012\003\000\005\b\003\000\005\004\003\000\005\016\004\000\005\012\004\000\005\b\004\000\005\012\005\000\007T\001\000\005\012\006\000\005\016\005\000\t\244\002\000\t\240\002\000\t\240\003\000\n\184\001\000\004`\001\000\004\000\001\000\003\252\001\000\003\248\001\000\b,\001\000\003\252\002\000\003\248\002\000\003\252\003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\004\\\001\000\004X\001\000\004\\\002\000\004\\\003\000\001\248\001\000\003\252\004\000\003\252\005\000\003\252\006\000\003\248\003\000\003\248\004\000\003\248\005\000\b(\001\000\004\000\002\000\r \001\000\011\228\001\000\n\248\001\000\n\204\001\000\n\200\001\000\n\192\001\000\004\028\001\000\001\212\001\000\001\180\001\000\011\228\002\000\006p\001\000\006l\001\000\006p\002\000\011\228\003\000\011\228\004\000\004\020\001\000\004\016\001\000\r \001\000\n\248\001\000\n\204\001\000\n\200\001\000\n\192\001\000\004\020\002\000\001\212\001\000\001\180\001\000\t\220\001\000\t\216\001\000\007\016\001\000\004\020\003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\004\020\004\000\004\020\005\000\n\248\002\000\n\192\002\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\n\192\003\000\n\248\003\000\n\248\004\000\001\248\001\000\n\248\005\000\004\016\002\000\011\220\001\000\004D\001\000\0028\001\000\0024\001\000\0020\001\000\002,\001\000\0028\002\000\0024\002\000\0028\003\000\0028\004\000\0028\005\000\005\228\001\000\005\228\002\000\003\\\001\000\003X\001\000\003X\002\000\003\\\002\000\003\\\003\000\006\028\001\000\006\020\001\000\006\020\002\000\b\196\001\000\003`\001\000\b\196\002\000\006\020\003\000\006\020\004\000\006$\001\000\006,\001\000\006(\001\000\006 \001\000\006\020\005\000\006,\002\000\rl\001\000\rh\001\000\rl\002\000\rh\002\000\rl\003\000\rh\003\000\r|\001\000\rx\001\000\r|\002\000\rl\004\000\rl\005\000\000@\001\000\rh\004\000\rh\005\000\000@\001\000\rh\006\000\b\188\001\000\rt\001\000\rp\001\000\rt\002\000\rp\002\000\005\180\001\000\rp\003\000\rp\004\000\005\196\001\000\005\132\001\000\005\180\002\000\rt\003\000\rt\004\000\005\196\001\000\005\132\001\000\b\252\001\000\t\000\001\000\006,\003\000\t\000\002\000\t\000\003\000\006(\002\000\006,\001\000\006(\003\000\006(\001\000\006 \001\000\006 \002\000\005\196\001\000\005\164\001\000\005\132\001\000\005\164\002\000\005\132\002\000\005\132\003\000\003\140\001\000\005\164\003\000\0068\001\000\005\160\001\000\0060\001\000\bn\160\001\000\n\140\001\000\n\136\001\000\n\156\001\000\n\152\001\000\001\176\001\000\n\\\001\000\nX\001\000\tX\001\000\tT\001\000\tP\001\000\007l\001\000\n\128\001\000\r$\001\000\005\168\001\000\t\252\001\000\t\248\001\000\002d\001\000\002d\002\000\002d\003\000\n0\001\000\n,\001\000\n0\002\000\n,\002\000\n0\003\000\n,\003\000\002T\001\000\002P\001\000\002T\002\000\002P\002\000\002T\003\000\002P\003\000\002<\001\000\002<\002\000\002<\003\000\b\228\001\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\005<\001\000\0058\001\000\0054\001\000\0058\002\000\002D\001\000\002@\001\000\002D\002\000\002@\002\000\002D\003\000\002@\003\000\r \001\000\n\248\001\000\n\204\001\000\n\200\001\000\n\192\001\000\004\028\001\000\002D\004\000\001\212\001\000\001\180\001\000\002D\005\000\002D\006\000\002D\007\000\003@\001\000\002$\001\000\002 \001\000\002$\002\000\002 \002\000\002$\003\000\002 \003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\002$\004\000\002 \004\000\002$\005\000\002\\\001\000\002\\\002\000\002\\\003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\002\\\004\000\002\\\005\000\nT\001\000\n@\001\000\005\184\001\000\np\001\000\nl\001\000\n`\001\000\nT\002\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\np\002\000\np\003\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\nl\002\000\nl\003\000\n\024\002\000\n\020\002\000\n\016\002\000\n\020\003\000\002`\001\000\002`\002\000\002`\003\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\002`\004\000\n`\002\000\n(\002\000\n$\002\000\n \002\000\n\028\002\000\n\012\002\000\n\b\002\000\n\b\003\000\002\204\001\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\248\001\000\002\244\001\000\002\240\001\000\002\236\001\000\002\232\001\000\002\228\001\000\002l\001\000\002(\001\000\003\224\001\000\003\220\001\000\003\224\002\000\003\224\003\000\012\200\001\000\012\200\002\000\001\248\001\000\012\196\001\000\012\192\001\000\012\196\002\000\012\192\002\000\001\248\001\000\012\196\003\000\012\196\004\000\001\248\001\000\003\224\004\000\003\224\005\000\003\220\002\000\003\228\001\000\003\228\002\000\003\232\001\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\003\232\002\000\nL\001\000\n\180\001\000\n\176\001\000\n\172\001\000\n\168\001\000\n\164\001\000\n\148\001\000\n\144\001\000\n\132\001\000\n|\001\000\nh\001\000\nd\001\000\005\188\001\000\005\180\001\000\001\208\001\000\001\204\001\000\n\180\002\000\n\176\002\000\n\172\002\000\n\168\002\000\n\164\002\000\n\148\002\000\n\144\002\000\n\132\002\000\n|\002\000\nh\002\000\nd\002\000\005\188\002\000\005\180\002\000\001\208\002\000\r \001\000\n\180\003\000\n|\003\000\nd\003\000\001\208\003\000\n|\004\000\007\b\001\000\0008\001\000\007\004\001\000\0004\001\000\n\180\004\000\n\180\005\000\n\180\006\000\n\180\007\000\005\248\001\000\005\244\001\000\005\236\001\000\n\180\b\000\n\180\t\000\006,\001\000\006(\001\000\006 \001\000\n\180\n\000\012\128\001\000\007\020\001\000\012|\001\000\007\016\001\000\006\200\001\000\002\216\001\000\b\000\001\000\004d\001\000\004d\002\000\004d\003\000\001\248\001\000\004d\004\000\004d\005\000\t,\001\000\002p\001\000\t,\002\000\nL\001\000\002x\001\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\002x\002\000\r,\001\000\nt\001\000\nH\001\000\nD\001\000\0050\001\000\002\004\001\000\002\004\002\000\002\004\003\000\005,\001\000\004H\001\000\002\212\001\000\002\212\002\000\002\212\003\000\t\128\001\000\t|\001\000\tx\001\000\tt\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\164\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\003\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\152\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\003\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\148\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\003\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\144\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\003\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\168\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\003\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\184\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\003\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\160\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\003\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\156\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\003\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\176\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\003\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\140\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\003\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\136\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\003\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\132\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\003\000\002\132\001\000\002\128\001\000\002|\001\000\002\128\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\003\000\002\128\001\000\002|\001\000\002|\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\003\000\002|\001\000\002\180\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\003\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\172\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\003\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\t0\002\000\t0\003\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\200\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\003\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\220\002\000\t0\001\000\003\012\001\000\002\220\003\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\188\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\003\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\192\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\003\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\196\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\003\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\003\012\002\000\nH\001\000\002t\001\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\002t\002\000\002\208\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\208\002\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\t\128\002\000\t|\002\000\tx\002\000\t\128\003\000\t\128\004\000\t\128\005\000\t|\003\000\000D\001\000\000D\002\000\n\184\001\000\0044\001\000\004,\001\000\004$\001\000\004 \001\000\012\196\001\000\012\192\001\000\0044\002\000\004,\002\000\0044\003\000\0044\004\000\0044\005\000\0044\006\000\001\248\001\000\0044\007\000\0044\b\000\b\220\001\000\004,\003\000\004,\004\000\004,\005\000\001\248\001\000\004,\006\000\004,\007\000\004$\002\000\004$\003\000\004$\004\000\004 \002\000\004\024\001\000\011\224\001\000\003<\001\000\003<\002\000\003<\003\000\0038\001\000\011\224\002\000\n\188\001\000\004<\001\000\004<\002\000\004<\003\000\001\248\001\000\004<\004\000\004<\005\000\b$\001\000\b\028\001\000\b\020\001\000\b\016\001\000\007\252\001\000\0048\001\000\0048\002\000\0048\003\000\007\252\002\000\007\252\003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\b\016\002\000\b\016\003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\b$\002\000\b$\003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\b\028\002\000\b\028\003\000\b\020\002\000\b\024\001\000\b \001\000\007\248\001\000\007\248\002\000\007\248\003\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\000D\003\000\000D\004\000\004H\002\000\0050\002\000\t0\001\000\t,\003\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\b$\001\000\b\028\001\000\b\020\001\000\b\016\001\000\007\252\001\000\004h\001\000\004h\002\000\004h\003\000\004p\001\000\002\216\002\000\002\216\003\000\002\216\004\000\004p\002\000\004p\003\000\004l\001\000\nT\001\000\006\236\001\000\nd\004\000\nd\005\000\n\168\003\000\n\148\003\000\n\144\003\000\n\148\004\000\n\144\004\000\n\144\005\000\n\168\004\000\tL\001\000\tH\001\000\tD\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\tL\002\000\tH\002\000\tL\003\000\tL\001\000\tH\001\000\tD\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\140\001\000\001\136\001\000\001\132\001\000\001\128\001\000\b\248\001\000\001\140\002\000\001\136\002\000\001\132\002\000\001\128\002\000\001\140\003\000\001\132\003\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\140\004\000\001\132\004\000\001\132\005\000\001\140\005\000\001\128\003\000\b\248\002\000\001|\001\000\001x\001\000\001|\002\000\001x\002\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\001|\003\000\001x\003\000\001|\004\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001|\005\000\001x\004\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001x\005\000\001\252\001\000\002\000\001\000\001x\006\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001x\007\000\b\248\003\000\001\136\003\000\b\244\001\000\n\168\005\000\n\176\003\000\n\172\003\000\n\164\003\000\n\176\004\000\n\172\004\000\n\172\005\000\n\164\004\000\tL\001\000\tH\001\000\tD\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\156\001\000\001\152\001\000\001\148\001\000\001\144\001\000\b\248\001\000\001\156\002\000\001\152\002\000\001\148\002\000\001\144\002\000\001\156\003\000\001\148\003\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\156\004\000\001\148\004\000\001\148\005\000\001\156\005\000\001\144\003\000\001\152\003\000\n\164\005\000\nh\003\000\nh\004\000\nh\005\000\n\132\003\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\b\132\001\000\b\132\002\000\b\132\003\000\tp\001\000\tl\001\000\th\001\000\007\140\001\000\tp\002\000\tl\002\000\th\002\000\tp\003\000\tl\003\000\th\003\000\tp\004\000\tl\004\000\tp\005\000\b\128\001\000\n\132\004\000\n\132\005\000\n\180\001\000\n\176\001\000\n\172\001\000\n\168\001\000\n\164\001\000\n\148\001\000\n\144\001\000\n\132\001\000\n|\001\000\nh\001\000\nd\001\000\005\188\001\000\005\180\001\000\005\172\001\000\001\208\001\000\001\204\001\000\n\180\002\000\n\176\002\000\n\172\002\000\n\168\002\000\n\164\002\000\n\148\002\000\n\144\002\000\n\132\002\000\n|\002\000\nh\002\000\nd\002\000\005\188\002\000\005\180\002\000\005\172\002\000\001\208\002\000\r$\001\000\005\172\003\000\005\188\003\000\003\216\001\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\003\216\002\000\n\024\002\000\n\020\002\000\n\016\002\000\002\252\002\000\002\248\002\000\002\244\002\000\n\020\003\000\002\248\003\000\n\020\004\000\002\248\004\000\n\020\005\000\002\248\005\000\002\248\006\000\t0\001\000\003\012\001\000\002\248\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\016\003\000\002\244\003\000\n\016\004\000\002\244\004\000\n\016\005\000\002\244\005\000\002\244\006\000\t0\001\000\003\012\001\000\002\244\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\024\003\000\002\252\003\000\n\024\004\000\002\252\004\000\n\024\005\000\002\252\005\000\002\252\006\000\t0\001\000\003\012\001\000\002\252\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n`\002\000\n(\002\000\n$\002\000\n \002\000\n\028\002\000\n\012\002\000\n\b\002\000\003\b\002\000\003\004\002\000\003\000\002\000\002\240\002\000\002\236\002\000\002\232\002\000\002\228\002\000\n\b\003\000\002\232\003\000\n\b\004\000\002\232\004\000\n\b\005\000\002\232\005\000\002\232\006\000\t0\001\000\003\012\001\000\002\232\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\012\003\000\002\236\003\000\n\012\004\000\002\236\004\000\n\012\005\000\002\236\005\000\002\236\006\000\t0\001\000\003\012\001\000\002\236\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n(\003\000\002\240\003\000\n(\004\000\t0\001\000\003\012\001\000\002\240\004\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n(\005\000\002\240\005\000\002\240\006\000\t0\001\000\003\012\001\000\002\240\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n$\003\000\n \003\000\n\028\003\000\005\180\001\000\005\172\001\000\003\b\003\000\003\004\003\000\003\000\003\000\n$\004\000\n \004\000\n\028\004\000\003\b\004\000\003\004\004\000\003\000\004\000\n \005\000\003\004\005\000\n \006\000\003\004\006\000\n \007\000\003\004\007\000\003\004\b\000\t0\001\000\003\012\001\000\003\004\t\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\028\005\000\003\000\005\000\n\028\006\000\003\000\006\000\n\028\007\000\003\000\007\000\003\000\b\000\t0\001\000\003\012\001\000\003\000\t\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n$\005\000\003\b\005\000\n$\006\000\003\b\006\000\n$\007\000\003\b\007\000\003\b\b\000\t0\001\000\003\012\001\000\003\b\t\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n`\003\000\002\228\003\000\002\228\004\000\t0\001\000\003\012\001\000\002\228\005\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\003\212\001\000\b\204\001\000\002l\002\000\b\204\002\000\b\200\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\204\002\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\b\004\000\n\b\005\000\n\012\003\000\n\012\004\000\n\012\005\000\n(\003\000\n(\004\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n(\005\000\n$\003\000\n \003\000\n\028\003\000\005\180\001\000\005\172\001\000\n$\004\000\n \004\000\n\028\004\000\n \005\000\n \006\000\n \007\000\n\028\005\000\n\028\006\000\n\028\007\000\n$\005\000\n$\006\000\n$\007\000\n`\003\000\n\020\004\000\n\020\005\000\n\016\003\000\n\016\004\000\n\016\005\000\n\024\003\000\n\024\004\000\n\024\005\000\002\\\006\000\002\\\007\000\002\\\b\000\002\\\t\000\002\\\n\000\002\\\011\000\002$\006\000\002$\007\000\002$\b\000\002$\t\000\002 \005\000\002 \006\000\002 \007\000\002 \b\000\002 \t\000\002 \n\000\002 \011\000\003@\002\000\r \001\000\n\248\001\000\n\204\001\000\n\200\001\000\n\192\001\000\004\028\001\000\003L\001\000\001\212\001\000\001\180\001\000\003L\002\000\003L\003\000\003L\004\000\003D\001\000\003D\002\000\000x\001\000\000d\001\000\003D\003\000\003D\004\000\003H\001\000\003H\002\000\003L\005\000\004\028\002\000\004\028\003\000\004\028\004\000\002D\b\000\002@\004\000\002@\005\000\0058\003\000\0058\004\000\0058\005\000\005<\002\000\0054\002\000\005<\003\000\0054\003\000\b\228\002\000\b\232\001\000\002<\004\000\b\232\002\000\b\232\003\000\b\224\001\000\002T\004\000\002P\004\000\002T\005\000\002P\005\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002T\006\000\002P\006\000\002P\007\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002P\b\000\n0\004\000\n,\004\000\n,\005\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\002d\004\000\t\248\002\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\t\248\003\000\np\001\000\nl\001\000\n`\001\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\t\252\002\000\n\128\002\000\n\128\003\000\t0\001\000\007l\002\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\tX\002\000\tT\002\000\tP\002\000\tX\003\000\tT\003\000\tX\004\000\n\\\002\000\nX\002\000\nX\003\000\n\152\002\000\n\152\003\000\n\156\002\000\tL\001\000\tH\001\000\tD\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\156\003\000\n\140\002\000\n\136\002\000\n\136\003\000\n\160\002\000\tL\001\000\tH\001\000\tD\001\000\t0\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\160\003\000\0028\b\000\0024\003\000\0024\004\000\005\248\001\000\005\244\001\000\005\236\001\000\0024\005\000\0024\006\000\0024\007\000\002,\002\000\002,\003\000\002,\004\000\002,\005\000\005\204\001\000\005\248\001\000\005\244\001\000\005\236\001\000\005\204\002\000\005\208\001\000\006,\001\000\006(\001\000\006 \001\000\005\208\002\000\005\208\003\000\005\248\001\000\005\244\001\000\005\236\001\000\005\208\004\000\002,\006\000\002,\007\000\002,\b\000\005\212\001\000\005\212\002\000\0020\002\000\0020\003\000\0020\004\000\0020\005\000\0020\006\000\0020\007\000\0020\b\000\0020\t\000\004D\002\000\004D\003\000\004D\004\000\004D\005\000\004D\006\000\011\220\002\000\011\228\005\000\004`\002\000\007\132\002\000\003\240\005\000\003\240\006\000\003\236\003\000\003\236\004\000\003\236\005\000\003\244\002\000\r \001\000\n\248\001\000\n\204\001\000\n\200\001\000\n\192\001\000\005$\001\000\004\028\001\000\001\212\001\000\001\180\001\000\005$\002\000\005$\003\000\005$\004\000\005\028\001\000\005\028\002\000\005\024\001\000\005\024\002\000\005\024\003\000\005\020\001\000\005$\005\000\005 \001\000\005 \002\000\012\196\001\000\012\192\001\000\0040\003\000\b\220\001\000\0040\004\000\0040\005\000\0040\006\000\001\248\001\000\0040\007\000\0040\b\000\004(\003\000\004(\004\000\004(\005\000\004@\003\000\005(\005\000\005(\006\000\t0\001\000\003\012\001\000\002\224\003\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\003\016\002\000\002H\004\000\002H\005\000\b\232\001\000\002H\006\000\002\b\004\000\002\b\005\000\b\232\001\000\002\b\006\000\t0\001\000\007\172\004\000\007\168\004\000\007\164\004\000\007\160\004\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\007\160\005\000\007\172\005\000\007\172\006\000\006,\001\000\006(\001\000\006 \001\000\007\172\007\000\007\168\005\000\007\164\005\000\007\168\006\000\007\164\006\000\006,\001\000\006(\001\000\006 \001\000\007\164\007\000\007\168\007\000\007\168\b\000\006,\001\000\006(\001\000\006 \001\000\007\168\t\000\006\024\005\000\005\248\001\000\005\244\001\000\005\236\001\000\n\204\007\000\006,\001\000\006(\001\000\006 \001\000\n\204\b\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\001\b\002\000\001\004\002\000\001\004\003\000\001\b\003\000\001\248\001\000\001\b\004\000\001\b\005\000\002h\004\000\000\212\001\000\r@\001\000\r8\001\000\r@\002\000\r8\002\000\006@\001\000\r@\003\000\r8\003\000\r@\004\000\r8\004\000\r8\005\000\r8\006\000\r@\005\000\r@\006\000\r@\007\000\000\212\002\000\000\212\003\000\r<\001\000\r4\001\000\r0\001\000\rX\001\000\rP\001\000\rX\002\000\rT\001\000\006@\001\000\rT\002\000\r0\002\000\r0\003\000\r0\004\000\r0\005\000\001\248\001\000\r<\002\000\r4\002\000\r<\003\000\r4\003\000\r4\004\000\r4\005\000\r<\004\000\r<\005\000\r<\006\000\000\216\001\000\005t\001\000\005l\001\000\005d\001\000\005t\002\000\005l\002\000\005d\002\000\005t\003\000\005l\003\000\005d\003\000\005t\004\000\005l\004\000\005d\004\000\005t\005\000\005l\005\000\005t\006\000\005t\007\000\005t\b\000\005t\t\000\001\248\001\000\005t\n\000\005t\011\000\b\220\001\000\bH\001\000\bH\002\000\bH\003\000\001\248\001\000\005l\006\000\005l\007\000\005l\b\000\bD\001\000\001\248\001\000\005d\005\000\000\216\002\000\000\216\003\000\005p\001\000\005h\001\000\005`\001\000\005\\\001\000\rd\001\000\r\\\001\000\rd\002\000\r`\001\000\b`\001\000\r`\002\000\005\\\002\000\005\\\003\000\005\\\004\000\005\\\005\000\005p\002\000\005h\002\000\005`\002\000\005p\003\000\005h\003\000\005`\003\000\005p\004\000\005h\004\000\005p\005\000\005p\006\000\005p\007\000\005p\b\000\001\248\001\000\005p\t\000\005p\n\000\005h\005\000\005h\006\000\005h\007\000\005`\004\000\003\172\001\000\003\172\002\000\b@\001\000\b<\001\000\b@\002\000\b<\002\000\007\244\001\000\007\232\001\000\007\224\001\000\007\216\001\000\007\212\001\000\b@\003\000\b@\004\000\012d\001\000\012`\001\000\0064\001\000\0064\002\000\0064\003\000\0064\004\000\0064\005\000\007t\001\000\007t\002\000\006,\001\000\006(\001\000\006 \001\000\0064\006\000\0064\007\000\012d\002\000\012`\002\000\012d\003\000\012`\003\000\012d\004\000\012d\005\000\012d\006\000\012d\007\000\004\144\001\000\004\144\002\000\004\144\003\000\004\144\004\000\004\144\005\000\004\144\006\000\012d\b\000\012`\004\000\012`\005\000\012`\006\000\003,\001\000\003,\002\000\003\156\001\000\003\152\001\000\003\156\002\000\bX\001\000\bX\002\000\bX\003\000\bX\004\000\bX\005\000\bX\006\000\001\248\001\000\bX\007\000\006x\001\000\006t\001\000\006x\002\000\bX\b\000\bX\t\000\011\216\001\000\t\132\001\000\011\216\002\000\t\132\002\000\011\216\003\000\t\132\003\000\011\216\004\000\t\132\004\000\011\216\005\000\011\216\006\000\011\216\007\000\011\216\b\000\t\132\005\000\t\132\006\000\t\132\007\000\b8\001\000\b4\001\000\004\192\001\000\006\192\001\000\006\188\001\000\006\192\002\000\006\192\003\000\006\192\004\000\006\192\005\000\005\196\001\000\005\132\001\000\006\192\006\000\006\188\002\000\006\188\003\000\006\188\004\000\005\196\001\000\005\132\001\000\006\188\005\000\t\188\001\000\t\180\001\000\t\176\001\000\0064\001\000\006\012\001\000\t\188\002\000\t\180\002\000\t\176\002\000\006\012\002\000\t\188\003\000\t\180\003\000\t\176\003\000\006\012\003\000\006\012\004\000\006\004\001\000\006\012\005\000\006\012\006\000\005\196\001\000\005\132\001\000\006\012\007\000\t\188\004\000\t\188\005\000\t\188\006\000\t\188\007\000\006,\001\000\006(\001\000\006 \001\000\t\188\b\000\004\152\001\000\004\152\002\000\004\152\003\000\004\152\004\000\006,\001\000\006(\001\000\006 \001\000\004\152\005\000\004\152\006\000\004\152\007\000\t\188\t\000\t\180\004\000\t\176\004\000\t\180\005\000\t\180\006\000\005\180\001\000\t\180\007\000\005\216\001\000\006,\001\000\006(\001\000\006 \001\000\005\216\002\000\t\176\005\000\t\176\006\000\005\220\001\000\005\220\002\000\t\132\001\000\t\132\002\000\t\132\003\000\t\132\004\000\t\204\001\000\001p\001\000\001p\002\000\001p\003\000\001p\004\000\rL\001\000\001p\005\000\0034\001\000\t\024\001\000\0034\002\000\0034\003\000\001p\006\000\001p\007\000\001p\b\000\001<\001\000\001<\002\000\001\016\001\000\001\248\001\000\001\016\002\000\001\016\003\000\001<\003\000\001\028\001\000\001\028\002\000\006d\001\000\006\\\001\000\006d\002\000\006`\001\000\006X\001\000\006`\002\000\001\028\003\000\001\028\004\000\001\028\005\000\001\248\001\000\001\028\006\000\001\028\007\000\001 \001\000\001 \002\000\bt\001\000\bl\001\000\bt\002\000\bp\001\000\bh\001\000\bp\002\000\001 \003\000\001 \004\000\001 \005\000\001 \006\000\001 \007\000\001\024\001\000\001\024\002\000\001H\001\000\001D\001\000\001H\002\000\001D\002\000\001H\003\000\001H\004\000\005\180\001\000\001H\005\000\001H\006\000\0014\001\000\t\016\001\000\0014\002\000\0014\003\000\0014\004\000\t\016\002\000\t\016\003\000\001\248\001\000\t\012\001\000\001\248\001\000\0018\001\000\0010\001\000\001H\007\000\001@\001\000\001@\002\000\001D\003\000\005\180\001\000\001D\004\000\001D\005\000\001D\006\000\001@\001\000\001@\001\000\001\024\003\000\001\024\004\000\001$\001\000\001$\002\000\001\248\001\000\001\220\001\000\001\220\002\000\001\248\001\000\001\220\003\000\001$\003\000\001$\004\000\001<\004\000\001<\005\000\001(\001\000\001(\002\000\001,\001\000\004\220\001\000\004\220\002\000\001p\t\000\001@\001\000\001p\n\000\004\136\001\000\004\136\002\000\004\136\003\000\004\136\004\000\004\136\005\000\004\136\006\000\004\136\007\000\001@\001\000\004\136\b\000\004\136\t\000\001p\011\000\t\204\002\000\t\204\003\000\t\204\004\000\t\204\005\000\t\204\006\000\t\204\007\000\005x\001\000\001h\001\000\001h\002\000\001h\003\000\001h\004\000\0014\001\000\000\136\001\000\000\132\001\000\000\128\001\000\t@\001\000\t\012\001\000\001\248\001\000\001l\001\000\001l\002\000\001d\001\000\001d\002\000\001d\003\000\012\212\001\000\001t\001\000\0018\001\000\000\156\001\000\001d\004\000\001`\001\000\001@\001\000\001l\003\000\001h\005\000\t\204\b\000\t\204\t\000\004\128\001\000\004\128\002\000\004\128\003\000\004\128\004\000\004\128\005\000\004\128\006\000\004\128\007\000\004\128\b\000\004\128\t\000\t\204\n\000\t\148\001\000\004\196\001\000\t\172\001\000\t\152\001\000\t\196\001\000\t\192\001\000\t\184\001\000\004\196\002\000\t\140\001\000\t\140\002\000\t\200\001\000\t\200\002\000\t\200\003\000\t\200\004\000\006,\001\000\006(\001\000\006 \001\000\t\200\005\000\t\156\001\000\004\168\001\000\004\168\002\000\004\168\003\000\004\168\004\000\004\168\005\000\b\188\001\000\004\168\006\000\004\168\007\000\004\168\b\000\t\156\002\000\t\160\001\000\004\176\001\000\004\176\002\000\004\176\003\000\004\176\004\000\004\176\005\000\004\176\006\000\b\188\001\000\004\176\007\000\004\176\b\000\004\176\t\000\t\160\002\000\t\144\001\000\t\208\001\000\004\192\002\000\b4\002\000\t\136\001\000\b8\002\000\001\248\001\000\012p\001\000\001p\001\000\012p\002\000\012p\003\000\012p\004\000\012p\005\000\012p\006\000\r \001\000\n\248\001\000\n\204\001\000\n\200\001\000\n\192\001\000\004\028\001\000\001\212\001\000\001\180\001\000\000\236\001\000\001\\\001\000\001\\\002\000\001\\\003\000\000\224\001\000\000\224\002\000\000\224\003\000\000\224\004\000\000\208\001\000\000\204\001\000\000\208\002\000\000\208\003\000\001X\001\000\001L\001\000\004P\001\000\004L\001\000\000\188\001\000\000\184\001\000\004P\002\000\004P\003\000\004P\004\000\004P\005\000\004P\006\000\004P\007\000\000\188\002\000\000\184\002\000\000\188\003\000\000\188\004\000\005\180\001\000\000\188\005\000\000\188\006\000\001T\001\000\t\016\001\000\001T\002\000\001T\003\000\001T\004\000\000\176\001\000\000\176\002\000\000\252\001\000\000\248\001\000\000\248\002\000\004T\001\000\000\180\001\000\000\180\002\000\000\200\001\000\000\196\001\000\000\172\001\000\b\204\001\000\000\196\002\000\001P\001\000\000\192\001\000\000\180\003\000\000\192\002\000\004T\002\000\000\248\003\000\000\192\001\000\000\252\002\000\000\176\003\000\000\192\001\000\000\188\007\000\000\184\003\000\005\180\001\000\000\184\004\000\000\184\005\000\000\192\001\000\000\184\006\000\004L\002\000\004L\003\000\004L\004\000\004L\005\000\001X\002\000\001L\002\000\000\192\001\000\001L\003\000\001X\003\000\001X\004\000\001X\005\000\000\208\004\000\000\192\001\000\007\\\001\000\007\\\002\000\000\208\005\000\000\208\006\000\000\204\002\000\000\204\003\000\000\192\001\000\000\204\004\000\000\204\005\000\000\220\001\000\000\220\002\000\000\220\003\000\000\220\004\000\001\\\004\000\001\\\005\000\000\228\001\000\000\228\002\000\000\232\001\000\004\228\001\000\004\228\002\000\000\236\002\000\000\192\001\000\000\240\001\000\000\240\002\000\000\240\003\000\000\240\004\000\000\192\001\000\000\244\001\000\000\244\002\000\012p\007\000\012p\b\000\004x\001\000\004x\002\000\004x\003\000\004x\004\000\004x\005\000\004x\006\000\004x\007\000\004x\b\000\012p\t\000\012L\001\000\004\212\001\000\004D\001\000\012\\\001\000\011\212\001\000\012H\001\000\012l\001\000\012h\001\000\0128\001\000\0050\001\000\004\212\002\000\012<\001\000\004H\001\000\012@\001\000\012@\002\000\012x\001\000\012x\002\000\012x\003\000\012x\004\000\005\248\001\000\005\244\001\000\005\236\001\000\012x\005\000\012P\001\000\012P\002\000\012D\001\000\012t\001\000\b0\001\000\0124\001\000\0124\002\000\0124\003\000\003,\003\000\003,\004\000\0128\001\000\0050\001\000\002\004\001\000\0120\001\000\012<\001\000\004H\001\000\002\212\001\000\003\172\003\000\003\172\004\000\002h\005\000\002h\006\000\005\224\003\000\005\224\004\000\006\184\005\000\005\248\001\000\005\244\001\000\005\236\001\000\006\184\006\000\006\180\002\000\006\180\003\000\006\180\004\000\005\248\001\000\005\244\001\000\005\236\001\000\006\180\005\000\004\208\002\000\004\208\003\000\004\208\004\000\004\204\002\000\bT\003\000\bT\004\000\003\128\n\000\t\168\006\000\t\168\007\000\t\168\b\000\t\168\t\000\b\180\001\000\t\168\n\000\b\180\002\000\b\172\001\000\b\176\001\000\t\164\004\000\003\132\004\000\003|\004\000\005x\001\000\003\132\005\000\003|\005\000\003|\006\000\003|\007\000\b\188\001\000\003|\b\000\003|\t\000\t\164\005\000\t\164\006\000\t\164\007\000\t\164\b\000\b\180\001\000\t\164\t\000\006\016\003\000\006\016\004\000\006,\001\000\006(\001\000\006 \001\000\000T\005\000\000T\006\000\rD\006\000\001\248\001\000\rD\007\000\003\028\003\000\003\028\004\000\np\001\000\nl\001\000\n`\001\000\nP\002\000\n(\001\000\n$\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n<\002\000\n8\002\000\n<\003\000\n8\003\000\n<\004\000\n8\004\000\n<\005\000\n8\005\000\005\248\001\000\005\244\001\000\005\236\001\000\n8\006\000\n<\006\000\n<\007\000\006,\001\000\006(\001\000\006 \001\000\n<\b\000\n\004\002\000\n\000\002\000\n\000\003\000\n\004\003\000\n\004\004\000\002L\004\000\002L\005\000\b\232\001\000\002L\006\000\002\024\004\000\002\020\004\000\002\016\004\000\002\012\004\000\002\024\005\000\002\016\005\000\b\232\001\000\002\024\006\000\002\016\006\000\002\024\007\000\002\024\b\000\002\020\005\000\002\020\006\000\002X\004\000\002X\005\000\002X\006\000\002X\007\000\000\168\003\000\000\168\004\000\002\028\003\000\002\028\004\000\002\028\005\000\002\028\006\000\002\028\007\000\003\148\001\000\003\148\002\000\000\000\001\000\000\004\000\000\003\168\001\000\003\168\002\000\000\004\001\000\000\b\000\000\r \001\000\005\140\001\000\001\180\001\000\005\140\002\000\005\140\003\000\005\144\001\000\000\b\001\000\005\196\001\000\005\156\001\000\005\152\001\000\005\148\001\000\005\132\001\000\005\156\002\000\005\152\002\000\005\148\002\000\005\132\002\000\rr\028\001\000\r\028\002\000\r\028\003\000\r\028\004\000\r\024\001\000\r\024\002"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000I\000M\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000^\000`\000a\000b\000c\000d\000e\000f\000g\000n\000o\000p\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\011\001\012\001\014\001\018\001\021\001\023\001\025\001 \001&\001)\001+\001,\001.\0010\0011\0012\0015\0016\0019\001:\001=\001>\001?\001@\001A\001C\001D\001E\001F\001G\001H\001I\001J\001N\001Q\001U\001Y\001\\\001`\001d\001f\001g\001h\001i\001l\001m\001n\001o\001s\001t\001w\001{\001|t\002\n\002\012\002\r\002\014\002\015\002\017\002\020\002\023\002\025\002\027\002\028\002\029\002\"\002$\002%\002'\002(\002)\002*\002-\002.\002/\0022\0024\0025\0026\0027\0028\002:\002=\002>\002?\002A\002E\002F\002G\002H\002I\002J\002L\002N\002P\002R\002T\002U\002V\002W\002X\002Z\002[\002\\\002]\002^\002`\002a\002c\002d\002e\002f\002g\002h\002i\002k\002m\002q\002r\002v\002x\002y\002z\002}b\003\t\003\012\003\r\003\015\003\016\003\017\003\018\003\020\003\021\003\022\003\023\003\024\003\025\003\026\003\027\003\028\003\029\003\031\003 \003\"\003#\003$\003&\003'\003(\003/\0032\0034\0036\0038\0039\003:\003<\003=\003>\003?\003@\003A\003B\003H\003L\003P\003Q\003R\003S\003T\003U\003V\003W\003X\003Y\003[\003\\\003]\003^\003_\003`\003a\003d\003g\003j\003l\003m\003o\003p\003r\003s\003t\003u\003v\003w\003z\003|\003}\003~t\004\011\004\012\004\r\004\014\004\020\004\024\004\027\004\028\004\029\004\030\004\031\004 \004!\004\"\004$\004'\004(\004*\004+\0042\0043\0045\0046\0047\0048\0049\004:\004;\004<\004=\004F\004G\004I\004J\004K\004L\004N\004V\004Y\004Z\004`\004a\004h\004i\004j\004l\004m\004n\004o\004t\004v\004w\004x\004y\004z\004{\004}\004~t\005\011\005\r\005\015\005\017\005\019\005\020\005\021\005\022\005\023\005\031\005 \005\"\005$\005&\005/\0050\0051\0052\0053\0055\0057\0059\005@\005A\005B\005C\005D\005J\005K\005L\005M\005N\005[\005\\\005i\005j\005k\005n\005o\005p\005q\005r\005\127\005\134\005\135\005\136\005\160\005\162\005\163\005\164\005\165\005\167\005\169\005\172\005\173\005\175\005\176\005\177\005\178\005\179\005\180\005\181\005\194\005\195\005\210\005\224\005\229\005\230\005\232\005\234\005\235\005\236\005\237\005\241\005\242\005\246\005\247\005\249\005\251\005\253\005\255\006\000\006\002\006\003\006\004\006\006\006\007\006\t\006\022\006\023\006\024\006\025\006\026\006\028\006\029\006\030\006\031\006!\006\"\006#\006>\006?\006W\006X\006p\006q\006\137\006\138\006\162\006\163\006\187\006\188\006\212\006\213\006\237\006\238\007\006\007\007\007\031\007 \0078\0079\007Q\007R\007j\007k\007\131\007\132\007\156\007\157\007\181\007\182\007\206\007\207\007\231\007\232\b\000\b\001\b\025\b\026\b2\b3\bK\bL\bd\be\bg\bt\bu\b\141\b\144\b\145\b\146\b\147\b\148\b\149\b\150\b\155\b\159\b\160\b\161\b\162\b\164\b\165\b\166\b\168\b\169\b\171\b\172\b\173\b\174\b\175\b\176\b\177\b\178\b\179\b\180\b\181\b\182\b\183\b\184\b\186\b\187\b\189\b\190\b\191\b\197\b\198\b\199\b\200\b\206\b\207\b\213\b\214\b\220\b\221\b\222\b\223\b\224\b\226\b\227\b\233\b\234\b\235\b\236\b\237\t\005\t\011\t\012\t\r\t\015\t\016\t\017\t\018\t\019\t\020\t\022\t\023\t\024\t\027\t\028\t\029\t\030\t9\t;\t<\tV\tZ\t_\ta\tz\t{\t|\t}\t~\t\128\t\130\t\137\t\138\t\162\t\163\t\187\t\188\t\189\t\190\t\214\t\215\t\216\t\217\t\218\t\221\t\222\t\223\t\224\t\251\t\255\n\004\n\006\n\031\n \n!\n\"\n#\n$\n%\n&\n'\n(\n5\n6\n7\n:\n;\n>\nA\nC\nD\nE\nF\nG\nW\nf\nh\ni\nj\nw\n}\n\127\n\129\n\131\n\132\n\156\n\158\n\160\n\162\n\163\n\187\n\189\n\191\n\193\n\194\n\218\n\232\n\234\n\236\n\238\n\239\011\007\011\t\011\011\011\r\011\014\011&\011(\011A\011C\011D\011\\\011d\011j\011l\011n\011p\011q\011\137\011\139\011\141\011\143\011\144\011\168\011\170\011\172\011\174\011\175\011\199\011\201\011\202\011\226\011\239\011\241\011\242\011\243\012\011\012\012\012\r\012\014\012\015\012\016\012\017\012)\012*\012/\0122\0123\0124\0125\0126\0127\0128\0129\012:\012;\012<\012=\012>\012?\012@\012A\012B\012C\012D\012E\012F\012G\012H\012I\012J\012K\012L\012M\012N\012O\012P\012Q\012R\012S\012T\012U\012V\012_\012`\012a\012b\012c\012f\012g\012h\012i\012j\012k\012l\012m\012n\012o\012p\012q\012r\012s\012t\012v\012w\012x\012y\012{\012|\012}\012~\012\128\012\130\012\155\012\156\012\180\012\181\012\182\012\183\012\196\012\220\012\221\012\234\012\235\012\236\r\004\r\007\r\t\r\n\r\011\r\012\r\r\r\014\r\015\r*\r+\r,\r-\r.\rI\rJ\rK\rL\rM\rQ\rR\rS\rT\rU\rV\rW\rX\r\\\r]\ra\rb\rf\rg\rh\ri\rj\rk\rl\rm\rn\ro\rp\rq\rr\rs\rt\ru\rv\rw\rx\ry\rz\r{\r|\r}\r~\r\127\r\128\r\129\r\130\r\139\r\140\r\141\r\142\r\143\r\144\r\145\r\146\r\147\r\148\r\149\r\150\r\151\r\154\r\156\r\157\r\159\r\160\r\161\r\162\r\163\r\164\r\165\r\166\r\167\r\191\r\192\r\193\r\194\r\196\r\197\r\198\r\200\r\227\r\228\r\229\r\233\r\234\r\236\r\241\r\242\r\243\r\247\r\248\r\252\014\000\014\001\014\b\014\t\014\n\014\012\014\r\014\014\014\015\014\017\014\019\014\020\014\022\014\024\014\025\014\026\014\027\014\028\014\029\014\030\014\031\014\"\014$\014%\014'\014(\014)\014*\014+\014-\014/\0141\0142\0143\0144\0145\0146\0147\014:\014=\014@\014C\014E\014F\014G\014H\014J\014K\014L\014N\014O\014Q\014R\014S\014T\014V\014W\014X\014Y\014]\014_\014`\014b\014c\014d\014e\014f\014g\014j\014m\014o\014p\014q\014r\014t\014u\014v\014w\014x\014y\014z\014{\014|\014~b\015\012\015\r\015\014\015\015\015\016\015\017\015\018\015\019\015\020\015\022\015\023\015\024\015\025\015\026\015\027\015\028\015\030\015\031\015 \015!\015\"\015#\015$\015%\015'\015(\015)\015*\015+\015-\015.\0150\0151\0152\0153\0154\0156\0157\0158\0159\015;\015<\015>\015?\015@\015A\015B\015C\015D\015E\015F\015H\015J\015K\015L\015N\015O\015P\015R\015S\015T\015U\015W\015Y\015Z\015[\015]\015^\015_\015a\015b\015d\015f\015g\015h\015i\015k\015l\015n\015o\015p\015q\015r\015s\015t\015u\015v\015w\015y\015z\015{\015|\015}\015~b\016\n\016\011\016\012\016\014\016\015\016\016\016\018\016\019\016\020\016\021\016\022\016\024\016\025\016\027\016\028\016\029\016\031\016!\016\"\016$\016%\016&\016(\016)\016*\016,\016-\016/\0160\0162\0163\0164\0165\0166\0169\016:\016;\016<\016=\016?\016@\016A\016B\016C\016D\016F\016G\016H\016I\016J\016K\016L\016M\016N\016O\016P\016Q\016R\016S\016U\016V\016W\016X\016Z\016[\016\\\016]\016^\016_\016`\016a\016b\016c\016d\016e\016f\016g\016h\016i\016j\016k\016l\016m\016n\016o\016q\016r\016t\016u\016v\016w\016x\016y\016}\016~b\017\t\017\n\017\011\017\012\017\r\017\014\017\015\017\016\017\017\017\018\017\019\017\020\017\021\017\022\017\025\017\026\017\027\017\028\017\029\017\"\017&\017(\017)\017*\017+\017,\017-\017.\017/\0170\0171\0172\0173\0174\0175\0176\0177\0179\017:\017;\017<\017=\017>\017?\017@\017C\017D\017E\017F\017H\017I\017J\017K\017L\017M\017N\017T\017U\017V\017W\017X\017Y\017Z\017\\\017^\017_\017f\017m\017n\017o\017p\017q\017r\017u\017v\017w\017x\017y\017z\017{\017|\017}\017~\017\127\017\128\017\129\017\131\017\132\017\133\017\134\017\135\017\136\017\137\017\138\017\139\017\140\017\141\017\142\017\143\017\144\017\145\017\146"))
    
    and nullable =
      "\000\000@\164\004\000\128\000\001\014\016\000\007\254\003\128\000\000?\255\128\000\128\130\016\000\001\128\000"
    
    and first =
      (137, "3\248H0\177J\223\230g\160*\007\220\138\000\028p\025\252$\024X\165o\2433\208\021\003\238E\000\0148\000 \000\000\000\000\001@\000\000\000\000\000\000\000\000\000\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001@\001\000\000\000\004\000\000\000\000\000H\001\004\000 @\000\132\000\004\000\001\144\000\002\000\003?\132\131\011\020\173\254fz\002\128}\200\160\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\001\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\b\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\128 \001\000\000\000\000\000\000\000\b\000\b\000\000\000\000\000P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000g\240\144ab\149\191\204\207@T\015\185\020\0008\224\000\000\000\000\144\000@\000\000\001\000\000\000\000\000\000@\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002$\000\017\000\000\000@\000\000\000\000\000\016\000 \000\001\018\000\b\000\000\000 \000\000\000\000\000\b\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\000\003\000\0000\000\000\n\023\b\000\004\000\000\000\000\000\0003\248H0\177J\223\230g\160*\007\220\138\000\028p\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000$\000\002\000\016 \nB\000\002\000\000\192\000\001\000\001\159\194A\133\138V\2553=\001@>\224P\000\227\128\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\003\020\128$$\000\138\004\138\192\004\000\164\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000/n\200\128\130\255\021\144\000L\028\007N8,\n\r\000b\016\004\004\000\017\000\145H\000\128\020\000\000\002\b\0001\b\002\002\000\b\160H\164\000@\n\000\000\001\004\000\024\132\001\b\000\128P$r\000\000\005\000\160\000\198\000\000\000\000\000\000\000\000\002(\000\000\000\000\000\000\000\000\000\001\000\000@\001\000\000\000\128\000\001\000\000\000 \000\004\128\000@\002\004\000\b@\000@\000\024\000\000 \000\002@\b \001\002\000\004 \000 \000\012\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\016\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000@\001\128\000\024\000\000\005\011\132\000\002\000\000\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\0000\000\003\000\000\000\161p\128\000@\000\000\000\000\000\000\016\000\000\137\000\004\000\000\000\016\000\000\000\000\000\004\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\128\000\128\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\136@\016\024\000E\002M\160\002\000T\000\000\b \000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000b\016\004\004\000\017@\145h\000\128\021\000\000\002(\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\012R\000\148\016@(\018;\000\000\002\128P\000c\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\136\000\000\000\000\004\000\004\000\000\000\016\000\000\000\128\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000@\000\"\000\000\000\000\001\000\001\000\000\000\004\000\000\000 \0001\b\002\016\001\000\160H\228\000\000\n\001@\001\140\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\006\127\t\006V)[\252\204\244\005\000\251\129@\007\142\000\016\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\012B\000\128\128\002(\018-\000\016\002\128\000\000A\000\006!\000@@\001\020\t\022\128\b\001@\000\000 \128\003\016\128  \000\138\004\139@\004\000\160\000\000\016@\001\136@\016\016\000E\002E\160\002\000T\000\000\b \000\196 \b\b\000\"\129\"\208\001\000*\000\000\004\016\000 \000\000\000\000\001@\000\000\000\000\000\000\000\000\000\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001@\001\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000@\001\248\001\128\144\000\015\136@\004\b\001\002\139\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000b\000\006\192\128\001\194\225@\000\128\004\000@\000 \000\000\bb\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\004\000\000\000\000\000\002\000\000 \000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000@\002\000\000\000\000\000\000\000\016\0000\000\003\000\000\000\161p\128\000@\000\000 \000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\003\020\128$$\000\138\004\138\192\004\000\164\000\000\016@\001\138@\018\018\000E\002E`\002\000R\000\001( \000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\144\002\b\000@\128)\b\000\b\128\003\000\000\004\000\000H\000\004\000 @\020\132\000\004\000\001\128\000\002\000\000 \000\002\000\000\002\000B\001\128\000\000\000\000\128\000\000\016\000\001\000\000\001\000!\000@\000\000\000\000@\000\000\t\000 \128\004\b\002\144\128\000\128\0000\000\000@\000\004\128\016@\002\004\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\196 \b\b\000\"\129\"\208\001\000(\000\000\004\016\000b\016\004\004\000\017@\145h\000\128\020\000\000\002\b\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\006!\000@@\001\028\t\022\128\b\001@\000\000 \128\003\020\128$$\000\138\004\138\192\004\000\160\000\000\016@\001\138@\018\130\b\005\002G`\000\000P\n\000\012`\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\128 \000\000\000\002\000\000\000\000\000\000\000\000\000\000\001@\016\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\160\b\000\000\000\000\128\000\000\000\000\000\000\000\000\128\000\000\000\016\000\000\000\000\000\000\000\000\000\004\128\016@\002\004\000\b@\000@\000\025\000\000 \000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\012\254\018\012,R\183\249\153\232\np\128\000@\000\000\000\000\000\000\024\164\001! \020P$V\000 \005\000\000\002\130\000\012R\000\144\144\002(\018+\000\016\002\144\000\tA\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\136\000\000\000\000\004\000\004\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\004\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\001\016\000\000\000\000\b\000\b\000\000\000 \000\000\001\000\001\128\000\024\000\000\005\011\133\000\002\000\000\000\000\000\000\000\192\000\rb \000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\0000\000\003@H\000\165p\128\000@\000\000\000\000\000\000\b\000\000\000\004\000P\000@\000\000\000\000\000\000\000\000\004\000\000\128\002\000\t\016 \000\000\000\000\000\000\000\000\b\000\000\128\000\000\128\016\128 \000\000\000\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000b\144\004\132\128\017@\145X\000\128\020\000\000\002\b\0001H\002B@\b\160H\172\000@\n@\000\005\004\000 \000\002\000\000\002\000B\001\128\000\000\000\000\128\000\000\004\000\000\128\002\000)\016 \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\189\187\"\002\011\252V@\0010p\0298\224\176(4\001\128\000\024\000\000\005\011\132\000\002\000\000\000\000\000\000\000D\000\000\000\000\002\128\002\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\1280\000\003@@\000\225p\128\000@\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000")
    
  end) (ET) (TI)
  
end

let use_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1930 lexer lexbuf) : (Parsetree.toplevel_phrase list))

and toplevel_phrase =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1910 lexer lexbuf) : (Parsetree.toplevel_phrase))

and parse_val_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1904 lexer lexbuf) : (Longident.t))

and parse_pattern =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1900 lexer lexbuf) : (Parsetree.pattern))

and parse_mty_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1896 lexer lexbuf) : (Longident.t))

and parse_mod_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1892 lexer lexbuf) : (Longident.t))

and parse_mod_ext_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1888 lexer lexbuf) : (Longident.t))

and parse_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1884 lexer lexbuf) : (Parsetree.expression))

and parse_core_type =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1880 lexer lexbuf) : (Parsetree.core_type))

and parse_constr_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1876 lexer lexbuf) : (Longident.t))

and parse_any_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1858 lexer lexbuf) : (Longident.t))

and interface =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1854 lexer lexbuf) : (Parsetree.signature))

and implementation =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (Parsetree.structure))

module Incremental = struct
  
  let use_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1930 initial_position) : (Parsetree.toplevel_phrase list) MenhirInterpreter.checkpoint)
  
  and toplevel_phrase =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1910 initial_position) : (Parsetree.toplevel_phrase) MenhirInterpreter.checkpoint)
  
  and parse_val_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1904 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_pattern =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1900 initial_position) : (Parsetree.pattern) MenhirInterpreter.checkpoint)
  
  and parse_mty_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1896 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1892 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_ext_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1888 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1884 initial_position) : (Parsetree.expression) MenhirInterpreter.checkpoint)
  
  and parse_core_type =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1880 initial_position) : (Parsetree.core_type) MenhirInterpreter.checkpoint)
  
  and parse_constr_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1876 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_any_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1858 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and interface =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1854 initial_position) : (Parsetree.signature) MenhirInterpreter.checkpoint)
  
  and implementation =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (Parsetree.structure) MenhirInterpreter.checkpoint)
  
end

# 4212 "src/ocaml/preprocess/parser_raw.mly"
  

# 49939 "src/ocaml/preprocess/parser_raw.ml"
